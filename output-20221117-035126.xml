<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.6.12 on linux)" generated="20221117 03:51:26.590" rpa="false">
<suite id="s1" name="Test Bmc Network Conf" source="/gsa/ausgsa-p10/03/indiateam04/swe12345/openbmc/sweta_gui_add_multiple/redfish/managers/test_bmc_network_conf.robot">
<kw name="Suite Setup Execution" type="setup">
<doc>Do suite setup execution.</doc>
<kw name="Login" library="Redfish">
<doc>Assign BMC default values for username, password and auth arguments
and call parent class login method.</doc>
<msg timestamp="20221117 03:51:28.842" level="INFO">Attempt 1 of /redfish/v1/SessionService/Sessions</msg>
<msg timestamp="20221117 03:51:28.892" level="INFO">Response Time to /redfish/v1/SessionService/Sessions: 0.049930991139262915 seconds.</msg>
<msg timestamp="20221117 03:51:28.893" level="INFO">{'@odata.id': '/redfish/v1/SessionService/Sessions/4sDr1lIUKG', '@odata.type': '#Session.v1_5_0.Session', 'ClientOriginIPAddress': '::ffff:9.3.84.152', 'Description': 'Manager User Session', 'Id': '4sDr1lIUKG', 'Name': 'User Session', 'Oem': {'OpenBMC': {'@odata.type': '#OemSession.v1_0_0.Session', 'ClientID': ''}}, 'UserName': 'service'}</msg>
<msg timestamp="20221117 03:51:28.893" level="INFO">Login returned code 201: {
  "@odata.id": "/redfish/v1/SessionService/Sessions/4sDr1lIUKG",
  "@odata.type": "#Session.v1_5_0.Session",
  "ClientOriginIPAddress": "::ffff:9.3.84.152",
  "Description": "Manager User Session",
  "Id": "4sDr1lIUKG",
  "Name": "User Session",
  "Oem": {
    "OpenBMC": {
      "@odata.type": "#OemSession.v1_0_0.Session",
      "ClientID": ""
    }
  },
  "UserName": "service"
}</msg>
<status status="PASS" starttime="20221117 03:51:28.831" endtime="20221117 03:51:28.893"></status>
</kw>
<kw name="Get IPv4 DHCP Enabled Status">
<doc>Return IPv4 DHCP enabled status from redfish URI.</doc>
<assign>
<var>${DHCPEnabled}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:51:28.989" level="INFO">#(CST) 2022/11/17 03:51:28.988945 -    2.177209 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:51:29.008" level="INFO">#(CST) 2022/11/17 03:51:29.008143 -    0.019198 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:51:29.008" level="INFO">#(CST) 2022/11/17 03:51:29.008362 -    0.000218 - Connecting to rain40bmc.
</msg>
<msg timestamp="20221117 03:51:29.014" level="INFO">#(CST) 2022/11/17 03:51:29.013459 -    0.005098 - Executing: login_ssh(login_args = {'username': 'service', 'password': '0penBmc1'}, max_login_attempts = 5)
</msg>
<msg timestamp="20221117 03:51:29.014" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:29.014" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:29.014" level="INFO">#(CST) 2022/11/17 03:51:29.014306 -    0.000846 - Logging in to rain40bmc.
</msg>
<msg timestamp="20221117 03:51:29.022" level="INFO">login_attempt_num:                                1
</msg>
<msg timestamp="20221117 03:51:29.022" level="INFO">Logging into 'rain40bmc:22' as 'service'.</msg>
<msg timestamp="20221117 03:51:29.457" level="INFO">Read output: root@rain40bmc:~#</msg>
<msg timestamp="20221117 03:51:29.463" level="INFO">out_buf:                                          root@rain40bmc:~# 
</msg>
<msg timestamp="20221117 03:51:29.472" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:29.477" level="INFO">#(CST) 2022/11/17 03:51:29.477279 -    0.462974 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:29.478" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:29.509" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:29.509" level="INFO">#(CST) 2022/11/17 03:51:29.508810 -    0.031531 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:29.509" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:29.521" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:29.522" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:51:29.606" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:29.606" level="INFO">#(CST) 2022/11/17 03:51:29.605970 -    0.097160 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:29.614" level="INFO">#(CST) 2022/11/17 03:51:29.613690 -    0.007720 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:29.624" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:29.641" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:51:28.895" endtime="20221117 03:51:29.641"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:51:29.643" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:51:29.642" endtime="20221117 03:51:29.643"></status>
</kw>
<kw name="Get Attribute" library="Redfish">
<doc>Get and return the named attribute from the properties for a given
path.</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>DHCPv4</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:51:29.656" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:51:29.670" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.01312484685331583 seconds.</msg>
<msg timestamp="20221117 03:51:29.670" level="INFO">${resp} = {'DHCPEnabled': False, 'UseDNSServers': True, 'UseDomainName': True, 'UseNTPServers': True}</msg>
<status status="PASS" starttime="20221117 03:51:29.643" endtime="20221117 03:51:29.670"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp['DHCPEnabled']}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20221117 03:51:29.672" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20221117 03:51:29.671" endtime="20221117 03:51:29.672"></status>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20221117 03:51:29.673" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20221117 03:51:29.673" endtime="20221117 03:51:29.673"></status>
</kw>
<msg timestamp="20221117 03:51:29.674" level="INFO">${DHCPEnabled} = False</msg>
<status status="PASS" starttime="20221117 03:51:28.894" endtime="20221117 03:51:29.674"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${DHCPEnabled}</arg>
</arguments>
<msg timestamp="20221117 03:51:29.675" level="INFO">${DHCPEnabled} = False</msg>
<status status="PASS" starttime="20221117 03:51:29.675" endtime="20221117 03:51:29.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${DHCPEnabled}==True</arg>
<arg>Run Keywords</arg>
<arg>${ip_addr}</arg>
<arg>${gateway}</arg>
<arg>${subnetmask}=</arg>
<arg>Get DHCP IP Info</arg>
<arg>AND</arg>
<arg>Add IP Address</arg>
<arg>${ip_addr}</arg>
<arg>${subnetmask}</arg>
<arg>${gateway}</arg>
<arg>AND</arg>
<arg>Set Suite Variable</arg>
<arg>${ip_addr}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:29.676" endtime="20221117 03:51:29.677"></status>
</kw>
<kw name="Get BMC Default Gateway" library="bmc_network_utils">
<doc>Get system default gateway.</doc>
<assign>
<var>${test_gateway}</var>
</assign>
<kw name="Get BMC Route Info" library="bmc_network_utils">
<doc>Get system route info.</doc>
<assign>
<var>${route_info}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip route</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:51:29.765" level="INFO">#(CST) 2022/11/17 03:51:29.765053 -    0.151363 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip route', open_connection_args = {'host': 'rain40bmc'...
</msg>
<msg timestamp="20221117 03:51:29.783" level="INFO">#(CST) 2022/11/17 03:51:29.782647 -    0.017594 - Issuing: sudo -i /sbin/ip route
</msg>
<msg timestamp="20221117 03:51:29.783" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:29.783" level="INFO">#(CST) 2022/11/17 03:51:29.782994 -    0.000346 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:51:29.783" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:29.784" level="INFO">#(CST) 2022/11/17 03:51:29.783445 -    0.000451 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:51:29.794" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:29.799" level="INFO">#(CST) 2022/11/17 03:51:29.798777 -    0.015332 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:29.799" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:29.834" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:29.834" level="INFO">#(CST) 2022/11/17 03:51:29.833875 -    0.035099 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:29.834" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:29.847" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip route
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:29.847" level="INFO">Executing command 'sudo -i /sbin/ip route'.</msg>
<msg timestamp="20221117 03:51:29.930" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:29.931" level="INFO">#(CST) 2022/11/17 03:51:29.930645 -    0.096769 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:29.939" level="INFO">#(CST) 2022/11/17 03:51:29.938498 -    0.007853 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:29.949" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:29.962" level="INFO">${cmd_output} = default via 9.41.164.1 dev eth0 
9.41.164.0/24 dev eth0 scope link  src 9.41.164.249 
169.254.0.0/16 dev eth0 scope link  src 169.254.6.76  metric 2048 </msg>
<msg timestamp="20221117 03:51:29.962" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:51:29.962" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:51:29.679" endtime="20221117 03:51:29.962"></status>
</kw>
<msg timestamp="20221117 03:51:29.962" level="INFO">${route_info} = default via 9.41.164.1 dev eth0 
9.41.164.0/24 dev eth0 scope link  src 9.41.164.249 
169.254.0.0/16 dev eth0 scope link  src 169.254.6.76  metric 2048 </msg>
<status status="PASS" starttime="20221117 03:51:29.678" endtime="20221117 03:51:29.963"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${route_info}</arg>
<arg>default via</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:51:29.964" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20221117 03:51:29.964" level="INFO">${lines} = default via 9.41.164.1 dev eth0 </msg>
<status status="PASS" starttime="20221117 03:51:29.963" endtime="20221117 03:51:29.964"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:51:30.037" level="INFO">#(CST) 2022/11/17 03:51:30.037211 -    0.098713 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:51:30.053" level="INFO">#(CST) 2022/11/17 03:51:30.053238 -    0.016027 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:51:30.053" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:30.054" level="INFO">#(CST) 2022/11/17 03:51:30.053557 -    0.000319 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:51:30.054" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:30.054" level="INFO">#(CST) 2022/11/17 03:51:30.054035 -    0.000478 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:51:30.064" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:30.068" level="INFO">#(CST) 2022/11/17 03:51:30.068117 -    0.014082 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:30.068" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:30.100" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:30.100" level="INFO">#(CST) 2022/11/17 03:51:30.100190 -    0.032073 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:30.100" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:30.113" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:30.113" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:51:30.197" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:30.197" level="INFO">#(CST) 2022/11/17 03:51:30.196676 -    0.096486 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:30.205" level="INFO">#(CST) 2022/11/17 03:51:30.204373 -    0.007696 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:30.215" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:30.230" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:51:29.964" endtime="20221117 03:51:30.230"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:51:30.231" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:51:30.230" endtime="20221117 03:51:30.231"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${lines}</arg>
<arg>${ethernet_interface}</arg>
</arguments>
<assign>
<var>${default_gw_line}</var>
</assign>
<msg timestamp="20221117 03:51:30.232" level="INFO">1 out of 1 lines matched</msg>
<msg timestamp="20221117 03:51:30.232" level="INFO">${default_gw_line} = default via 9.41.164.1 dev eth0 </msg>
<status status="PASS" starttime="20221117 03:51:30.232" endtime="20221117 03:51:30.233"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${default_gw_line}</arg>
</arguments>
<assign>
<var>${default_gw}</var>
</assign>
<msg timestamp="20221117 03:51:30.233" level="INFO">${default_gw} = ['default', 'via', '9.41.164.1', 'dev', 'eth0']</msg>
<status status="PASS" starttime="20221117 03:51:30.233" endtime="20221117 03:51:30.234"></status>
</kw>
<msg timestamp="20221117 03:51:30.234" level="INFO">${test_gateway} = 9.41.164.1</msg>
<status status="PASS" starttime="20221117 03:51:29.677" endtime="20221117 03:51:30.234"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${test_gateway}</arg>
</arguments>
<msg timestamp="20221117 03:51:30.235" level="INFO">${test_gateway} = 9.41.164.1</msg>
<status status="PASS" starttime="20221117 03:51:30.235" endtime="20221117 03:51:30.235"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:28.830" endtime="20221117 03:51:30.235"></status>
</kw>
<test id="s1-t1" name="Verify Modifying IP Address Multiple Times">
<kw name="Test Setup Execution" type="setup">
<doc>Test setup execution.</doc>
<kw name="Login" library="Redfish">
<doc>Assign BMC default values for username, password and auth arguments
and call parent class login method.</doc>
<msg timestamp="20221117 03:51:30.256" level="INFO">Attempt 1 of /redfish/v1/SessionService/Sessions</msg>
<msg timestamp="20221117 03:51:30.313" level="INFO">Response Time to /redfish/v1/SessionService/Sessions: 0.05631689773872495 seconds.</msg>
<msg timestamp="20221117 03:51:30.313" level="INFO">{'@odata.id': '/redfish/v1/SessionService/Sessions/NiFIxy45gf', '@odata.type': '#Session.v1_5_0.Session', 'ClientOriginIPAddress': '::ffff:9.3.84.152', 'Description': 'Manager User Session', 'Id': 'NiFIxy45gf', 'Name': 'User Session', 'Oem': {'OpenBMC': {'@odata.type': '#OemSession.v1_0_0.Session', 'ClientID': ''}}, 'UserName': 'service'}</msg>
<msg timestamp="20221117 03:51:30.313" level="INFO">Login returned code 201: {
  "@odata.id": "/redfish/v1/SessionService/Sessions/NiFIxy45gf",
  "@odata.type": "#Session.v1_5_0.Session",
  "ClientOriginIPAddress": "::ffff:9.3.84.152",
  "Description": "Manager User Session",
  "Id": "NiFIxy45gf",
  "Name": "User Session",
  "Oem": {
    "OpenBMC": {
      "@odata.type": "#OemSession.v1_0_0.Session",
      "ClientID": ""
    }
  },
  "UserName": "service"
}</msg>
<status status="PASS" starttime="20221117 03:51:30.238" endtime="20221117 03:51:30.314"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:51:30.398" level="INFO">#(CST) 2022/11/17 03:51:30.397571 -    0.193199 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:51:30.415" level="INFO">#(CST) 2022/11/17 03:51:30.415062 -    0.017491 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:51:30.415" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:30.415" level="INFO">#(CST) 2022/11/17 03:51:30.415412 -    0.000350 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:51:30.416" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:30.416" level="INFO">#(CST) 2022/11/17 03:51:30.415905 -    0.000493 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:51:30.427" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:30.431" level="INFO">#(CST) 2022/11/17 03:51:30.431207 -    0.015302 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:30.431" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:30.471" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:30.471" level="INFO">#(CST) 2022/11/17 03:51:30.470984 -    0.039777 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:30.471" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:30.484" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:30.484" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:51:30.670" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:30.671" level="INFO">#(CST) 2022/11/17 03:51:30.670449 -    0.199465 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:30.679" level="INFO">#(CST) 2022/11/17 03:51:30.678521 -    0.008072 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:30.689" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:30.705" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:51:30.315" endtime="20221117 03:51:30.705"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:51:30.720" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:51:30.746" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.0253034052439034 seconds.</msg>
<msg timestamp="20221117 03:51:30.746" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:51:30.706" endtime="20221117 03:51:30.746"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:51:30.748" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:51:30.747" endtime="20221117 03:51:30.749"></status>
</kw>
<msg timestamp="20221117 03:51:30.749" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:51:30.314" endtime="20221117 03:51:30.749"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{network_configurations}</arg>
</arguments>
<msg timestamp="20221117 03:51:30.751" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:51:30.750" endtime="20221117 03:51:30.751"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:51:30.840" level="INFO">#(CST) 2022/11/17 03:51:30.840221 -    0.161700 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:51:30.858" level="INFO">#(CST) 2022/11/17 03:51:30.857892 -    0.017671 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:51:30.858" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:30.858" level="INFO">#(CST) 2022/11/17 03:51:30.858263 -    0.000371 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:51:30.859" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:30.859" level="INFO">#(CST) 2022/11/17 03:51:30.858743 -    0.000480 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:51:30.870" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:30.874" level="INFO">#(CST) 2022/11/17 03:51:30.874103 -    0.015361 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:30.874" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:30.909" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:30.909" level="INFO">#(CST) 2022/11/17 03:51:30.909069 -    0.034965 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:30.909" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:30.922" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:30.922" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:51:31.006" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:31.007" level="INFO">#(CST) 2022/11/17 03:51:31.006474 -    0.097405 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:31.015" level="INFO">#(CST) 2022/11/17 03:51:31.014453 -    0.007979 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:31.025" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:31.041" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:51:30.753" endtime="20221117 03:51:31.041"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:51:31.042" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:51:31.041" endtime="20221117 03:51:31.042"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:51:31.115" level="INFO">#(CST) 2022/11/17 03:51:31.114639 -    0.100186 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:51:31.130" level="INFO">#(CST) 2022/11/17 03:51:31.130414 -    0.015775 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:51:31.131" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:31.131" level="INFO">#(CST) 2022/11/17 03:51:31.130727 -    0.000313 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:51:31.131" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:31.131" level="INFO">#(CST) 2022/11/17 03:51:31.131157 -    0.000430 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:51:31.141" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:31.145" level="INFO">#(CST) 2022/11/17 03:51:31.145031 -    0.013874 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:31.145" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:31.177" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:31.177" level="INFO">#(CST) 2022/11/17 03:51:31.176687 -    0.031656 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:31.177" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:31.189" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:31.189" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:51:31.273" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:31.273" level="INFO">#(CST) 2022/11/17 03:51:31.273111 -    0.096424 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:31.281" level="INFO">#(CST) 2022/11/17 03:51:31.280782 -    0.007671 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:31.291" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:31.304" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:51:31.304" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:51:31.304" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:51:31.043" endtime="20221117 03:51:31.304"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:51:31.305" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:51:31.305" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:51:31.305" endtime="20221117 03:51:31.305"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:51:31.306" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:51:31.307" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:51:31.306" endtime="20221117 03:51:31.307"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:51:31.308" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:51:31.307" endtime="20221117 03:51:31.308"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:51:31.309" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:51:31.309" endtime="20221117 03:51:31.309"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:51:31.310" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:51:31.310" endtime="20221117 03:51:31.310"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:31.311" endtime="20221117 03:51:31.311"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:31.308" endtime="20221117 03:51:31.311"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:51:31.312" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:51:31.312" endtime="20221117 03:51:31.313"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:51:31.314" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:51:31.313" endtime="20221117 03:51:31.314"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:31.314" endtime="20221117 03:51:31.315"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:31.311" endtime="20221117 03:51:31.315"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:31.308" endtime="20221117 03:51:31.315"></status>
</kw>
<msg timestamp="20221117 03:51:31.315" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:51:30.751" endtime="20221117 03:51:31.315"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${ip_data}</arg>
</arguments>
<msg timestamp="20221117 03:51:31.316" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:51:31.316" endtime="20221117 03:51:31.316"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:30.237" endtime="20221117 03:51:31.316"></status>
</kw>
<kw name="Add IP Address" library="bmc_network_utils">
<doc>Add IP Address To BMC.</doc>
<arguments>
<arg>${test_ipv4_addr}</arg>
<arg>${test_subnet_mask}</arg>
<arg>${test_gateway}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:51:31.319" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:51:31.318" endtime="20221117 03:51:31.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Address=${ip}</arg>
<arg>SubnetMask=${subnet_mask}</arg>
<arg>Gateway=${gateway}</arg>
</arguments>
<assign>
<var>${ip_data}</var>
</assign>
<msg timestamp="20221117 03:51:31.320" level="INFO">${ip_data} = {'Address': '10.7.7.7', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}</msg>
<status status="PASS" starttime="20221117 03:51:31.319" endtime="20221117 03:51:31.321"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:51:31.321" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:51:31.321" endtime="20221117 03:51:31.321"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>${network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:51:31.391" level="INFO">#(CST) 2022/11/17 03:51:31.390855 -    0.110073 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:51:31.406" level="INFO">#(CST) 2022/11/17 03:51:31.406246 -    0.015391 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:51:31.406" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:31.407" level="INFO">#(CST) 2022/11/17 03:51:31.406550 -    0.000304 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:51:31.407" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:31.407" level="INFO">#(CST) 2022/11/17 03:51:31.406970 -    0.000420 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:51:31.417" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:31.421" level="INFO">#(CST) 2022/11/17 03:51:31.420528 -    0.013557 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:31.421" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:31.451" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:31.452" level="INFO">#(CST) 2022/11/17 03:51:31.451544 -    0.031017 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:31.452" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:31.464" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:31.464" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:51:31.547" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:31.548" level="INFO">#(CST) 2022/11/17 03:51:31.547575 -    0.096030 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:31.556" level="INFO">#(CST) 2022/11/17 03:51:31.555398 -    0.007824 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:31.566" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:31.581" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:51:31.323" endtime="20221117 03:51:31.582"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:51:31.594" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:51:31.608" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.013541876804083586 seconds.</msg>
<msg timestamp="20221117 03:51:31.608" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:51:31.582" endtime="20221117 03:51:31.608"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:51:31.610" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:51:31.609" endtime="20221117 03:51:31.610"></status>
</kw>
<msg timestamp="20221117 03:51:31.610" level="INFO">${network_configurations} = [{'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}]</msg>
<status status="PASS" starttime="20221117 03:51:31.322" endtime="20221117 03:51:31.610"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${network_configurations}</arg>
</arguments>
<assign>
<var>${num_entries}</var>
</assign>
<msg timestamp="20221117 03:51:31.611" level="INFO">Length is 1</msg>
<msg timestamp="20221117 03:51:31.611" level="INFO">${num_entries} = 1</msg>
<status status="PASS" starttime="20221117 03:51:31.610" endtime="20221117 03:51:31.611"></status>
</kw>
<kw name="${INDEX} IN RANGE [ 0 | ${num_entries} ]" type="for">
<kw name="${INDEX} = 0" type="foritem">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:31.612" endtime="20221117 03:51:31.612"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:31.611" endtime="20221117 03:51:31.612"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:31.611" endtime="20221117 03:51:31.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Set Variable</arg>
<arg>${HTTP_OK},${HTTP_NO_CONTENT}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${valid_status_codes}</arg>
</arguments>
<assign>
<var>${valid_status_codes}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${HTTP_OK},${HTTP_NO_CONTENT}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:31.614" endtime="20221117 03:51:31.614"></status>
</kw>
<msg timestamp="20221117 03:51:31.614" level="INFO">${valid_status_codes} = 200,204</msg>
<status status="PASS" starttime="20221117 03:51:31.613" endtime="20221117 03:51:31.614"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:31.615" endtime="20221117 03:51:31.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:51:31.616" level="INFO">${data} = {'IPv4StaticAddresses': [{}, {'Address': '10.7.7.7', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}]}</msg>
<status status="PASS" starttime="20221117 03:51:31.615" endtime="20221117 03:51:31.616"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:51:31.669" level="INFO">#(CST) 2022/11/17 03:51:31.669017 -    0.113619 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:51:31.681" level="INFO">#(CST) 2022/11/17 03:51:31.680750 -    0.011733 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:51:31.681" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:31.681" level="INFO">#(CST) 2022/11/17 03:51:31.681013 -    0.000264 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:51:31.681" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:31.681" level="INFO">#(CST) 2022/11/17 03:51:31.681351 -    0.000338 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:51:31.689" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:31.692" level="INFO">#(CST) 2022/11/17 03:51:31.692220 -    0.010868 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:31.692" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:31.721" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:31.721" level="INFO">#(CST) 2022/11/17 03:51:31.720948 -    0.028728 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:31.721" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:31.732" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:31.732" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:51:31.816" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:31.816" level="INFO">#(CST) 2022/11/17 03:51:31.815832 -    0.094884 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:31.823" level="INFO">#(CST) 2022/11/17 03:51:31.823302 -    0.007469 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:31.833" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:31.848" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:51:31.617" endtime="20221117 03:51:31.848"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:51:31.849" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:51:31.849" endtime="20221117 03:51:31.850"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:51:31.862" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:51:31.892" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.029276708140969276 seconds.</msg>
<status status="PASS" starttime="20221117 03:51:31.850" endtime="20221117 03:51:31.892"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' != '${HTTP_OK},${HTTP_NO_CONTENT}'</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:31.892" endtime="20221117 03:51:31.892"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:51:49.893" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:51:31.893" endtime="20221117 03:51:49.894"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:51:49.903" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:51:49.899" endtime="20221117 03:51:49.903"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:51:49.911" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:51:52.925" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:51:52.925" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.555 ms
64 bytes from rain40bmc.aus.stglabs....</msg>
<status status="PASS" starttime="20221117 03:51:49.904" endtime="20221117 03:51:52.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:51:52.928" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.555 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.256 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.252 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.224 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.224/0.321/0.555/0.137 ms</msg>
<status status="PASS" starttime="20221117 03:51:52.927" endtime="20221117 03:51:52.928"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:52.929" endtime="20221117 03:51:52.930"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:49.897" endtime="20221117 03:51:52.930"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:49.896" endtime="20221117 03:51:52.931"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:49.894" endtime="20221117 03:51:52.931"></status>
</kw>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:51:53.030" level="INFO">#(CST) 2022/11/17 03:51:53.029446 -   21.206145 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:51:53.048" level="INFO">#(CST) 2022/11/17 03:51:53.047512 -    0.018066 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:51:53.048" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:53.048" level="INFO">#(CST) 2022/11/17 03:51:53.047953 -    0.000441 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:51:53.048" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:53.049" level="INFO">#(CST) 2022/11/17 03:51:53.048473 -    0.000520 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:51:53.060" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:53.064" level="INFO">#(CST) 2022/11/17 03:51:53.064092 -    0.015620 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:53.064" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:53.100" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:53.100" level="INFO">#(CST) 2022/11/17 03:51:53.099622 -    0.035530 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:53.100" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:53.113" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:53.113" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:51:53.197" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:53.198" level="INFO">#(CST) 2022/11/17 03:51:53.197467 -    0.097844 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:53.206" level="INFO">#(CST) 2022/11/17 03:51:53.205662 -    0.008195 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:53.217" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:53.232" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:51:52.934" endtime="20221117 03:51:53.232"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:51:53.234" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:51:53.233" endtime="20221117 03:51:53.234"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:51:53.308" level="INFO">#(CST) 2022/11/17 03:51:53.307926 -    0.102264 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:51:53.324" level="INFO">#(CST) 2022/11/17 03:51:53.323800 -    0.015874 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:51:53.324" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:53.324" level="INFO">#(CST) 2022/11/17 03:51:53.324107 -    0.000307 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:51:53.324" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:53.325" level="INFO">#(CST) 2022/11/17 03:51:53.324519 -    0.000412 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:51:53.334" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:53.339" level="INFO">#(CST) 2022/11/17 03:51:53.338526 -    0.014007 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:53.339" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:53.369" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:53.370" level="INFO">#(CST) 2022/11/17 03:51:53.369525 -    0.030999 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:53.370" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:53.382" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:53.382" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:51:53.466" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:53.466" level="INFO">#(CST) 2022/11/17 03:51:53.466030 -    0.096504 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:53.474" level="INFO">#(CST) 2022/11/17 03:51:53.473856 -    0.007827 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:53.484" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:53.497" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:51:53.498" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:51:53.498" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:51:53.234" endtime="20221117 03:51:53.498"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:51:53.499" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:51:53.499" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:51:53.498" endtime="20221117 03:51:53.499"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:51:53.500" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:51:53.500" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:51:53.500" endtime="20221117 03:51:53.500"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:51:53.501" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:51:53.501" endtime="20221117 03:51:53.501"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:51:53.503" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:51:53.502" endtime="20221117 03:51:53.503"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:51:53.504" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:51:53.504" endtime="20221117 03:51:53.504"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:53.505" endtime="20221117 03:51:53.505"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:53.502" endtime="20221117 03:51:53.505"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:51:53.506" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:51:53.506" endtime="20221117 03:51:53.507"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:51:53.508" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:51:53.507" endtime="20221117 03:51:53.508"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:53.508" endtime="20221117 03:51:53.509"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:53.505" endtime="20221117 03:51:53.509"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:51:53.510" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:51:53.509" endtime="20221117 03:51:53.510"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:51:53.511" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:51:53.510" endtime="20221117 03:51:53.511"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:53.511" endtime="20221117 03:51:53.512"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:53.509" endtime="20221117 03:51:53.512"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:53.502" endtime="20221117 03:51:53.512"></status>
</kw>
<msg timestamp="20221117 03:51:53.512" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.7/16 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:51:52.933" endtime="20221117 03:51:53.512"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:53.513" endtime="20221117 03:51:53.514"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:52.931" endtime="20221117 03:51:53.515"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:51:53.618" level="INFO">#(CST) 2022/11/17 03:51:53.617726 -    0.143869 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:51:53.632" level="INFO">#(CST) 2022/11/17 03:51:53.631695 -    0.013969 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:51:53.632" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:53.632" level="INFO">#(CST) 2022/11/17 03:51:53.631975 -    0.000280 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:51:53.632" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:53.632" level="INFO">#(CST) 2022/11/17 03:51:53.632340 -    0.000365 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:51:53.641" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:53.645" level="INFO">#(CST) 2022/11/17 03:51:53.644709 -    0.012369 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:53.645" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:53.674" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:53.674" level="INFO">#(CST) 2022/11/17 03:51:53.674407 -    0.029698 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:53.675" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:53.686" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:53.686" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:51:53.770" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:53.770" level="INFO">#(CST) 2022/11/17 03:51:53.770130 -    0.095723 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:53.779" level="INFO">#(CST) 2022/11/17 03:51:53.778819 -    0.008688 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:53.790" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:53.807" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:51:53.517" endtime="20221117 03:51:53.807"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:51:53.821" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:51:53.838" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.015648697037249804 seconds.</msg>
<msg timestamp="20221117 03:51:53.838" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:51:53.807" endtime="20221117 03:51:53.838"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:51:53.840" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:51:53.839" endtime="20221117 03:51:53.840"></status>
</kw>
<msg timestamp="20221117 03:51:53.841" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:51:53.516" endtime="20221117 03:51:53.841"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:51:53.931" level="INFO">#(CST) 2022/11/17 03:51:53.931129 -    0.152310 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:51:53.949" level="INFO">#(CST) 2022/11/17 03:51:53.949071 -    0.017942 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:51:53.949" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:53.950" level="INFO">#(CST) 2022/11/17 03:51:53.949418 -    0.000347 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:51:53.950" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:53.950" level="INFO">#(CST) 2022/11/17 03:51:53.949905 -    0.000487 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:51:53.961" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:53.966" level="INFO">#(CST) 2022/11/17 03:51:53.965580 -    0.015674 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:53.966" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:54.000" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:54.001" level="INFO">#(CST) 2022/11/17 03:51:54.000583 -    0.035003 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:54.001" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:54.014" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:54.014" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:51:54.098" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:54.098" level="INFO">#(CST) 2022/11/17 03:51:54.098136 -    0.097554 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:54.106" level="INFO">#(CST) 2022/11/17 03:51:54.106178 -    0.008041 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:54.117" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:54.132" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:51:53.842" endtime="20221117 03:51:54.132"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:51:54.134" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:51:54.133" endtime="20221117 03:51:54.134"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:51:54.208" level="INFO">#(CST) 2022/11/17 03:51:54.208357 -    0.102179 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:51:54.225" level="INFO">#(CST) 2022/11/17 03:51:54.224423 -    0.016066 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:51:54.225" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:54.225" level="INFO">#(CST) 2022/11/17 03:51:54.224747 -    0.000324 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:51:54.225" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:54.225" level="INFO">#(CST) 2022/11/17 03:51:54.225189 -    0.000442 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:51:54.235" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:54.240" level="INFO">#(CST) 2022/11/17 03:51:54.239425 -    0.014236 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:54.240" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:54.272" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:54.272" level="INFO">#(CST) 2022/11/17 03:51:54.272417 -    0.032992 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:54.273" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:54.285" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:54.286" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:51:54.379" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:54.380" level="INFO">#(CST) 2022/11/17 03:51:54.379595 -    0.107178 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:54.388" level="INFO">#(CST) 2022/11/17 03:51:54.387416 -    0.007821 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:54.398" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:54.411" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:51:54.411" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:51:54.411" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:51:54.134" endtime="20221117 03:51:54.411"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:51:54.412" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:51:54.412" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:51:54.411" endtime="20221117 03:51:54.412"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:51:54.413" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:51:54.413" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:51:54.413" endtime="20221117 03:51:54.413"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:51:54.414" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:51:54.414" endtime="20221117 03:51:54.414"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:51:54.416" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:51:54.415" endtime="20221117 03:51:54.416"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:51:54.417" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:51:54.416" endtime="20221117 03:51:54.417"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:54.417" endtime="20221117 03:51:54.418"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:54.415" endtime="20221117 03:51:54.418"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:51:54.419" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:51:54.418" endtime="20221117 03:51:54.419"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:51:54.420" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:51:54.420" endtime="20221117 03:51:54.420"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:54.421" endtime="20221117 03:51:54.421"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:54.418" endtime="20221117 03:51:54.421"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:51:54.422" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:51:54.422" endtime="20221117 03:51:54.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:51:54.423" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:51:54.423" endtime="20221117 03:51:54.423"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:54.424" endtime="20221117 03:51:54.424"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:54.421" endtime="20221117 03:51:54.424"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:54.414" endtime="20221117 03:51:54.424"></status>
</kw>
<msg timestamp="20221117 03:51:54.424" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.7/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:51:53.841" endtime="20221117 03:51:54.425"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:54.425" endtime="20221117 03:51:54.426"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:54.425" endtime="20221117 03:51:54.426"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:54.427" endtime="20221117 03:51:54.428"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:54.426" endtime="20221117 03:51:54.428"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:54.425" endtime="20221117 03:51:54.428"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:53.515" endtime="20221117 03:51:54.428"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:31.317" endtime="20221117 03:51:54.428"></status>
</kw>
<kw name="Update IP Address" library="bmc_network_utils">
<doc>Update and verify IP address of BMC.</doc>
<arguments>
<arg>${test_ipv4_addr}</arg>
<arg>${test_ipv4_addr2}</arg>
<arg>${test_subnet_mask}</arg>
<arg>${test_gateway}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:51:54.431" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:51:54.430" endtime="20221117 03:51:54.431"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:51:54.434" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:51:54.433" endtime="20221117 03:51:54.434"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Address=${new_ip}</arg>
<arg>SubnetMask=${netmask}</arg>
<arg>Gateway=${gw_ip}</arg>
</arguments>
<assign>
<var>${ip_data}</var>
</assign>
<msg timestamp="20221117 03:51:54.436" level="INFO">${ip_data} = {'Address': '10.7.7.8', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}</msg>
<status status="PASS" starttime="20221117 03:51:54.435" endtime="20221117 03:51:54.436"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:51:54.504" level="INFO">#(CST) 2022/11/17 03:51:54.504266 -    0.116850 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:51:54.519" level="INFO">#(CST) 2022/11/17 03:51:54.519140 -    0.014874 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:51:54.519" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:54.520" level="INFO">#(CST) 2022/11/17 03:51:54.519499 -    0.000359 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:51:54.520" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:54.520" level="INFO">#(CST) 2022/11/17 03:51:54.519942 -    0.000443 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:51:54.529" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:54.533" level="INFO">#(CST) 2022/11/17 03:51:54.533095 -    0.013154 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:54.533" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:54.564" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:54.564" level="INFO">#(CST) 2022/11/17 03:51:54.563668 -    0.030572 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:54.564" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:54.575" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:54.575" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:51:54.660" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:54.660" level="INFO">#(CST) 2022/11/17 03:51:54.659883 -    0.096215 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:54.668" level="INFO">#(CST) 2022/11/17 03:51:54.667684 -    0.007801 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:54.678" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:54.693" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:51:54.437" endtime="20221117 03:51:54.693"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:51:54.706" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:51:54.721" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014147115871310234 seconds.</msg>
<msg timestamp="20221117 03:51:54.721" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:51:54.694" endtime="20221117 03:51:54.721"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:51:54.723" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:51:54.722" endtime="20221117 03:51:54.723"></status>
</kw>
<msg timestamp="20221117 03:51:54.724" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:51:54.436" endtime="20221117 03:51:54.724"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:54.727" endtime="20221117 03:51:54.727"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:54.725" endtime="20221117 03:51:54.728"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:54.724" endtime="20221117 03:51:54.728"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:54.730" endtime="20221117 03:51:54.731"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:54.728" endtime="20221117 03:51:54.731"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:54.728" endtime="20221117 03:51:54.731"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:54.724" endtime="20221117 03:51:54.731"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<assign>
<var>${ip_found}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:54.733" endtime="20221117 03:51:54.733"></status>
</kw>
<msg timestamp="20221117 03:51:54.734" level="INFO">${ip_found} = True</msg>
<status status="PASS" starttime="20221117 03:51:54.732" endtime="20221117 03:51:54.734"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>${ip_found} == ${False}</arg>
<arg>${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:51:54.734" endtime="20221117 03:51:54.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:51:54.736" level="INFO">${data} = {'IPv4StaticAddresses': [{'Address': '10.7.7.8', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}, {}]}</msg>
<status status="PASS" starttime="20221117 03:51:54.736" endtime="20221117 03:51:54.736"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:51:54.815" level="INFO">#(CST) 2022/11/17 03:51:54.815205 -    0.147521 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:51:54.832" level="INFO">#(CST) 2022/11/17 03:51:54.832065 -    0.016860 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:51:54.832" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:51:54.832" level="INFO">#(CST) 2022/11/17 03:51:54.832413 -    0.000349 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:51:54.833" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:51:54.833" level="INFO">#(CST) 2022/11/17 03:51:54.832891 -    0.000478 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:51:54.844" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:51:54.848" level="INFO">#(CST) 2022/11/17 03:51:54.847750 -    0.014859 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:51:54.848" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:51:54.882" level="INFO">children:
</msg>
<msg timestamp="20221117 03:51:54.882" level="INFO">#(CST) 2022/11/17 03:51:54.881855 -    0.034105 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:51:54.882" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:51:54.895" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:51:54.895" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:51:54.979" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:51:54.979" level="INFO">#(CST) 2022/11/17 03:51:54.978925 -    0.097070 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:51:54.984" level="INFO">#(CST) 2022/11/17 03:51:54.984274 -    0.005349 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:51:54.992" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:51:55.003" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:51:54.737" endtime="20221117 03:51:55.003"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:51:55.004" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:51:55.003" endtime="20221117 03:51:55.004"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=${valid_status_codes}</arg>
</arguments>
<msg timestamp="20221117 03:51:55.014" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:51:55.448" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.4337403909303248 seconds.</msg>
<status status="PASS" starttime="20221117 03:51:55.004" endtime="20221117 03:51:55.449"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:52:13.450" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:51:55.449" endtime="20221117 03:52:13.451"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:52:13.456" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:52:13.455" endtime="20221117 03:52:13.456"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:52:13.465" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:52:16.533" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:52:16.533" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.208 ms
64 bytes from rain40bmc.aus.stglabs....</msg>
<status status="PASS" starttime="20221117 03:52:13.457" endtime="20221117 03:52:16.533"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:52:16.536" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.208 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.234 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.211 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.251 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.208/0.226/0.251/0.017 ms</msg>
<status status="PASS" starttime="20221117 03:52:16.535" endtime="20221117 03:52:16.537"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:16.537" endtime="20221117 03:52:16.538"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:13.454" endtime="20221117 03:52:16.539"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:13.453" endtime="20221117 03:52:16.539"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:13.451" endtime="20221117 03:52:16.539"></status>
</kw>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${new_ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:52:16.631" level="INFO">#(CST) 2022/11/17 03:52:16.631313 -   21.647039 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:52:16.649" level="INFO">#(CST) 2022/11/17 03:52:16.648653 -    0.017340 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:52:16.649" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:52:16.649" level="INFO">#(CST) 2022/11/17 03:52:16.649058 -    0.000405 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:52:16.649" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:52:16.650" level="INFO">#(CST) 2022/11/17 03:52:16.649537 -    0.000479 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:52:16.660" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:52:16.665" level="INFO">#(CST) 2022/11/17 03:52:16.664549 -    0.015012 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:52:16.665" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:52:16.700" level="INFO">children:
</msg>
<msg timestamp="20221117 03:52:16.700" level="INFO">#(CST) 2022/11/17 03:52:16.699601 -    0.035053 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:52:16.700" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:52:16.713" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:52:16.713" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:52:16.797" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:52:16.797" level="INFO">#(CST) 2022/11/17 03:52:16.797270 -    0.097668 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:52:16.805" level="INFO">#(CST) 2022/11/17 03:52:16.805283 -    0.008013 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:52:16.816" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:52:16.831" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:52:16.542" endtime="20221117 03:52:16.831"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:52:16.832" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:52:16.831" endtime="20221117 03:52:16.832"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:52:16.905" level="INFO">#(CST) 2022/11/17 03:52:16.904425 -    0.099143 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:52:16.920" level="INFO">#(CST) 2022/11/17 03:52:16.919832 -    0.015407 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:52:16.920" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:52:16.920" level="INFO">#(CST) 2022/11/17 03:52:16.920140 -    0.000308 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:52:16.920" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:52:16.921" level="INFO">#(CST) 2022/11/17 03:52:16.920547 -    0.000407 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:52:16.930" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:52:16.934" level="INFO">#(CST) 2022/11/17 03:52:16.934362 -    0.013815 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:52:16.935" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:52:16.965" level="INFO">children:
</msg>
<msg timestamp="20221117 03:52:16.965" level="INFO">#(CST) 2022/11/17 03:52:16.964689 -    0.030327 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:52:16.965" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:52:16.977" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:52:16.977" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:52:17.061" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:52:17.061" level="INFO">#(CST) 2022/11/17 03:52:17.061175 -    0.096486 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:52:17.069" level="INFO">#(CST) 2022/11/17 03:52:17.069288 -    0.008112 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:52:17.080" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:52:17.093" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:52:17.093" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:52:17.093" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:52:16.833" endtime="20221117 03:52:17.093"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:52:17.094" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:52:17.095" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:52:17.094" endtime="20221117 03:52:17.095"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:52:17.096" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:52:17.096" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:17.095" endtime="20221117 03:52:17.096"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:52:17.097" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:52:17.096" endtime="20221117 03:52:17.097"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:52:17.099" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:17.098" endtime="20221117 03:52:17.099"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:52:17.100" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:52:17.099" endtime="20221117 03:52:17.100"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:17.100" endtime="20221117 03:52:17.101"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:17.097" endtime="20221117 03:52:17.101"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:52:17.103" level="INFO">@{if_info} = [ inet | 10.7.7.8/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:17.102" endtime="20221117 03:52:17.103"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:52:17.104" level="INFO">${ip_n_prefix} = 10.7.7.8/16</msg>
<status status="PASS" starttime="20221117 03:52:17.103" endtime="20221117 03:52:17.104"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:17.104" endtime="20221117 03:52:17.105"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:17.101" endtime="20221117 03:52:17.105"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:52:17.106" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:17.105" endtime="20221117 03:52:17.106"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:52:17.107" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:52:17.106" endtime="20221117 03:52:17.107"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:17.108" endtime="20221117 03:52:17.108"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:17.105" endtime="20221117 03:52:17.108"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:17.097" endtime="20221117 03:52:17.108"></status>
</kw>
<msg timestamp="20221117 03:52:17.108" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.8/16 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:52:16.541" endtime="20221117 03:52:17.109"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:17.109" endtime="20221117 03:52:17.110"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:16.539" endtime="20221117 03:52:17.111"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:52:17.183" level="INFO">#(CST) 2022/11/17 03:52:17.183244 -    0.113957 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:52:17.199" level="INFO">#(CST) 2022/11/17 03:52:17.198556 -    0.015311 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:52:17.199" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:52:17.199" level="INFO">#(CST) 2022/11/17 03:52:17.198864 -    0.000308 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:52:17.199" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:52:17.199" level="INFO">#(CST) 2022/11/17 03:52:17.199259 -    0.000396 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:52:17.209" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:52:17.213" level="INFO">#(CST) 2022/11/17 03:52:17.212925 -    0.013666 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:52:17.213" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:52:17.243" level="INFO">children:
</msg>
<msg timestamp="20221117 03:52:17.244" level="INFO">#(CST) 2022/11/17 03:52:17.243451 -    0.030526 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:52:17.244" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:52:17.256" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:52:17.256" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:52:17.350" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:52:17.350" level="INFO">#(CST) 2022/11/17 03:52:17.350139 -    0.106688 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:52:17.358" level="INFO">#(CST) 2022/11/17 03:52:17.358034 -    0.007895 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:52:17.368" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:52:17.384" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:52:17.113" endtime="20221117 03:52:17.384"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:52:17.397" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:52:17.411" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.013352647889405489 seconds.</msg>
<msg timestamp="20221117 03:52:17.412" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:52:17.384" endtime="20221117 03:52:17.412"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:52:17.413" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:52:17.412" endtime="20221117 03:52:17.413"></status>
</kw>
<msg timestamp="20221117 03:52:17.414" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:52:17.112" endtime="20221117 03:52:17.414"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:52:17.504" level="INFO">#(CST) 2022/11/17 03:52:17.503859 -    0.145825 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:52:17.522" level="INFO">#(CST) 2022/11/17 03:52:17.521774 -    0.017915 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:52:17.522" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:52:17.522" level="INFO">#(CST) 2022/11/17 03:52:17.522143 -    0.000369 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:52:17.523" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:52:17.523" level="INFO">#(CST) 2022/11/17 03:52:17.522613 -    0.000470 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:52:17.534" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:52:17.538" level="INFO">#(CST) 2022/11/17 03:52:17.538260 -    0.015646 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:52:17.538" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:52:17.573" level="INFO">children:
</msg>
<msg timestamp="20221117 03:52:17.573" level="INFO">#(CST) 2022/11/17 03:52:17.572963 -    0.034703 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:52:17.573" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:52:17.587" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:52:17.587" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:52:17.671" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:52:17.671" level="INFO">#(CST) 2022/11/17 03:52:17.670930 -    0.097967 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:52:17.675" level="INFO">#(CST) 2022/11/17 03:52:17.674999 -    0.004069 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:52:17.680" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:52:17.688" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:52:17.416" endtime="20221117 03:52:17.688"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:52:17.689" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:52:17.688" endtime="20221117 03:52:17.689"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:52:17.736" level="INFO">#(CST) 2022/11/17 03:52:17.736014 -    0.061016 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:52:17.748" level="INFO">#(CST) 2022/11/17 03:52:17.748040 -    0.012026 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:52:17.748" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:52:17.748" level="INFO">#(CST) 2022/11/17 03:52:17.748325 -    0.000285 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:52:17.749" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:52:17.749" level="INFO">#(CST) 2022/11/17 03:52:17.748661 -    0.000336 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:52:17.757" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:52:17.760" level="INFO">#(CST) 2022/11/17 03:52:17.759913 -    0.011252 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:52:17.760" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:52:17.788" level="INFO">children:
</msg>
<msg timestamp="20221117 03:52:17.788" level="INFO">#(CST) 2022/11/17 03:52:17.788164 -    0.028251 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:52:17.788" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:52:17.800" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:52:17.800" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:52:17.894" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:52:17.894" level="INFO">#(CST) 2022/11/17 03:52:17.893959 -    0.105795 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:52:17.902" level="INFO">#(CST) 2022/11/17 03:52:17.901833 -    0.007874 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:52:17.912" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:52:17.925" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:52:17.925" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:52:17.925" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:52:17.689" endtime="20221117 03:52:17.925"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:52:17.926" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:52:17.927" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:52:17.926" endtime="20221117 03:52:17.927"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:52:17.928" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:52:17.928" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:17.927" endtime="20221117 03:52:17.928"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:52:17.929" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:52:17.928" endtime="20221117 03:52:17.929"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:52:17.930" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:17.930" endtime="20221117 03:52:17.930"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:52:17.931" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:52:17.931" endtime="20221117 03:52:17.931"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:17.932" endtime="20221117 03:52:17.932"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:17.929" endtime="20221117 03:52:17.932"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:52:17.933" level="INFO">@{if_info} = [ inet | 10.7.7.8/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:17.933" endtime="20221117 03:52:17.933"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:52:17.935" level="INFO">${ip_n_prefix} = 10.7.7.8/16</msg>
<status status="PASS" starttime="20221117 03:52:17.934" endtime="20221117 03:52:17.935"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:17.935" endtime="20221117 03:52:17.936"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:17.932" endtime="20221117 03:52:17.936"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:52:17.937" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:17.937" endtime="20221117 03:52:17.937"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:52:17.938" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:52:17.938" endtime="20221117 03:52:17.938"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:17.939" endtime="20221117 03:52:17.939"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:17.936" endtime="20221117 03:52:17.939"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:17.929" endtime="20221117 03:52:17.939"></status>
</kw>
<msg timestamp="20221117 03:52:17.939" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.8/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:52:17.414" endtime="20221117 03:52:17.940"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:17.940" endtime="20221117 03:52:17.941"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:17.940" endtime="20221117 03:52:17.941"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:17.942" endtime="20221117 03:52:17.943"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:17.941" endtime="20221117 03:52:17.943"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:17.940" endtime="20221117 03:52:17.943"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:17.111" endtime="20221117 03:52:17.943"></status>
</kw>
<status status="PASS" starttime="20221117 03:51:54.429" endtime="20221117 03:52:17.943"></status>
</kw>
<kw name="Update IP Address" library="bmc_network_utils">
<doc>Update and verify IP address of BMC.</doc>
<arguments>
<arg>${test_ipv4_addr2}</arg>
<arg>${test_ipv4_addr}</arg>
<arg>${test_subnet_mask}</arg>
<arg>${test_gateway}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:52:17.945" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:52:17.945" endtime="20221117 03:52:17.945"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:52:17.946" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:52:17.946" endtime="20221117 03:52:17.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Address=${new_ip}</arg>
<arg>SubnetMask=${netmask}</arg>
<arg>Gateway=${gw_ip}</arg>
</arguments>
<assign>
<var>${ip_data}</var>
</assign>
<msg timestamp="20221117 03:52:17.947" level="INFO">${ip_data} = {'Address': '10.7.7.7', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}</msg>
<status status="PASS" starttime="20221117 03:52:17.947" endtime="20221117 03:52:17.947"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:52:18.014" level="INFO">#(CST) 2022/11/17 03:52:18.014214 -    0.112381 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:52:18.029" level="INFO">#(CST) 2022/11/17 03:52:18.029242 -    0.015028 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:52:18.029" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:52:18.030" level="INFO">#(CST) 2022/11/17 03:52:18.029539 -    0.000298 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:52:18.030" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:52:18.030" level="INFO">#(CST) 2022/11/17 03:52:18.029949 -    0.000410 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:52:18.039" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:52:18.043" level="INFO">#(CST) 2022/11/17 03:52:18.043273 -    0.013324 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:52:18.043" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:52:18.074" level="INFO">children:
</msg>
<msg timestamp="20221117 03:52:18.074" level="INFO">#(CST) 2022/11/17 03:52:18.074130 -    0.030857 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:52:18.074" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:52:18.086" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:52:18.086" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:52:18.180" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:52:18.181" level="INFO">#(CST) 2022/11/17 03:52:18.180453 -    0.106323 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:52:18.189" level="INFO">#(CST) 2022/11/17 03:52:18.188384 -    0.007931 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:52:18.199" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:52:18.214" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:52:17.949" endtime="20221117 03:52:18.214"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:52:18.228" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:52:18.247" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.01951958192512393 seconds.</msg>
<msg timestamp="20221117 03:52:18.248" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:52:18.215" endtime="20221117 03:52:18.248"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:52:18.249" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:52:18.248" endtime="20221117 03:52:18.249"></status>
</kw>
<msg timestamp="20221117 03:52:18.249" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:52:17.948" endtime="20221117 03:52:18.250"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:18.251" endtime="20221117 03:52:18.252"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:18.250" endtime="20221117 03:52:18.252"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:18.250" endtime="20221117 03:52:18.252"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:18.254" endtime="20221117 03:52:18.254"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:18.253" endtime="20221117 03:52:18.254"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:18.252" endtime="20221117 03:52:18.254"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:18.250" endtime="20221117 03:52:18.254"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<assign>
<var>${ip_found}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:18.255" endtime="20221117 03:52:18.256"></status>
</kw>
<msg timestamp="20221117 03:52:18.256" level="INFO">${ip_found} = True</msg>
<status status="PASS" starttime="20221117 03:52:18.255" endtime="20221117 03:52:18.256"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>${ip_found} == ${False}</arg>
<arg>${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:18.257" endtime="20221117 03:52:18.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:52:18.258" level="INFO">${data} = {'IPv4StaticAddresses': [{'Address': '10.7.7.7', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}, {}]}</msg>
<status status="PASS" starttime="20221117 03:52:18.258" endtime="20221117 03:52:18.258"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:52:18.320" level="INFO">#(CST) 2022/11/17 03:52:18.319558 -    0.131174 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:52:18.334" level="INFO">#(CST) 2022/11/17 03:52:18.333668 -    0.014110 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:52:18.334" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:52:18.334" level="INFO">#(CST) 2022/11/17 03:52:18.333959 -    0.000291 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:52:18.334" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:52:18.334" level="INFO">#(CST) 2022/11/17 03:52:18.334339 -    0.000380 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:52:18.343" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:52:18.347" level="INFO">#(CST) 2022/11/17 03:52:18.346956 -    0.012618 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:52:18.347" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:52:18.377" level="INFO">children:
</msg>
<msg timestamp="20221117 03:52:18.377" level="INFO">#(CST) 2022/11/17 03:52:18.376780 -    0.029824 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:52:18.377" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:52:18.388" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:52:18.388" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:52:18.472" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:52:18.473" level="INFO">#(CST) 2022/11/17 03:52:18.472516 -    0.095736 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:52:18.480" level="INFO">#(CST) 2022/11/17 03:52:18.479963 -    0.007447 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:52:18.490" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:52:18.505" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:52:18.259" endtime="20221117 03:52:18.505"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:52:18.506" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:52:18.506" endtime="20221117 03:52:18.506"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=${valid_status_codes}</arg>
</arguments>
<msg timestamp="20221117 03:52:18.519" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:52:18.918" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.39874017983675003 seconds.</msg>
<status status="PASS" starttime="20221117 03:52:18.507" endtime="20221117 03:52:18.919"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:52:36.920" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:52:18.919" endtime="20221117 03:52:36.921"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:52:36.926" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:52:36.925" endtime="20221117 03:52:36.926"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:52:36.934" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:52:39.948" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:52:39.948" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.246 ms
64 bytes from rain40bmc.aus.stglabs....</msg>
<status status="PASS" starttime="20221117 03:52:36.927" endtime="20221117 03:52:39.948"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:52:39.951" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.246 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.240 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.245 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.219 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.219/0.237/0.246/0.018 ms</msg>
<status status="PASS" starttime="20221117 03:52:39.950" endtime="20221117 03:52:39.951"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:39.952" endtime="20221117 03:52:39.953"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:36.924" endtime="20221117 03:52:39.953"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:36.923" endtime="20221117 03:52:39.953"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:36.921" endtime="20221117 03:52:39.954"></status>
</kw>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${new_ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:52:40.054" level="INFO">#(CST) 2022/11/17 03:52:40.053850 -   21.573887 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:52:40.072" level="INFO">#(CST) 2022/11/17 03:52:40.072312 -    0.018462 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:52:40.073" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:52:40.073" level="INFO">#(CST) 2022/11/17 03:52:40.072737 -    0.000425 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:52:40.073" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:52:40.074" level="INFO">#(CST) 2022/11/17 03:52:40.073419 -    0.000682 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:52:40.085" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:52:40.090" level="INFO">#(CST) 2022/11/17 03:52:40.090344 -    0.016925 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:52:40.091" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:52:40.127" level="INFO">children:
</msg>
<msg timestamp="20221117 03:52:40.127" level="INFO">#(CST) 2022/11/17 03:52:40.126895 -    0.036551 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:52:40.127" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:52:40.141" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:52:40.141" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:52:40.347" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:52:40.347" level="INFO">#(CST) 2022/11/17 03:52:40.346793 -    0.219897 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:52:40.355" level="INFO">#(CST) 2022/11/17 03:52:40.354756 -    0.007963 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:52:40.365" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:52:40.381" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:52:39.957" endtime="20221117 03:52:40.381"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:52:40.382" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:52:40.381" endtime="20221117 03:52:40.382"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:52:40.455" level="INFO">#(CST) 2022/11/17 03:52:40.454921 -    0.100165 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:52:40.471" level="INFO">#(CST) 2022/11/17 03:52:40.470875 -    0.015954 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:52:40.471" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:52:40.471" level="INFO">#(CST) 2022/11/17 03:52:40.471191 -    0.000316 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:52:40.472" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:52:40.472" level="INFO">#(CST) 2022/11/17 03:52:40.471606 -    0.000415 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:52:40.482" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:52:40.486" level="INFO">#(CST) 2022/11/17 03:52:40.485844 -    0.014239 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:52:40.486" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:52:40.518" level="INFO">children:
</msg>
<msg timestamp="20221117 03:52:40.518" level="INFO">#(CST) 2022/11/17 03:52:40.518204 -    0.032360 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:52:40.518" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:52:40.531" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:52:40.531" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:52:40.645" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:52:40.646" level="INFO">#(CST) 2022/11/17 03:52:40.645463 -    0.127259 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:52:40.653" level="INFO">#(CST) 2022/11/17 03:52:40.653222 -    0.007759 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:52:40.663" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:52:40.677" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:52:40.677" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:52:40.677" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:52:40.383" endtime="20221117 03:52:40.677"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:52:40.678" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:52:40.678" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:52:40.677" endtime="20221117 03:52:40.678"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:52:40.679" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:52:40.679" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:40.679" endtime="20221117 03:52:40.680"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:52:40.680" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:52:40.680" endtime="20221117 03:52:40.680"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:52:40.682" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:40.681" endtime="20221117 03:52:40.682"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:52:40.683" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:52:40.682" endtime="20221117 03:52:40.683"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:40.684" endtime="20221117 03:52:40.684"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:40.681" endtime="20221117 03:52:40.684"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:52:40.685" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:40.685" endtime="20221117 03:52:40.685"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:52:40.686" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:52:40.686" endtime="20221117 03:52:40.686"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:40.687" endtime="20221117 03:52:40.687"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:40.684" endtime="20221117 03:52:40.687"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:52:40.689" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:40.688" endtime="20221117 03:52:40.689"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:52:40.690" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:52:40.689" endtime="20221117 03:52:40.690"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:40.690" endtime="20221117 03:52:40.691"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:40.687" endtime="20221117 03:52:40.691"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:40.681" endtime="20221117 03:52:40.691"></status>
</kw>
<msg timestamp="20221117 03:52:40.691" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.7/16 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:52:39.956" endtime="20221117 03:52:40.691"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:40.692" endtime="20221117 03:52:40.693"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:39.954" endtime="20221117 03:52:40.693"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:52:40.767" level="INFO">#(CST) 2022/11/17 03:52:40.766634 -    0.113412 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:52:40.782" level="INFO">#(CST) 2022/11/17 03:52:40.782249 -    0.015615 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:52:40.782" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:52:40.783" level="INFO">#(CST) 2022/11/17 03:52:40.782545 -    0.000296 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:52:40.783" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:52:40.783" level="INFO">#(CST) 2022/11/17 03:52:40.782958 -    0.000413 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:52:40.793" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:52:40.797" level="INFO">#(CST) 2022/11/17 03:52:40.796763 -    0.013805 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:52:40.797" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:52:40.827" level="INFO">children:
</msg>
<msg timestamp="20221117 03:52:40.827" level="INFO">#(CST) 2022/11/17 03:52:40.827363 -    0.030601 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:52:40.828" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:52:40.840" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:52:40.840" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:52:40.944" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:52:40.944" level="INFO">#(CST) 2022/11/17 03:52:40.944198 -    0.116835 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:52:40.953" level="INFO">#(CST) 2022/11/17 03:52:40.952497 -    0.008299 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:52:40.963" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:52:40.979" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:52:40.695" endtime="20221117 03:52:40.979"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:52:40.994" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:52:41.008" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.013768421020358801 seconds.</msg>
<msg timestamp="20221117 03:52:41.009" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:52:40.980" endtime="20221117 03:52:41.009"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:52:41.011" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:52:41.010" endtime="20221117 03:52:41.011"></status>
</kw>
<msg timestamp="20221117 03:52:41.011" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:52:40.694" endtime="20221117 03:52:41.011"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:52:41.104" level="INFO">#(CST) 2022/11/17 03:52:41.104062 -    0.151564 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:52:41.122" level="INFO">#(CST) 2022/11/17 03:52:41.122124 -    0.018063 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:52:41.122" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:52:41.123" level="INFO">#(CST) 2022/11/17 03:52:41.122474 -    0.000350 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:52:41.123" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:52:41.123" level="INFO">#(CST) 2022/11/17 03:52:41.122952 -    0.000479 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:52:41.134" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:52:41.139" level="INFO">#(CST) 2022/11/17 03:52:41.138807 -    0.015855 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:52:41.139" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:52:41.173" level="INFO">children:
</msg>
<msg timestamp="20221117 03:52:41.173" level="INFO">#(CST) 2022/11/17 03:52:41.173424 -    0.034617 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:52:41.174" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:52:41.187" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:52:41.187" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:52:41.271" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:52:41.271" level="INFO">#(CST) 2022/11/17 03:52:41.271328 -    0.097904 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:52:41.279" level="INFO">#(CST) 2022/11/17 03:52:41.278913 -    0.007585 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:52:41.289" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:52:41.304" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:52:41.013" endtime="20221117 03:52:41.304"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:52:41.305" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:52:41.305" endtime="20221117 03:52:41.305"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:52:41.378" level="INFO">#(CST) 2022/11/17 03:52:41.377949 -    0.099036 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:52:41.394" level="INFO">#(CST) 2022/11/17 03:52:41.393505 -    0.015556 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:52:41.394" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:52:41.394" level="INFO">#(CST) 2022/11/17 03:52:41.393820 -    0.000315 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:52:41.394" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:52:41.394" level="INFO">#(CST) 2022/11/17 03:52:41.394232 -    0.000412 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:52:41.404" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:52:41.408" level="INFO">#(CST) 2022/11/17 03:52:41.408064 -    0.013833 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:52:41.408" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:52:41.439" level="INFO">children:
</msg>
<msg timestamp="20221117 03:52:41.439" level="INFO">#(CST) 2022/11/17 03:52:41.439161 -    0.031096 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:52:41.439" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:52:41.451" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:52:41.451" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:52:41.535" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:52:41.536" level="INFO">#(CST) 2022/11/17 03:52:41.535423 -    0.096262 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:52:41.544" level="INFO">#(CST) 2022/11/17 03:52:41.543400 -    0.007977 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:52:41.554" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:52:41.567" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:52:41.567" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:52:41.567" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:52:41.306" endtime="20221117 03:52:41.567"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:52:41.568" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:52:41.568" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:52:41.568" endtime="20221117 03:52:41.568"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:52:41.569" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:52:41.570" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:41.569" endtime="20221117 03:52:41.570"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:52:41.571" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:52:41.570" endtime="20221117 03:52:41.571"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:52:41.572" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:41.571" endtime="20221117 03:52:41.572"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:52:41.573" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:52:41.573" endtime="20221117 03:52:41.573"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:41.574" endtime="20221117 03:52:41.574"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:41.571" endtime="20221117 03:52:41.574"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:52:41.575" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:41.575" endtime="20221117 03:52:41.576"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:52:41.577" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:52:41.576" endtime="20221117 03:52:41.577"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:41.577" endtime="20221117 03:52:41.578"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:41.574" endtime="20221117 03:52:41.578"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:52:41.579" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:52:41.578" endtime="20221117 03:52:41.579"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:52:41.580" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:52:41.579" endtime="20221117 03:52:41.580"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:41.581" endtime="20221117 03:52:41.581"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:41.578" endtime="20221117 03:52:41.581"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:41.571" endtime="20221117 03:52:41.581"></status>
</kw>
<msg timestamp="20221117 03:52:41.582" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.7/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:52:41.012" endtime="20221117 03:52:41.582"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:41.583" endtime="20221117 03:52:41.584"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:41.582" endtime="20221117 03:52:41.584"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:41.584" endtime="20221117 03:52:41.585"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:41.584" endtime="20221117 03:52:41.585"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:41.582" endtime="20221117 03:52:41.585"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:40.693" endtime="20221117 03:52:41.585"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:17.943" endtime="20221117 03:52:41.586"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete IP Address</arg>
<arg>${test_ipv4_addr}</arg>
<arg>AND</arg>
<arg>Test Teardown Execution</arg>
</arguments>
<kw name="Delete IP Address" library="bmc_network_utils">
<doc>Delete IP Address Of BMC.</doc>
<arguments>
<arg>${test_ipv4_addr}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:52:41.589" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:52:41.588" endtime="20221117 03:52:41.589"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:52:41.590" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:52:41.589" endtime="20221117 03:52:41.590"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:52:41.666" level="INFO">#(CST) 2022/11/17 03:52:41.665707 -    0.122308 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:52:41.682" level="INFO">#(CST) 2022/11/17 03:52:41.681574 -    0.015867 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:52:41.682" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:52:41.682" level="INFO">#(CST) 2022/11/17 03:52:41.681888 -    0.000314 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:52:41.682" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:52:41.682" level="INFO">#(CST) 2022/11/17 03:52:41.682267 -    0.000380 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:52:41.692" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:52:41.696" level="INFO">#(CST) 2022/11/17 03:52:41.696148 -    0.013880 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:52:41.696" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:52:41.727" level="INFO">children:
</msg>
<msg timestamp="20221117 03:52:41.727" level="INFO">#(CST) 2022/11/17 03:52:41.726700 -    0.030552 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:52:41.727" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:52:41.739" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:52:41.740" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:52:41.823" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:52:41.824" level="INFO">#(CST) 2022/11/17 03:52:41.823502 -    0.096802 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:52:41.832" level="INFO">#(CST) 2022/11/17 03:52:41.832261 -    0.008759 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:52:41.844" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:52:41.860" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:52:41.591" endtime="20221117 03:52:41.860"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:52:41.875" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:52:41.890" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014028077945113182 seconds.</msg>
<msg timestamp="20221117 03:52:41.890" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:52:41.860" endtime="20221117 03:52:41.890"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:52:41.891" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:52:41.891" endtime="20221117 03:52:41.891"></status>
</kw>
<msg timestamp="20221117 03:52:41.892" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:52:41.590" endtime="20221117 03:52:41.892"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:41.894" endtime="20221117 03:52:41.895"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:41.893" endtime="20221117 03:52:41.895"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:41.892" endtime="20221117 03:52:41.895"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:41.897" endtime="20221117 03:52:41.897"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:41.895" endtime="20221117 03:52:41.897"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:41.895" endtime="20221117 03:52:41.897"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:41.892" endtime="20221117 03:52:41.897"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<assign>
<var>${ip_found}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:41.899" endtime="20221117 03:52:41.899"></status>
</kw>
<msg timestamp="20221117 03:52:41.899" level="INFO">${ip_found} = True</msg>
<status status="PASS" starttime="20221117 03:52:41.898" endtime="20221117 03:52:41.899"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>${ip_found} == ${False}</arg>
<arg>${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:52:41.900" endtime="20221117 03:52:41.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:52:41.902" level="INFO">${data} = {'IPv4StaticAddresses': [None, {}]}</msg>
<status status="PASS" starttime="20221117 03:52:41.901" endtime="20221117 03:52:41.902"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:52:41.970" level="INFO">#(CST) 2022/11/17 03:52:41.970159 -    0.137898 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:52:41.984" level="INFO">#(CST) 2022/11/17 03:52:41.984149 -    0.013991 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:52:41.984" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:52:41.985" level="INFO">#(CST) 2022/11/17 03:52:41.984495 -    0.000346 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:52:41.985" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:52:41.985" level="INFO">#(CST) 2022/11/17 03:52:41.984998 -    0.000503 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:52:41.994" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:52:41.997" level="INFO">#(CST) 2022/11/17 03:52:41.997356 -    0.012358 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:52:41.998" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:52:42.027" level="INFO">children:
</msg>
<msg timestamp="20221117 03:52:42.027" level="INFO">#(CST) 2022/11/17 03:52:42.027030 -    0.029674 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:52:42.027" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:52:42.039" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:52:42.039" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:52:42.123" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:52:42.124" level="INFO">#(CST) 2022/11/17 03:52:42.123446 -    0.096416 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:52:42.132" level="INFO">#(CST) 2022/11/17 03:52:42.131661 -    0.008215 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:52:42.142" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:52:42.158" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:52:41.902" endtime="20221117 03:52:42.158"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:52:42.160" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:52:42.159" endtime="20221117 03:52:42.160"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:52:42.174" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:52:42.210" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.03560918429866433 seconds.</msg>
<status status="PASS" starttime="20221117 03:52:42.161" endtime="20221117 03:52:42.211"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:53:00.212" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:52:42.211" endtime="20221117 03:53:00.213"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:53:00.219" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:53:00.219" endtime="20221117 03:53:00.219"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:53:00.228" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:53:03.244" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:53:03.244" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.268 ms
64 bytes from rain40bmc.aus.stglabs....</msg>
<status status="PASS" starttime="20221117 03:53:00.220" endtime="20221117 03:53:03.244"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:53:03.247" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.268 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.249 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.247 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.248 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.247/0.253/0.268/0.008 ms</msg>
<status status="PASS" starttime="20221117 03:53:03.246" endtime="20221117 03:53:03.248"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:03.248" endtime="20221117 03:53:03.249"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:00.217" endtime="20221117 03:53:03.250"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:00.216" endtime="20221117 03:53:03.250"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:00.213" endtime="20221117 03:53:03.250"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify IP On BMC</arg>
<arg>${ip}</arg>
</arguments>
<assign>
<var>${delete_status}</var>
</assign>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:03.354" level="INFO">#(CST) 2022/11/17 03:53:03.354230 -   21.222569 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:03.373" level="INFO">#(CST) 2022/11/17 03:53:03.372643 -    0.018413 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:03.373" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:03.373" level="INFO">#(CST) 2022/11/17 03:53:03.373042 -    0.000399 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:03.373" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:03.374" level="INFO">#(CST) 2022/11/17 03:53:03.373510 -    0.000468 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:03.385" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:03.390" level="INFO">#(CST) 2022/11/17 03:53:03.389584 -    0.016073 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:03.390" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:03.424" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:03.424" level="INFO">#(CST) 2022/11/17 03:53:03.423575 -    0.033991 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:03.424" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:03.437" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:03.437" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:03.522" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:03.522" level="INFO">#(CST) 2022/11/17 03:53:03.521983 -    0.098409 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:03.532" level="INFO">#(CST) 2022/11/17 03:53:03.531789 -    0.009805 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:03.544" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:03.561" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:03.254" endtime="20221117 03:53:03.561"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:53:03.563" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:53:03.562" endtime="20221117 03:53:03.563"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:53:03.648" level="INFO">#(CST) 2022/11/17 03:53:03.647895 -    0.116107 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:53:03.665" level="INFO">#(CST) 2022/11/17 03:53:03.664616 -    0.016721 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:53:03.665" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:03.665" level="INFO">#(CST) 2022/11/17 03:53:03.664925 -    0.000309 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:03.665" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:03.665" level="INFO">#(CST) 2022/11/17 03:53:03.665321 -    0.000396 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:03.676" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:03.680" level="INFO">#(CST) 2022/11/17 03:53:03.680336 -    0.015015 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:03.681" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:03.711" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:03.711" level="INFO">#(CST) 2022/11/17 03:53:03.711083 -    0.030746 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:03.711" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:03.724" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:03.724" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:53:03.808" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:03.809" level="INFO">#(CST) 2022/11/17 03:53:03.808336 -    0.097254 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:03.818" level="INFO">#(CST) 2022/11/17 03:53:03.818065 -    0.009728 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:03.830" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:03.845" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:53:03.845" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:53:03.845" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:53:03.563" endtime="20221117 03:53:03.845"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:53:03.846" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:53:03.846" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:53:03.845" endtime="20221117 03:53:03.846"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:53:03.847" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:53:03.847" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:03.847" endtime="20221117 03:53:03.848"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:53:03.848" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:53:03.848" endtime="20221117 03:53:03.849"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:03.850" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:03.849" endtime="20221117 03:53:03.850"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:03.851" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:53:03.851" endtime="20221117 03:53:03.851"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:03.852" endtime="20221117 03:53:03.852"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:03.849" endtime="20221117 03:53:03.852"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:03.853" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:03.853" endtime="20221117 03:53:03.853"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:03.854" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:53:03.854" endtime="20221117 03:53:03.854"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:03.855" endtime="20221117 03:53:03.855"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:03.852" endtime="20221117 03:53:03.855"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:03.849" endtime="20221117 03:53:03.855"></status>
</kw>
<msg timestamp="20221117 03:53:03.856" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:53:03.253" endtime="20221117 03:53:03.856"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<msg timestamp="20221117 03:53:03.857" level="FAIL">IP address does not exist.</msg>
<status status="FAIL" starttime="20221117 03:53:03.856" endtime="20221117 03:53:03.858"></status>
</kw>
<status status="FAIL" starttime="20221117 03:53:03.252" endtime="20221117 03:53:03.858"></status>
</kw>
<msg timestamp="20221117 03:53:03.858" level="INFO">${delete_status} = False</msg>
<status status="PASS" starttime="20221117 03:53:03.251" endtime="20221117 03:53:03.859"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${False}'</arg>
<arg>ELSE</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${True}'</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>'${delete_status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:03.860" endtime="20221117 03:53:03.861"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:03.859" endtime="20221117 03:53:03.861"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:03.939" level="INFO">#(CST) 2022/11/17 03:53:03.938533 -    0.120469 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:03.954" level="INFO">#(CST) 2022/11/17 03:53:03.954427 -    0.015894 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:03.955" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:03.955" level="INFO">#(CST) 2022/11/17 03:53:03.954708 -    0.000280 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:03.955" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:03.955" level="INFO">#(CST) 2022/11/17 03:53:03.955122 -    0.000415 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:03.965" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:03.969" level="INFO">#(CST) 2022/11/17 03:53:03.969097 -    0.013975 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:03.969" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:04.000" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:04.000" level="INFO">#(CST) 2022/11/17 03:53:03.999951 -    0.030854 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:04.000" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:04.013" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:04.013" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:04.097" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:04.097" level="INFO">#(CST) 2022/11/17 03:53:04.097054 -    0.097103 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:04.106" level="INFO">#(CST) 2022/11/17 03:53:04.106075 -    0.009021 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:04.118" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:04.134" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:03.863" endtime="20221117 03:53:04.134"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:53:04.149" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:53:04.164" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.015007863752543926 seconds.</msg>
<msg timestamp="20221117 03:53:04.165" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:53:04.135" endtime="20221117 03:53:04.165"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:53:04.167" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:53:04.166" endtime="20221117 03:53:04.167"></status>
</kw>
<msg timestamp="20221117 03:53:04.167" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:53:03.862" endtime="20221117 03:53:04.168"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:04.266" level="INFO">#(CST) 2022/11/17 03:53:04.265727 -    0.159651 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:04.284" level="INFO">#(CST) 2022/11/17 03:53:04.284007 -    0.018280 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:04.284" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:04.284" level="INFO">#(CST) 2022/11/17 03:53:04.284332 -    0.000325 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:04.285" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:04.285" level="INFO">#(CST) 2022/11/17 03:53:04.284766 -    0.000434 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:04.296" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:04.301" level="INFO">#(CST) 2022/11/17 03:53:04.300617 -    0.015851 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:04.301" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:04.334" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:04.334" level="INFO">#(CST) 2022/11/17 03:53:04.334401 -    0.033784 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:04.335" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:04.347" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:04.347" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:04.431" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:04.431" level="INFO">#(CST) 2022/11/17 03:53:04.431250 -    0.096849 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:04.440" level="INFO">#(CST) 2022/11/17 03:53:04.440102 -    0.008852 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:04.451" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:04.468" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:04.169" endtime="20221117 03:53:04.468"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:53:04.469" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:53:04.468" endtime="20221117 03:53:04.469"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:53:04.552" level="INFO">#(CST) 2022/11/17 03:53:04.551574 -    0.111472 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:53:04.581" level="INFO">#(CST) 2022/11/17 03:53:04.581158 -    0.029585 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:53:04.582" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:04.582" level="INFO">#(CST) 2022/11/17 03:53:04.581810 -    0.000652 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:04.582" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:04.583" level="INFO">#(CST) 2022/11/17 03:53:04.582596 -    0.000786 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:04.603" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:04.611" level="INFO">#(CST) 2022/11/17 03:53:04.610367 -    0.027771 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:04.611" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:04.658" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:04.658" level="INFO">#(CST) 2022/11/17 03:53:04.658391 -    0.048024 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:04.659" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:04.678" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:04.678" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:53:04.762" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:04.762" level="INFO">#(CST) 2022/11/17 03:53:04.762058 -    0.103667 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:04.771" level="INFO">#(CST) 2022/11/17 03:53:04.770962 -    0.008904 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:04.782" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:04.796" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:53:04.796" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:53:04.796" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:53:04.470" endtime="20221117 03:53:04.796"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:53:04.797" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:53:04.798" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:53:04.797" endtime="20221117 03:53:04.798"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:53:04.799" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:53:04.799" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:04.798" endtime="20221117 03:53:04.799"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:53:04.800" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:53:04.799" endtime="20221117 03:53:04.800"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:04.801" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:04.801" endtime="20221117 03:53:04.802"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:04.803" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:53:04.802" endtime="20221117 03:53:04.803"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:04.803" endtime="20221117 03:53:04.804"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:04.800" endtime="20221117 03:53:04.804"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:04.805" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:04.804" endtime="20221117 03:53:04.805"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:04.806" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:53:04.806" endtime="20221117 03:53:04.806"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:04.807" endtime="20221117 03:53:04.807"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:04.804" endtime="20221117 03:53:04.808"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:04.800" endtime="20221117 03:53:04.808"></status>
</kw>
<msg timestamp="20221117 03:53:04.808" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:53:04.168" endtime="20221117 03:53:04.808"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:04.809" endtime="20221117 03:53:04.810"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:04.808" endtime="20221117 03:53:04.810"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:04.808" endtime="20221117 03:53:04.810"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:03.861" endtime="20221117 03:53:04.810"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:41.587" endtime="20221117 03:53:04.810"></status>
</kw>
<kw name="Test Teardown Execution">
<doc>Test teardown execution.</doc>
<kw name="Logout" library="Redfish">
<doc>Logout of session. YOU MUST CALL THIS WHEN YOU ARE DONE TO FREE</doc>
<msg timestamp="20221117 03:53:04.824" level="INFO">Attempt 1 of /redfish/v1/SessionService/Sessions/NiFIxy45gf</msg>
<msg timestamp="20221117 03:53:04.833" level="INFO">Response Time to /redfish/v1/SessionService/Sessions/NiFIxy45gf: 0.0084880948998034 seconds.</msg>
<msg timestamp="20221117 03:53:04.834" level="INFO">User logged out: {
  "@Message.ExtendedInfo": [
    {
      "@odata.type": "#Message.v1_1_1.Message",
      "Message": "Successfully Completed Request",
      "MessageArgs": [],
      "MessageId": "Base.1.8.1.Success",
      "MessageSeverity": "OK",
      "Resolution": "None"
    }
  ]
}</msg>
<status status="PASS" starttime="20221117 03:53:04.811" endtime="20221117 03:53:04.834"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:04.811" endtime="20221117 03:53:04.834"></status>
</kw>
<status status="PASS" starttime="20221117 03:52:41.586" endtime="20221117 03:53:04.834"></status>
</kw>
<doc>Verify modifying IP address multiple times.</doc>
<tags>
<tag>Network_Conf_Test</tag>
<tag>Verify_Modifying_IP_Address_Multiple_Times</tag>
</tags>
<status status="PASS" starttime="20221117 03:51:30.236" endtime="20221117 03:53:04.835" critical="yes"></status>
</test>
<test id="s1-t2" name="Configure And Verify Multiple Static IPv4 Addresses">
<kw name="Test Setup Execution" type="setup">
<doc>Test setup execution.</doc>
<kw name="Login" library="Redfish">
<doc>Assign BMC default values for username, password and auth arguments
and call parent class login method.</doc>
<msg timestamp="20221117 03:53:04.862" level="INFO">Attempt 1 of /redfish/v1/SessionService/Sessions</msg>
<msg timestamp="20221117 03:53:04.909" level="INFO">Response Time to /redfish/v1/SessionService/Sessions: 0.046437015756964684 seconds.</msg>
<msg timestamp="20221117 03:53:04.909" level="INFO">{'@odata.id': '/redfish/v1/SessionService/Sessions/hGcTZK5qFR', '@odata.type': '#Session.v1_5_0.Session', 'ClientOriginIPAddress': '::ffff:9.3.84.152', 'Description': 'Manager User Session', 'Id': 'hGcTZK5qFR', 'Name': 'User Session', 'Oem': {'OpenBMC': {'@odata.type': '#OemSession.v1_0_0.Session', 'ClientID': ''}}, 'UserName': 'service'}</msg>
<msg timestamp="20221117 03:53:04.909" level="INFO">Login returned code 201: {
  "@odata.id": "/redfish/v1/SessionService/Sessions/hGcTZK5qFR",
  "@odata.type": "#Session.v1_5_0.Session",
  "ClientOriginIPAddress": "::ffff:9.3.84.152",
  "Description": "Manager User Session",
  "Id": "hGcTZK5qFR",
  "Name": "User Session",
  "Oem": {
    "OpenBMC": {
      "@odata.type": "#OemSession.v1_0_0.Session",
      "ClientID": ""
    }
  },
  "UserName": "service"
}</msg>
<status status="PASS" starttime="20221117 03:53:04.838" endtime="20221117 03:53:04.910"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:04.997" level="INFO">#(CST) 2022/11/17 03:53:04.996976 -    0.226014 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:05.013" level="INFO">#(CST) 2022/11/17 03:53:05.012490 -    0.015514 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:05.013" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:05.013" level="INFO">#(CST) 2022/11/17 03:53:05.012850 -    0.000360 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:05.013" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:05.013" level="INFO">#(CST) 2022/11/17 03:53:05.013277 -    0.000427 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:05.023" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:05.027" level="INFO">#(CST) 2022/11/17 03:53:05.027125 -    0.013848 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:05.027" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:05.059" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:05.059" level="INFO">#(CST) 2022/11/17 03:53:05.058614 -    0.031490 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:05.059" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:05.071" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:05.071" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:05.156" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:05.156" level="INFO">#(CST) 2022/11/17 03:53:05.155935 -    0.097320 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:05.165" level="INFO">#(CST) 2022/11/17 03:53:05.164415 -    0.008480 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:05.175" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:05.192" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:04.911" endtime="20221117 03:53:05.192"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:53:05.206" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:53:05.222" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.015632163733243942 seconds.</msg>
<msg timestamp="20221117 03:53:05.222" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:53:05.192" endtime="20221117 03:53:05.222"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:53:05.224" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:53:05.223" endtime="20221117 03:53:05.224"></status>
</kw>
<msg timestamp="20221117 03:53:05.224" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:53:04.910" endtime="20221117 03:53:05.224"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{network_configurations}</arg>
</arguments>
<msg timestamp="20221117 03:53:05.225" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:53:05.225" endtime="20221117 03:53:05.225"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:05.297" level="INFO">#(CST) 2022/11/17 03:53:05.296974 -    0.132560 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:05.313" level="INFO">#(CST) 2022/11/17 03:53:05.312668 -    0.015693 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:05.313" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:05.313" level="INFO">#(CST) 2022/11/17 03:53:05.312988 -    0.000320 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:05.313" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:05.313" level="INFO">#(CST) 2022/11/17 03:53:05.313397 -    0.000409 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:05.323" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:05.327" level="INFO">#(CST) 2022/11/17 03:53:05.327214 -    0.013818 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:05.327" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:05.359" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:05.359" level="INFO">#(CST) 2022/11/17 03:53:05.358698 -    0.031483 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:05.359" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:05.371" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:05.371" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:05.455" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:05.455" level="INFO">#(CST) 2022/11/17 03:53:05.455023 -    0.096326 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:05.463" level="INFO">#(CST) 2022/11/17 03:53:05.462983 -    0.007960 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:05.473" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:05.489" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:05.227" endtime="20221117 03:53:05.489"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:53:05.490" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:53:05.489" endtime="20221117 03:53:05.490"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:53:05.564" level="INFO">#(CST) 2022/11/17 03:53:05.563953 -    0.100970 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:53:05.580" level="INFO">#(CST) 2022/11/17 03:53:05.579987 -    0.016034 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:53:05.580" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:05.580" level="INFO">#(CST) 2022/11/17 03:53:05.580297 -    0.000310 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:05.581" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:05.581" level="INFO">#(CST) 2022/11/17 03:53:05.580711 -    0.000414 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:05.591" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:05.595" level="INFO">#(CST) 2022/11/17 03:53:05.594712 -    0.014000 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:05.595" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:05.626" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:05.626" level="INFO">#(CST) 2022/11/17 03:53:05.626144 -    0.031432 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:05.626" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:05.638" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:05.639" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:53:05.722" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:05.723" level="INFO">#(CST) 2022/11/17 03:53:05.722443 -    0.096299 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:05.730" level="INFO">#(CST) 2022/11/17 03:53:05.730255 -    0.007812 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:05.741" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:05.754" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:53:05.754" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:53:05.754" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:53:05.491" endtime="20221117 03:53:05.754"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:53:05.755" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:53:05.756" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:53:05.755" endtime="20221117 03:53:05.756"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:53:05.757" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:53:05.757" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:05.756" endtime="20221117 03:53:05.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:53:05.758" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:53:05.758" endtime="20221117 03:53:05.758"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:05.759" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:05.759" endtime="20221117 03:53:05.760"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:05.761" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:53:05.760" endtime="20221117 03:53:05.761"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:05.761" endtime="20221117 03:53:05.762"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:05.758" endtime="20221117 03:53:05.762"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:05.765" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:05.762" endtime="20221117 03:53:05.765"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:05.766" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:53:05.765" endtime="20221117 03:53:05.766"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:05.766" endtime="20221117 03:53:05.767"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:05.762" endtime="20221117 03:53:05.767"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:05.758" endtime="20221117 03:53:05.767"></status>
</kw>
<msg timestamp="20221117 03:53:05.768" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:53:05.226" endtime="20221117 03:53:05.768"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${ip_data}</arg>
</arguments>
<msg timestamp="20221117 03:53:05.769" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:53:05.768" endtime="20221117 03:53:05.769"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:04.837" endtime="20221117 03:53:05.769"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${test_ipv4_addr}</arg>
<arg>${test_ipv4_addr2}</arg>
</arguments>
<assign>
<var>${test_ipv4_addresses}</var>
</assign>
<msg timestamp="20221117 03:53:05.770" level="INFO">${test_ipv4_addresses} = ['10.7.7.7', '10.7.7.8']</msg>
<status status="PASS" starttime="20221117 03:53:05.770" endtime="20221117 03:53:05.770"></status>
</kw>
<kw name="Configure Multiple Static IPv4 Addresses">
<doc>Configure multiple static ipv4 address via Redfish and verify.</doc>
<arguments>
<arg>${test_ipv4_addresses}</arg>
<arg>${test_subnet_mask}</arg>
<arg>${test_gateway}</arg>
</arguments>
<kw name="${ip} IN [ @{ip_addreses} ]" type="for">
<kw name="${ip} = 10.7.7.7" type="foritem">
<kw name="Add IP Address" library="bmc_network_utils">
<doc>Add IP Address To BMC.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${subnet_mask}</arg>
<arg>${gateway}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:53:05.774" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:53:05.773" endtime="20221117 03:53:05.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Address=${ip}</arg>
<arg>SubnetMask=${subnet_mask}</arg>
<arg>Gateway=${gateway}</arg>
</arguments>
<assign>
<var>${ip_data}</var>
</assign>
<msg timestamp="20221117 03:53:05.775" level="INFO">${ip_data} = {'Address': '10.7.7.7', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}</msg>
<status status="PASS" starttime="20221117 03:53:05.774" endtime="20221117 03:53:05.775"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:53:05.776" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:53:05.776" endtime="20221117 03:53:05.776"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>${network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:05.852" level="INFO">#(CST) 2022/11/17 03:53:05.851614 -    0.121359 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:05.868" level="INFO">#(CST) 2022/11/17 03:53:05.867578 -    0.015963 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:05.868" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:05.868" level="INFO">#(CST) 2022/11/17 03:53:05.867889 -    0.000311 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:05.868" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:05.868" level="INFO">#(CST) 2022/11/17 03:53:05.868296 -    0.000408 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:05.878" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:05.882" level="INFO">#(CST) 2022/11/17 03:53:05.882229 -    0.013933 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:05.882" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:05.913" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:05.913" level="INFO">#(CST) 2022/11/17 03:53:05.913146 -    0.030917 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:05.913" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:05.926" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:05.926" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:06.009" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:06.010" level="INFO">#(CST) 2022/11/17 03:53:06.009604 -    0.096459 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:06.018" level="INFO">#(CST) 2022/11/17 03:53:06.018195 -    0.008591 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:06.029" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:06.046" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:05.777" endtime="20221117 03:53:06.046"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:53:06.060" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:53:06.074" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.013087619096040726 seconds.</msg>
<msg timestamp="20221117 03:53:06.074" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:53:06.046" endtime="20221117 03:53:06.074"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:53:06.076" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:53:06.075" endtime="20221117 03:53:06.076"></status>
</kw>
<msg timestamp="20221117 03:53:06.076" level="INFO">${network_configurations} = [{'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}]</msg>
<status status="PASS" starttime="20221117 03:53:05.776" endtime="20221117 03:53:06.076"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${network_configurations}</arg>
</arguments>
<assign>
<var>${num_entries}</var>
</assign>
<msg timestamp="20221117 03:53:06.077" level="INFO">Length is 1</msg>
<msg timestamp="20221117 03:53:06.077" level="INFO">${num_entries} = 1</msg>
<status status="PASS" starttime="20221117 03:53:06.077" endtime="20221117 03:53:06.077"></status>
</kw>
<kw name="${INDEX} IN RANGE [ 0 | ${num_entries} ]" type="for">
<kw name="${INDEX} = 0" type="foritem">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:06.078" endtime="20221117 03:53:06.079"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:06.078" endtime="20221117 03:53:06.079"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:06.077" endtime="20221117 03:53:06.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Set Variable</arg>
<arg>${HTTP_OK},${HTTP_NO_CONTENT}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${valid_status_codes}</arg>
</arguments>
<assign>
<var>${valid_status_codes}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${HTTP_OK},${HTTP_NO_CONTENT}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:06.080" endtime="20221117 03:53:06.081"></status>
</kw>
<msg timestamp="20221117 03:53:06.081" level="INFO">${valid_status_codes} = 200,204</msg>
<status status="PASS" starttime="20221117 03:53:06.079" endtime="20221117 03:53:06.081"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:06.082" endtime="20221117 03:53:06.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:53:06.083" level="INFO">${data} = {'IPv4StaticAddresses': [{}, {'Address': '10.7.7.7', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}]}</msg>
<status status="PASS" starttime="20221117 03:53:06.083" endtime="20221117 03:53:06.083"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:06.155" level="INFO">#(CST) 2022/11/17 03:53:06.154934 -    0.136739 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:06.170" level="INFO">#(CST) 2022/11/17 03:53:06.170375 -    0.015442 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:06.171" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:06.171" level="INFO">#(CST) 2022/11/17 03:53:06.170672 -    0.000296 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:06.171" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:06.171" level="INFO">#(CST) 2022/11/17 03:53:06.171081 -    0.000410 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:06.181" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:06.185" level="INFO">#(CST) 2022/11/17 03:53:06.184837 -    0.013756 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:06.185" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:06.215" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:06.215" level="INFO">#(CST) 2022/11/17 03:53:06.215425 -    0.030588 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:06.216" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:06.228" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:06.228" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:06.312" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:06.312" level="INFO">#(CST) 2022/11/17 03:53:06.311926 -    0.096500 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:06.320" level="INFO">#(CST) 2022/11/17 03:53:06.320128 -    0.008203 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:06.331" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:06.346" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:06.084" endtime="20221117 03:53:06.346"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:53:06.348" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:53:06.347" endtime="20221117 03:53:06.348"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:53:06.362" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:53:06.394" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.03184927487745881 seconds.</msg>
<status status="PASS" starttime="20221117 03:53:06.348" endtime="20221117 03:53:06.394"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' != '${HTTP_OK},${HTTP_NO_CONTENT}'</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:06.395" endtime="20221117 03:53:06.395"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:53:24.396" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:53:06.396" endtime="20221117 03:53:24.397"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:53:24.401" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:53:24.401" endtime="20221117 03:53:24.401"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:53:24.409" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:53:27.425" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:53:27.425" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.806 ms
64 bytes from rain40bmc.aus.stglabs....</msg>
<status status="PASS" starttime="20221117 03:53:24.402" endtime="20221117 03:53:27.425"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:53:27.428" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.806 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.263 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.526 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.278 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.263/0.468/0.806/0.221 ms</msg>
<status status="PASS" starttime="20221117 03:53:27.427" endtime="20221117 03:53:27.428"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:27.429" endtime="20221117 03:53:27.430"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:24.400" endtime="20221117 03:53:27.430"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:24.399" endtime="20221117 03:53:27.430"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:24.397" endtime="20221117 03:53:27.431"></status>
</kw>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:27.530" level="INFO">#(CST) 2022/11/17 03:53:27.529633 -   21.209504 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:27.548" level="INFO">#(CST) 2022/11/17 03:53:27.547960 -    0.018328 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:27.548" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:27.548" level="INFO">#(CST) 2022/11/17 03:53:27.548349 -    0.000388 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:27.549" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:27.549" level="INFO">#(CST) 2022/11/17 03:53:27.548832 -    0.000484 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:27.560" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:27.565" level="INFO">#(CST) 2022/11/17 03:53:27.564813 -    0.015980 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:27.565" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:27.600" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:27.600" level="INFO">#(CST) 2022/11/17 03:53:27.599842 -    0.035029 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:27.600" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:27.614" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:27.614" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:27.698" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:27.698" level="INFO">#(CST) 2022/11/17 03:53:27.698014 -    0.098172 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:27.707" level="INFO">#(CST) 2022/11/17 03:53:27.706439 -    0.008424 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:27.717" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:27.733" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:27.434" endtime="20221117 03:53:27.733"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:53:27.734" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:53:27.733" endtime="20221117 03:53:27.734"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:53:27.812" level="INFO">#(CST) 2022/11/17 03:53:27.811452 -    0.105014 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:53:27.828" level="INFO">#(CST) 2022/11/17 03:53:27.827558 -    0.016106 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:53:27.828" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:27.828" level="INFO">#(CST) 2022/11/17 03:53:27.827863 -    0.000305 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:27.828" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:27.828" level="INFO">#(CST) 2022/11/17 03:53:27.828260 -    0.000398 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:27.838" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:27.843" level="INFO">#(CST) 2022/11/17 03:53:27.842616 -    0.014355 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:27.843" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:27.873" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:27.873" level="INFO">#(CST) 2022/11/17 03:53:27.873029 -    0.030414 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:27.873" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:27.886" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:27.886" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:53:27.980" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:27.980" level="INFO">#(CST) 2022/11/17 03:53:27.979885 -    0.106855 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:27.989" level="INFO">#(CST) 2022/11/17 03:53:27.988685 -    0.008801 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:28.000" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:28.013" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:53:28.014" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:53:28.014" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:53:27.735" endtime="20221117 03:53:28.014"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:53:28.015" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:53:28.015" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:53:28.014" endtime="20221117 03:53:28.015"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:53:28.016" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:53:28.016" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:28.016" endtime="20221117 03:53:28.016"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:53:28.017" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:53:28.017" endtime="20221117 03:53:28.017"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:28.019" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:28.018" endtime="20221117 03:53:28.019"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:28.020" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:53:28.020" endtime="20221117 03:53:28.020"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:28.021" endtime="20221117 03:53:28.021"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:28.018" endtime="20221117 03:53:28.021"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:28.022" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:28.022" endtime="20221117 03:53:28.022"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:28.023" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:53:28.023" endtime="20221117 03:53:28.023"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:28.024" endtime="20221117 03:53:28.025"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:28.021" endtime="20221117 03:53:28.025"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:28.026" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:28.026" endtime="20221117 03:53:28.026"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:28.027" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:53:28.027" endtime="20221117 03:53:28.027"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:28.028" endtime="20221117 03:53:28.028"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:28.025" endtime="20221117 03:53:28.028"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:28.018" endtime="20221117 03:53:28.028"></status>
</kw>
<msg timestamp="20221117 03:53:28.029" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.7/16 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:53:27.433" endtime="20221117 03:53:28.029"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:28.029" endtime="20221117 03:53:28.030"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:27.431" endtime="20221117 03:53:28.030"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:28.109" level="INFO">#(CST) 2022/11/17 03:53:28.108753 -    0.120068 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:28.125" level="INFO">#(CST) 2022/11/17 03:53:28.124633 -    0.015880 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:28.125" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:28.125" level="INFO">#(CST) 2022/11/17 03:53:28.124926 -    0.000293 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:28.125" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:28.125" level="INFO">#(CST) 2022/11/17 03:53:28.125310 -    0.000384 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:28.135" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:28.139" level="INFO">#(CST) 2022/11/17 03:53:28.139370 -    0.014060 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:28.140" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:28.170" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:28.170" level="INFO">#(CST) 2022/11/17 03:53:28.169752 -    0.030382 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:28.170" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:28.182" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:28.182" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:28.276" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:28.277" level="INFO">#(CST) 2022/11/17 03:53:28.276538 -    0.106786 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:28.285" level="INFO">#(CST) 2022/11/17 03:53:28.284764 -    0.008226 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:28.295" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:28.311" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:28.032" endtime="20221117 03:53:28.311"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:53:28.325" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:53:28.339" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014133509248495102 seconds.</msg>
<msg timestamp="20221117 03:53:28.340" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:53:28.311" endtime="20221117 03:53:28.340"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:53:28.342" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:53:28.341" endtime="20221117 03:53:28.342"></status>
</kw>
<msg timestamp="20221117 03:53:28.342" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:53:28.031" endtime="20221117 03:53:28.342"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:28.437" level="INFO">#(CST) 2022/11/17 03:53:28.436458 -    0.151695 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:28.454" level="INFO">#(CST) 2022/11/17 03:53:28.454360 -    0.017901 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:28.455" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:28.455" level="INFO">#(CST) 2022/11/17 03:53:28.454674 -    0.000314 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:28.455" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:28.455" level="INFO">#(CST) 2022/11/17 03:53:28.455110 -    0.000436 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:28.466" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:28.471" level="INFO">#(CST) 2022/11/17 03:53:28.470871 -    0.015761 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:28.471" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:28.505" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:28.505" level="INFO">#(CST) 2022/11/17 03:53:28.504910 -    0.034039 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:28.505" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:28.519" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:28.519" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:28.603" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:28.603" level="INFO">#(CST) 2022/11/17 03:53:28.603028 -    0.098118 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:28.609" level="INFO">#(CST) 2022/11/17 03:53:28.609260 -    0.006233 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:28.617" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:28.629" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:28.344" endtime="20221117 03:53:28.629"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:53:28.630" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:53:28.630" endtime="20221117 03:53:28.630"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:53:28.693" level="INFO">#(CST) 2022/11/17 03:53:28.692863 -    0.083602 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:53:28.707" level="INFO">#(CST) 2022/11/17 03:53:28.706790 -    0.013927 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:53:28.707" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:28.707" level="INFO">#(CST) 2022/11/17 03:53:28.707055 -    0.000265 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:28.707" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:28.707" level="INFO">#(CST) 2022/11/17 03:53:28.707403 -    0.000348 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:28.716" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:28.720" level="INFO">#(CST) 2022/11/17 03:53:28.719942 -    0.012539 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:28.720" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:28.748" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:28.748" level="INFO">#(CST) 2022/11/17 03:53:28.747707 -    0.027765 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:28.748" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:28.760" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:28.760" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:53:28.844" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:28.844" level="INFO">#(CST) 2022/11/17 03:53:28.843876 -    0.096169 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:28.850" level="INFO">#(CST) 2022/11/17 03:53:28.849410 -    0.005534 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:28.857" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:28.866" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:53:28.866" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:53:28.866" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:53:28.631" endtime="20221117 03:53:28.866"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:53:28.867" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:53:28.867" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:53:28.867" endtime="20221117 03:53:28.867"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:53:28.868" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:53:28.868" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:28.868" endtime="20221117 03:53:28.868"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:53:28.869" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:53:28.868" endtime="20221117 03:53:28.869"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:28.870" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:28.869" endtime="20221117 03:53:28.870"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:28.871" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:53:28.870" endtime="20221117 03:53:28.871"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:28.871" endtime="20221117 03:53:28.871"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:28.869" endtime="20221117 03:53:28.871"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:28.872" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:28.872" endtime="20221117 03:53:28.872"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:28.873" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:53:28.873" endtime="20221117 03:53:28.873"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:28.873" endtime="20221117 03:53:28.874"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:28.871" endtime="20221117 03:53:28.874"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:28.875" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:28.874" endtime="20221117 03:53:28.875"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:28.876" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:53:28.875" endtime="20221117 03:53:28.876"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:28.876" endtime="20221117 03:53:28.876"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:28.874" endtime="20221117 03:53:28.876"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:28.869" endtime="20221117 03:53:28.876"></status>
</kw>
<msg timestamp="20221117 03:53:28.877" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.7/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:53:28.343" endtime="20221117 03:53:28.877"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:28.878" endtime="20221117 03:53:28.878"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:28.877" endtime="20221117 03:53:28.878"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:28.879" endtime="20221117 03:53:28.879"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:28.878" endtime="20221117 03:53:28.879"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:28.877" endtime="20221117 03:53:28.879"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:28.030" endtime="20221117 03:53:28.879"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:05.772" endtime="20221117 03:53:28.880"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:05.772" endtime="20221117 03:53:28.880"></status>
</kw>
<kw name="${ip} = 10.7.7.8" type="foritem">
<kw name="Add IP Address" library="bmc_network_utils">
<doc>Add IP Address To BMC.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${subnet_mask}</arg>
<arg>${gateway}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:53:28.881" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:53:28.881" endtime="20221117 03:53:28.881"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Address=${ip}</arg>
<arg>SubnetMask=${subnet_mask}</arg>
<arg>Gateway=${gateway}</arg>
</arguments>
<assign>
<var>${ip_data}</var>
</assign>
<msg timestamp="20221117 03:53:28.882" level="INFO">${ip_data} = {'Address': '10.7.7.8', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}</msg>
<status status="PASS" starttime="20221117 03:53:28.882" endtime="20221117 03:53:28.882"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:53:28.883" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:53:28.882" endtime="20221117 03:53:28.883"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>${network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:28.940" level="INFO">#(CST) 2022/11/17 03:53:28.939488 -    0.090078 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:28.952" level="INFO">#(CST) 2022/11/17 03:53:28.952437 -    0.012949 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:28.953" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:28.953" level="INFO">#(CST) 2022/11/17 03:53:28.952686 -    0.000249 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:28.953" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:28.953" level="INFO">#(CST) 2022/11/17 03:53:28.953024 -    0.000338 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:28.961" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:28.965" level="INFO">#(CST) 2022/11/17 03:53:28.964776 -    0.011752 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:28.965" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:28.993" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:28.994" level="INFO">#(CST) 2022/11/17 03:53:28.993514 -    0.028738 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:28.994" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:29.006" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:29.006" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:29.090" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:29.090" level="INFO">#(CST) 2022/11/17 03:53:29.089838 -    0.096323 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:29.098" level="INFO">#(CST) 2022/11/17 03:53:29.098324 -    0.008486 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:29.109" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:29.125" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:28.884" endtime="20221117 03:53:29.126"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:53:29.140" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:53:29.154" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.013988287653774023 seconds.</msg>
<msg timestamp="20221117 03:53:29.155" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:53:29.126" endtime="20221117 03:53:29.155"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:53:29.156" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:53:29.156" endtime="20221117 03:53:29.156"></status>
</kw>
<msg timestamp="20221117 03:53:29.157" level="INFO">${network_configurations} = [{'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}, {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask':...</msg>
<status status="PASS" starttime="20221117 03:53:28.883" endtime="20221117 03:53:29.157"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${network_configurations}</arg>
</arguments>
<assign>
<var>${num_entries}</var>
</assign>
<msg timestamp="20221117 03:53:29.158" level="INFO">Length is 2</msg>
<msg timestamp="20221117 03:53:29.158" level="INFO">${num_entries} = 2</msg>
<status status="PASS" starttime="20221117 03:53:29.157" endtime="20221117 03:53:29.158"></status>
</kw>
<kw name="${INDEX} IN RANGE [ 0 | ${num_entries} ]" type="for">
<kw name="${INDEX} = 0" type="foritem">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:29.159" endtime="20221117 03:53:29.159"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:29.158" endtime="20221117 03:53:29.160"></status>
</kw>
<kw name="${INDEX} = 1" type="foritem">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:29.160" endtime="20221117 03:53:29.161"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:29.160" endtime="20221117 03:53:29.161"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:29.158" endtime="20221117 03:53:29.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Set Variable</arg>
<arg>${HTTP_OK},${HTTP_NO_CONTENT}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${valid_status_codes}</arg>
</arguments>
<assign>
<var>${valid_status_codes}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${HTTP_OK},${HTTP_NO_CONTENT}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:29.162" endtime="20221117 03:53:29.163"></status>
</kw>
<msg timestamp="20221117 03:53:29.163" level="INFO">${valid_status_codes} = 200,204</msg>
<status status="PASS" starttime="20221117 03:53:29.161" endtime="20221117 03:53:29.163"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:29.164" endtime="20221117 03:53:29.164"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:53:29.165" level="INFO">${data} = {'IPv4StaticAddresses': [{}, {}, {'Address': '10.7.7.8', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}]}</msg>
<status status="PASS" starttime="20221117 03:53:29.165" endtime="20221117 03:53:29.165"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:29.236" level="INFO">#(CST) 2022/11/17 03:53:29.235978 -    0.137654 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:29.251" level="INFO">#(CST) 2022/11/17 03:53:29.251142 -    0.015164 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:29.251" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:29.252" level="INFO">#(CST) 2022/11/17 03:53:29.251439 -    0.000298 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:29.252" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:29.252" level="INFO">#(CST) 2022/11/17 03:53:29.251846 -    0.000407 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:29.261" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:29.266" level="INFO">#(CST) 2022/11/17 03:53:29.265485 -    0.013638 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:29.266" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:29.296" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:29.296" level="INFO">#(CST) 2022/11/17 03:53:29.295784 -    0.030300 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:29.296" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:29.308" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:29.308" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:29.393" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:29.393" level="INFO">#(CST) 2022/11/17 03:53:29.392928 -    0.097144 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:29.401" level="INFO">#(CST) 2022/11/17 03:53:29.401181 -    0.008254 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:29.412" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:29.427" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:29.166" endtime="20221117 03:53:29.428"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:53:29.429" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:53:29.428" endtime="20221117 03:53:29.429"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:53:29.443" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:53:29.474" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.030417229048907757 seconds.</msg>
<status status="PASS" starttime="20221117 03:53:29.429" endtime="20221117 03:53:29.474"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' != '${HTTP_OK},${HTTP_NO_CONTENT}'</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:29.475" endtime="20221117 03:53:29.476"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:53:47.477" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:53:29.477" endtime="20221117 03:53:47.478"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:53:47.484" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:53:47.483" endtime="20221117 03:53:47.484"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:53:47.491" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:53:50.507" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:53:50.507" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.392 ms
64 bytes from rain40bmc.aus.stglabs....</msg>
<status status="PASS" starttime="20221117 03:53:47.485" endtime="20221117 03:53:50.507"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:53:50.509" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.392 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.382 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.245 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.240 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.240/0.314/0.392/0.075 ms</msg>
<status status="PASS" starttime="20221117 03:53:50.508" endtime="20221117 03:53:50.510"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:50.510" endtime="20221117 03:53:50.511"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:47.482" endtime="20221117 03:53:50.511"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:47.481" endtime="20221117 03:53:50.511"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:47.478" endtime="20221117 03:53:50.512"></status>
</kw>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:50.615" level="INFO">#(CST) 2022/11/17 03:53:50.614446 -   21.213265 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:50.633" level="INFO">#(CST) 2022/11/17 03:53:50.632666 -    0.018220 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:50.633" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:50.633" level="INFO">#(CST) 2022/11/17 03:53:50.633067 -    0.000401 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:50.633" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:50.634" level="INFO">#(CST) 2022/11/17 03:53:50.633543 -    0.000476 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:50.645" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:50.650" level="INFO">#(CST) 2022/11/17 03:53:50.650080 -    0.016537 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:50.650" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:50.685" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:50.685" level="INFO">#(CST) 2022/11/17 03:53:50.685055 -    0.034975 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:50.685" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:50.699" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:50.699" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:50.783" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:50.783" level="INFO">#(CST) 2022/11/17 03:53:50.783336 -    0.098281 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:50.793" level="INFO">#(CST) 2022/11/17 03:53:50.792545 -    0.009208 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:50.804" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:50.821" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:50.514" endtime="20221117 03:53:50.821"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:53:50.822" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:53:50.821" endtime="20221117 03:53:50.822"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:53:50.903" level="INFO">#(CST) 2022/11/17 03:53:50.902493 -    0.109949 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:53:50.919" level="INFO">#(CST) 2022/11/17 03:53:50.918928 -    0.016434 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:53:50.919" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:50.919" level="INFO">#(CST) 2022/11/17 03:53:50.919242 -    0.000314 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:50.920" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:50.920" level="INFO">#(CST) 2022/11/17 03:53:50.919640 -    0.000398 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:50.930" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:50.934" level="INFO">#(CST) 2022/11/17 03:53:50.934155 -    0.014514 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:50.934" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:50.965" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:50.966" level="INFO">#(CST) 2022/11/17 03:53:50.965537 -    0.031382 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:50.966" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:50.978" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:50.979" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:53:51.062" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:51.063" level="INFO">#(CST) 2022/11/17 03:53:51.062663 -    0.097126 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:51.071" level="INFO">#(CST) 2022/11/17 03:53:51.070970 -    0.008307 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:51.081" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:51.094" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:53:51.095" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:53:51.095" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:53:50.823" endtime="20221117 03:53:51.095"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:53:51.096" level="INFO">4 out of 5 lines matched</msg>
<msg timestamp="20221117 03:53:51.096" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0
    inet 10.7.7.8/16 br...</msg>
<status status="PASS" starttime="20221117 03:53:51.095" endtime="20221117 03:53:51.096"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:53:51.097" level="INFO">4 lines returned</msg>
<msg timestamp="20221117 03:53:51.097" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 |     inet 10.7.7...</msg>
<status status="PASS" starttime="20221117 03:53:51.097" endtime="20221117 03:53:51.097"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:53:51.098" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:53:51.098" endtime="20221117 03:53:51.098"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:51.100" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:51.099" endtime="20221117 03:53:51.100"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:51.101" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:53:51.100" endtime="20221117 03:53:51.101"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:51.101" endtime="20221117 03:53:51.102"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:51.099" endtime="20221117 03:53:51.102"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:51.103" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:51.102" endtime="20221117 03:53:51.103"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:51.104" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:53:51.103" endtime="20221117 03:53:51.104"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:51.104" endtime="20221117 03:53:51.105"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:51.102" endtime="20221117 03:53:51.105"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:51.106" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:51.105" endtime="20221117 03:53:51.106"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:51.107" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:53:51.106" endtime="20221117 03:53:51.107"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:51.107" endtime="20221117 03:53:51.108"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:51.105" endtime="20221117 03:53:51.108"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/16 brd 10.7.255.255 scope global secondary eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:51.109" level="INFO">@{if_info} = [ inet | 10.7.7.8/16 | brd | 10.7.255.255 | scope | global | secondary | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:51.108" endtime="20221117 03:53:51.109"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:51.110" level="INFO">${ip_n_prefix} = 10.7.7.8/16</msg>
<status status="PASS" starttime="20221117 03:53:51.110" endtime="20221117 03:53:51.110"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:51.111" endtime="20221117 03:53:51.111"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:51.108" endtime="20221117 03:53:51.111"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:51.098" endtime="20221117 03:53:51.111"></status>
</kw>
<msg timestamp="20221117 03:53:51.111" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.7/16 | 9.41.164.249/24 | 10.7.7.8/16 ]</msg>
<status status="PASS" starttime="20221117 03:53:50.513" endtime="20221117 03:53:51.112"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:51.112" endtime="20221117 03:53:51.113"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:50.512" endtime="20221117 03:53:51.113"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:51.187" level="INFO">#(CST) 2022/11/17 03:53:51.186851 -    0.115880 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:51.202" level="INFO">#(CST) 2022/11/17 03:53:51.202195 -    0.015345 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:51.202" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:51.203" level="INFO">#(CST) 2022/11/17 03:53:51.202472 -    0.000277 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:51.203" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:51.203" level="INFO">#(CST) 2022/11/17 03:53:51.202848 -    0.000376 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:51.212" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:51.217" level="INFO">#(CST) 2022/11/17 03:53:51.216447 -    0.013598 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:51.217" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:51.248" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:51.248" level="INFO">#(CST) 2022/11/17 03:53:51.247701 -    0.031254 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:51.248" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:51.260" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:51.260" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:51.344" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:51.345" level="INFO">#(CST) 2022/11/17 03:53:51.344515 -    0.096815 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:51.354" level="INFO">#(CST) 2022/11/17 03:53:51.353410 -    0.008894 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:51.365" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:51.381" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:51.115" endtime="20221117 03:53:51.381"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:53:51.398" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:53:51.414" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.015076753217726946 seconds.</msg>
<msg timestamp="20221117 03:53:51.414" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:53:51.382" endtime="20221117 03:53:51.414"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:53:51.416" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:53:51.415" endtime="20221117 03:53:51.416"></status>
</kw>
<msg timestamp="20221117 03:53:51.417" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:53:51.114" endtime="20221117 03:53:51.417"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:51.515" level="INFO">#(CST) 2022/11/17 03:53:51.515214 -    0.161805 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:51.534" level="INFO">#(CST) 2022/11/17 03:53:51.533537 -    0.018323 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:51.534" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:51.534" level="INFO">#(CST) 2022/11/17 03:53:51.533889 -    0.000352 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:51.534" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:51.534" level="INFO">#(CST) 2022/11/17 03:53:51.534343 -    0.000454 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:51.546" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:51.551" level="INFO">#(CST) 2022/11/17 03:53:51.550542 -    0.016199 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:51.551" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:51.584" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:51.585" level="INFO">#(CST) 2022/11/17 03:53:51.584531 -    0.033989 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:51.585" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:51.598" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:51.598" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:51.681" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:51.682" level="INFO">#(CST) 2022/11/17 03:53:51.681609 -    0.097079 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:51.691" level="INFO">#(CST) 2022/11/17 03:53:51.691037 -    0.009428 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:51.703" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:51.719" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:51.418" endtime="20221117 03:53:51.719"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:53:51.720" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:53:51.720" endtime="20221117 03:53:51.720"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:53:51.801" level="INFO">#(CST) 2022/11/17 03:53:51.800502 -    0.109465 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:53:51.817" level="INFO">#(CST) 2022/11/17 03:53:51.816843 -    0.016341 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:53:51.817" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:51.817" level="INFO">#(CST) 2022/11/17 03:53:51.817155 -    0.000312 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:51.817" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:51.818" level="INFO">#(CST) 2022/11/17 03:53:51.817555 -    0.000400 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:51.828" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:51.832" level="INFO">#(CST) 2022/11/17 03:53:51.832020 -    0.014465 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:51.832" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:51.864" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:51.864" level="INFO">#(CST) 2022/11/17 03:53:51.864373 -    0.032352 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:51.865" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:51.877" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:51.877" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:53:51.972" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:51.972" level="INFO">#(CST) 2022/11/17 03:53:51.971668 -    0.107295 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:51.980" level="INFO">#(CST) 2022/11/17 03:53:51.980174 -    0.008507 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:51.991" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:52.004" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:53:52.004" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:53:52.005" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:53:51.721" endtime="20221117 03:53:52.005"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:53:52.006" level="INFO">4 out of 5 lines matched</msg>
<msg timestamp="20221117 03:53:52.006" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0
    inet 10.7.7.8/16 br...</msg>
<status status="PASS" starttime="20221117 03:53:52.005" endtime="20221117 03:53:52.006"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:53:52.007" level="INFO">4 lines returned</msg>
<msg timestamp="20221117 03:53:52.007" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 |     inet 10.7.7...</msg>
<status status="PASS" starttime="20221117 03:53:52.006" endtime="20221117 03:53:52.007"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:53:52.008" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:53:52.007" endtime="20221117 03:53:52.008"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:52.009" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:52.009" endtime="20221117 03:53:52.009"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:52.010" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:53:52.010" endtime="20221117 03:53:52.010"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:52.011" endtime="20221117 03:53:52.011"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.008" endtime="20221117 03:53:52.011"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:52.012" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:52.012" endtime="20221117 03:53:52.013"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:52.014" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:53:52.013" endtime="20221117 03:53:52.014"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:52.014" endtime="20221117 03:53:52.015"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.011" endtime="20221117 03:53:52.015"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:52.016" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:52.015" endtime="20221117 03:53:52.016"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:52.017" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:53:52.016" endtime="20221117 03:53:52.017"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:52.018" endtime="20221117 03:53:52.018"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.015" endtime="20221117 03:53:52.018"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/16 brd 10.7.255.255 scope global secondary eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:52.019" level="INFO">@{if_info} = [ inet | 10.7.7.8/16 | brd | 10.7.255.255 | scope | global | secondary | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:52.019" endtime="20221117 03:53:52.020"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:52.020" level="INFO">${ip_n_prefix} = 10.7.7.8/16</msg>
<status status="PASS" starttime="20221117 03:53:52.020" endtime="20221117 03:53:52.021"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:52.021" endtime="20221117 03:53:52.021"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.018" endtime="20221117 03:53:52.022"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.008" endtime="20221117 03:53:52.022"></status>
</kw>
<msg timestamp="20221117 03:53:52.022" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.7/16', '9.41.164.249/24', '10.7.7.8/16']</msg>
<status status="PASS" starttime="20221117 03:53:51.417" endtime="20221117 03:53:52.022"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:52.023" endtime="20221117 03:53:52.024"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.022" endtime="20221117 03:53:52.024"></status>
</kw>
<kw name="${network_configuration} = {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:52.024" endtime="20221117 03:53:52.025"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.024" endtime="20221117 03:53:52.025"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:52.026" endtime="20221117 03:53:52.027"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.025" endtime="20221117 03:53:52.027"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.022" endtime="20221117 03:53:52.027"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:51.113" endtime="20221117 03:53:52.027"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:28.880" endtime="20221117 03:53:52.027"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:28.880" endtime="20221117 03:53:52.027"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:05.771" endtime="20221117 03:53:52.027"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:52.099" level="INFO">#(CST) 2022/11/17 03:53:52.099059 -    0.118885 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:52.114" level="INFO">#(CST) 2022/11/17 03:53:52.114290 -    0.015231 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:52.115" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:52.115" level="INFO">#(CST) 2022/11/17 03:53:52.114593 -    0.000303 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:52.115" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:52.115" level="INFO">#(CST) 2022/11/17 03:53:52.115054 -    0.000461 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:52.125" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:52.129" level="INFO">#(CST) 2022/11/17 03:53:52.128721 -    0.013668 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:52.129" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:52.163" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:52.164" level="INFO">#(CST) 2022/11/17 03:53:52.163450 -    0.034729 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:52.164" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:52.176" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:52.176" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:52.271" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:52.271" level="INFO">#(CST) 2022/11/17 03:53:52.270845 -    0.107394 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:52.279" level="INFO">#(CST) 2022/11/17 03:53:52.279232 -    0.008387 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:52.290" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:52.304" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:52.029" endtime="20221117 03:53:52.305"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:53:52.317" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:53:52.332" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014160386752337217 seconds.</msg>
<msg timestamp="20221117 03:53:52.332" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:53:52.305" endtime="20221117 03:53:52.333"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:53:52.334" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:53:52.333" endtime="20221117 03:53:52.334"></status>
</kw>
<msg timestamp="20221117 03:53:52.334" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:53:52.028" endtime="20221117 03:53:52.334"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:52.394" level="INFO">#(CST) 2022/11/17 03:53:52.393711 -    0.114479 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:52.407" level="INFO">#(CST) 2022/11/17 03:53:52.407094 -    0.013382 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:52.407" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:52.407" level="INFO">#(CST) 2022/11/17 03:53:52.407357 -    0.000263 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:52.408" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:52.408" level="INFO">#(CST) 2022/11/17 03:53:52.407687 -    0.000331 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:52.416" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:52.419" level="INFO">#(CST) 2022/11/17 03:53:52.419184 -    0.011497 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:52.419" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:52.448" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:52.448" level="INFO">#(CST) 2022/11/17 03:53:52.447812 -    0.028628 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:52.448" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:52.460" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:52.460" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:52.544" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:52.544" level="INFO">#(CST) 2022/11/17 03:53:52.544267 -    0.096455 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:52.553" level="INFO">#(CST) 2022/11/17 03:53:52.552569 -    0.008302 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:52.563" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:52.579" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:52.335" endtime="20221117 03:53:52.579"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:53:52.581" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:53:52.580" endtime="20221117 03:53:52.581"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:53:52.651" level="INFO">#(CST) 2022/11/17 03:53:52.650820 -    0.098250 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:53:52.666" level="INFO">#(CST) 2022/11/17 03:53:52.665751 -    0.014931 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:53:52.666" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:52.666" level="INFO">#(CST) 2022/11/17 03:53:52.666054 -    0.000303 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:52.666" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:52.667" level="INFO">#(CST) 2022/11/17 03:53:52.666462 -    0.000409 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:52.676" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:52.680" level="INFO">#(CST) 2022/11/17 03:53:52.679792 -    0.013330 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:52.680" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:52.710" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:52.710" level="INFO">#(CST) 2022/11/17 03:53:52.710007 -    0.030215 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:52.710" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:52.722" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:52.722" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:53:52.806" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:52.806" level="INFO">#(CST) 2022/11/17 03:53:52.805743 -    0.095736 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:52.814" level="INFO">#(CST) 2022/11/17 03:53:52.813368 -    0.007626 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:52.823" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:52.834" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:53:52.835" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:53:52.835" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:53:52.581" endtime="20221117 03:53:52.835"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:53:52.836" level="INFO">4 out of 5 lines matched</msg>
<msg timestamp="20221117 03:53:52.836" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0
    inet 10.7.7.8/16 br...</msg>
<status status="PASS" starttime="20221117 03:53:52.835" endtime="20221117 03:53:52.836"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:53:52.837" level="INFO">4 lines returned</msg>
<msg timestamp="20221117 03:53:52.837" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 |     inet 10.7.7...</msg>
<status status="PASS" starttime="20221117 03:53:52.836" endtime="20221117 03:53:52.837"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:53:52.838" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:53:52.838" endtime="20221117 03:53:52.838"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:52.839" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:52.839" endtime="20221117 03:53:52.839"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:52.840" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:53:52.840" endtime="20221117 03:53:52.840"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:52.841" endtime="20221117 03:53:52.841"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.838" endtime="20221117 03:53:52.841"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:52.842" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:52.842" endtime="20221117 03:53:52.842"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:52.844" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:53:52.843" endtime="20221117 03:53:52.844"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:52.844" endtime="20221117 03:53:52.845"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.841" endtime="20221117 03:53:52.845"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:52.846" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:52.845" endtime="20221117 03:53:52.846"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:52.847" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:53:52.846" endtime="20221117 03:53:52.847"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:52.847" endtime="20221117 03:53:52.848"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.845" endtime="20221117 03:53:52.848"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/16 brd 10.7.255.255 scope global secondary eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:53:52.849" level="INFO">@{if_info} = [ inet | 10.7.7.8/16 | brd | 10.7.255.255 | scope | global | secondary | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:53:52.848" endtime="20221117 03:53:52.849"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:53:52.850" level="INFO">${ip_n_prefix} = 10.7.7.8/16</msg>
<status status="PASS" starttime="20221117 03:53:52.849" endtime="20221117 03:53:52.850"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:52.850" endtime="20221117 03:53:52.850"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.848" endtime="20221117 03:53:52.850"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.838" endtime="20221117 03:53:52.850"></status>
</kw>
<msg timestamp="20221117 03:53:52.851" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.7/16', '9.41.164.249/24', '10.7.7.8/16']</msg>
<status status="PASS" starttime="20221117 03:53:52.335" endtime="20221117 03:53:52.851"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:52.852" endtime="20221117 03:53:52.852"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.851" endtime="20221117 03:53:52.852"></status>
</kw>
<kw name="${network_configuration} = {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:52.853" endtime="20221117 03:53:52.854"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.853" endtime="20221117 03:53:52.854"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:52.854" endtime="20221117 03:53:52.855"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.854" endtime="20221117 03:53:52.855"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.851" endtime="20221117 03:53:52.855"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.027" endtime="20221117 03:53:52.855"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:05.771" endtime="20221117 03:53:52.855"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Multiple Static IPv4 Addresses</arg>
<arg>${test_ipv4_addresses}</arg>
<arg>AND</arg>
<arg>Test Teardown Execution</arg>
</arguments>
<kw name="Delete Multiple Static IPv4 Addresses">
<doc>Delete multiple static ipv4 address via Redfish.</doc>
<arguments>
<arg>${test_ipv4_addresses}</arg>
</arguments>
<kw name="${ip} IN [ @{ip_addreses} ]" type="for">
<kw name="${ip} = 10.7.7.7" type="foritem">
<kw name="Delete IP Address" library="bmc_network_utils">
<doc>Delete IP Address Of BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:53:52.859" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:53:52.859" endtime="20221117 03:53:52.859"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:53:52.860" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:53:52.859" endtime="20221117 03:53:52.860"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:52.933" level="INFO">#(CST) 2022/11/17 03:53:52.932649 -    0.119281 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:52.948" level="INFO">#(CST) 2022/11/17 03:53:52.948013 -    0.015363 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:52.948" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:52.948" level="INFO">#(CST) 2022/11/17 03:53:52.948292 -    0.000280 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:52.949" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:52.949" level="INFO">#(CST) 2022/11/17 03:53:52.948659 -    0.000366 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:52.958" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:52.962" level="INFO">#(CST) 2022/11/17 03:53:52.962369 -    0.013710 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:52.963" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:52.993" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:52.993" level="INFO">#(CST) 2022/11/17 03:53:52.992937 -    0.030568 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:52.993" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:53.006" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:53.006" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:53.090" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:53.090" level="INFO">#(CST) 2022/11/17 03:53:53.090307 -    0.097371 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:53.100" level="INFO">#(CST) 2022/11/17 03:53:53.099891 -    0.009584 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:53.112" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:53.129" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:52.861" endtime="20221117 03:53:53.129"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:53:53.144" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:53:53.158" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014041518792510033 seconds.</msg>
<msg timestamp="20221117 03:53:53.158" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:53:53.129" endtime="20221117 03:53:53.158"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:53:53.160" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:53:53.159" endtime="20221117 03:53:53.160"></status>
</kw>
<msg timestamp="20221117 03:53:53.160" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:53:52.860" endtime="20221117 03:53:53.160"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:53.162" endtime="20221117 03:53:53.162"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:53.161" endtime="20221117 03:53:53.162"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:53.160" endtime="20221117 03:53:53.163"></status>
</kw>
<kw name="${network_configuration} = {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:53.164" endtime="20221117 03:53:53.165"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:53.163" endtime="20221117 03:53:53.165"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:53.163" endtime="20221117 03:53:53.165"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:53.167" endtime="20221117 03:53:53.167"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:53.166" endtime="20221117 03:53:53.167"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:53.165" endtime="20221117 03:53:53.167"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:53.160" endtime="20221117 03:53:53.167"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<assign>
<var>${ip_found}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:53.168" endtime="20221117 03:53:53.169"></status>
</kw>
<msg timestamp="20221117 03:53:53.169" level="INFO">${ip_found} = True</msg>
<status status="PASS" starttime="20221117 03:53:53.168" endtime="20221117 03:53:53.169"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>${ip_found} == ${False}</arg>
<arg>${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:53:53.169" endtime="20221117 03:53:53.170"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:53:53.171" level="INFO">${data} = {'IPv4StaticAddresses': [{}, None, {}]}</msg>
<status status="PASS" starttime="20221117 03:53:53.170" endtime="20221117 03:53:53.171"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:53:53.234" level="INFO">#(CST) 2022/11/17 03:53:53.233994 -    0.134103 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:53:53.247" level="INFO">#(CST) 2022/11/17 03:53:53.246959 -    0.012965 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:53:53.247" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:53:53.247" level="INFO">#(CST) 2022/11/17 03:53:53.247212 -    0.000252 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:53:53.247" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:53:53.248" level="INFO">#(CST) 2022/11/17 03:53:53.247543 -    0.000331 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:53:53.256" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:53:53.260" level="INFO">#(CST) 2022/11/17 03:53:53.259724 -    0.012182 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:53:53.260" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:53:53.289" level="INFO">children:
</msg>
<msg timestamp="20221117 03:53:53.289" level="INFO">#(CST) 2022/11/17 03:53:53.288932 -    0.029208 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:53:53.289" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:53:53.301" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:53:53.302" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:53:53.385" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:53:53.386" level="INFO">#(CST) 2022/11/17 03:53:53.385440 -    0.096508 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:53:53.395" level="INFO">#(CST) 2022/11/17 03:53:53.394689 -    0.009248 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:53:53.406" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:53:53.422" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:53:53.171" endtime="20221117 03:53:53.422"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:53:53.424" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:53:53.423" endtime="20221117 03:53:53.424"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:53:53.439" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:53:53.471" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.03088428033515811 seconds.</msg>
<status status="PASS" starttime="20221117 03:53:53.424" endtime="20221117 03:53:53.471"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:54:11.472" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:53:53.472" endtime="20221117 03:54:11.473"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:54:11.481" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:54:11.480" endtime="20221117 03:54:11.481"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:54:11.490" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:54:14.509" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:54:14.509" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.304 ms
64 bytes from rain40bmc.aus.stglabs....</msg>
<status status="PASS" starttime="20221117 03:54:11.482" endtime="20221117 03:54:14.509"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:54:14.511" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.304 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.307 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.487 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.251 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.251/0.337/0.487/0.090 ms</msg>
<status status="PASS" starttime="20221117 03:54:14.510" endtime="20221117 03:54:14.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:14.512" endtime="20221117 03:54:14.512"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:11.478" endtime="20221117 03:54:14.513"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:11.476" endtime="20221117 03:54:14.513"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:11.474" endtime="20221117 03:54:14.513"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify IP On BMC</arg>
<arg>${ip}</arg>
</arguments>
<assign>
<var>${delete_status}</var>
</assign>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:54:14.642" level="INFO">#(CST) 2022/11/17 03:54:14.641770 -   21.247081 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:54:14.664" level="INFO">#(CST) 2022/11/17 03:54:14.663721 -    0.021952 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:54:14.664" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:14.664" level="INFO">#(CST) 2022/11/17 03:54:14.664161 -    0.000440 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:14.665" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:14.665" level="INFO">#(CST) 2022/11/17 03:54:14.664684 -    0.000522 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:14.678" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:14.684" level="INFO">#(CST) 2022/11/17 03:54:14.683709 -    0.019026 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:14.684" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:14.721" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:14.721" level="INFO">#(CST) 2022/11/17 03:54:14.721186 -    0.037477 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:14.721" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:14.737" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:14.737" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:54:14.953" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:14.954" level="INFO">#(CST) 2022/11/17 03:54:14.953638 -    0.232452 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:14.964" level="INFO">#(CST) 2022/11/17 03:54:14.964267 -    0.010629 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:14.977" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:14.994" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:54:14.516" endtime="20221117 03:54:14.994"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:54:14.996" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:54:14.995" endtime="20221117 03:54:14.996"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:54:15.085" level="INFO">#(CST) 2022/11/17 03:54:15.084925 -    0.120658 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:54:15.102" level="INFO">#(CST) 2022/11/17 03:54:15.102067 -    0.017142 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:54:15.102" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:15.102" level="INFO">#(CST) 2022/11/17 03:54:15.102352 -    0.000284 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:15.103" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:15.103" level="INFO">#(CST) 2022/11/17 03:54:15.102733 -    0.000381 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:15.113" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:15.118" level="INFO">#(CST) 2022/11/17 03:54:15.118089 -    0.015357 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:15.118" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:15.149" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:15.149" level="INFO">#(CST) 2022/11/17 03:54:15.148580 -    0.030490 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:15.149" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:15.162" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:15.162" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:54:15.257" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:15.257" level="INFO">#(CST) 2022/11/17 03:54:15.256721 -    0.108142 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:15.268" level="INFO">#(CST) 2022/11/17 03:54:15.267742 -    0.011020 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:15.281" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:15.296" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:54:15.296" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:54:15.296" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:54:14.996" endtime="20221117 03:54:15.296"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:54:15.298" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:54:15.298" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:54:15.297" endtime="20221117 03:54:15.298"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:54:15.299" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:54:15.299" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:15.298" endtime="20221117 03:54:15.299"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:54:15.300" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:54:15.300" endtime="20221117 03:54:15.300"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:54:15.301" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:15.301" endtime="20221117 03:54:15.301"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:54:15.302" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:54:15.302" endtime="20221117 03:54:15.303"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:15.303" endtime="20221117 03:54:15.303"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:15.300" endtime="20221117 03:54:15.304"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:54:15.305" level="INFO">@{if_info} = [ inet | 10.7.7.8/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:15.304" endtime="20221117 03:54:15.305"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:54:15.306" level="INFO">${ip_n_prefix} = 10.7.7.8/16</msg>
<status status="PASS" starttime="20221117 03:54:15.305" endtime="20221117 03:54:15.306"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:15.306" endtime="20221117 03:54:15.307"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:15.304" endtime="20221117 03:54:15.307"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:54:15.308" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:15.307" endtime="20221117 03:54:15.308"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:54:15.309" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:54:15.309" endtime="20221117 03:54:15.309"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:15.309" endtime="20221117 03:54:15.310"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:15.307" endtime="20221117 03:54:15.310"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:15.300" endtime="20221117 03:54:15.310"></status>
</kw>
<msg timestamp="20221117 03:54:15.310" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.8/16 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:54:14.515" endtime="20221117 03:54:15.310"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<msg timestamp="20221117 03:54:15.312" level="FAIL">IP address does not exist.</msg>
<status status="FAIL" starttime="20221117 03:54:15.311" endtime="20221117 03:54:15.312"></status>
</kw>
<status status="FAIL" starttime="20221117 03:54:14.514" endtime="20221117 03:54:15.312"></status>
</kw>
<msg timestamp="20221117 03:54:15.312" level="INFO">${delete_status} = False</msg>
<status status="PASS" starttime="20221117 03:54:14.514" endtime="20221117 03:54:15.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${False}'</arg>
<arg>ELSE</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${True}'</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>'${delete_status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:15.314" endtime="20221117 03:54:15.315"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:15.313" endtime="20221117 03:54:15.315"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:54:15.397" level="INFO">#(CST) 2022/11/17 03:54:15.397402 -    0.129660 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:54:15.414" level="INFO">#(CST) 2022/11/17 03:54:15.414323 -    0.016921 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:54:15.415" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:15.415" level="INFO">#(CST) 2022/11/17 03:54:15.414617 -    0.000294 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:15.415" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:15.415" level="INFO">#(CST) 2022/11/17 03:54:15.415029 -    0.000412 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:15.425" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:15.430" level="INFO">#(CST) 2022/11/17 03:54:15.429969 -    0.014940 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:15.430" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:15.461" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:15.461" level="INFO">#(CST) 2022/11/17 03:54:15.461120 -    0.031151 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:15.461" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:15.474" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:15.474" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:54:15.559" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:15.559" level="INFO">#(CST) 2022/11/17 03:54:15.558662 -    0.097542 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:15.569" level="INFO">#(CST) 2022/11/17 03:54:15.568399 -    0.009737 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:15.581" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:15.597" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:54:15.317" endtime="20221117 03:54:15.597"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:54:15.614" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:54:15.629" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014624767005443573 seconds.</msg>
<msg timestamp="20221117 03:54:15.629" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:54:15.598" endtime="20221117 03:54:15.630"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:54:15.631" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:54:15.630" endtime="20221117 03:54:15.631"></status>
</kw>
<msg timestamp="20221117 03:54:15.632" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:54:15.316" endtime="20221117 03:54:15.632"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:54:15.736" level="INFO">#(CST) 2022/11/17 03:54:15.735462 -    0.167063 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:54:15.754" level="INFO">#(CST) 2022/11/17 03:54:15.754157 -    0.018695 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:54:15.754" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:15.755" level="INFO">#(CST) 2022/11/17 03:54:15.754483 -    0.000325 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:15.755" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:15.755" level="INFO">#(CST) 2022/11/17 03:54:15.754924 -    0.000441 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:15.766" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:15.771" level="INFO">#(CST) 2022/11/17 03:54:15.771407 -    0.016484 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:15.772" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:15.805" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:15.805" level="INFO">#(CST) 2022/11/17 03:54:15.804863 -    0.033456 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:15.805" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:15.819" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:15.819" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:54:15.903" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:15.903" level="INFO">#(CST) 2022/11/17 03:54:15.903249 -    0.098386 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:15.913" level="INFO">#(CST) 2022/11/17 03:54:15.913221 -    0.009972 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:15.925" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:15.942" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:54:15.634" endtime="20221117 03:54:15.942"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:54:15.944" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:54:15.943" endtime="20221117 03:54:15.944"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:54:16.030" level="INFO">#(CST) 2022/11/17 03:54:16.030030 -    0.116809 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:54:16.047" level="INFO">#(CST) 2022/11/17 03:54:16.046819 -    0.016789 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:54:16.047" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:16.047" level="INFO">#(CST) 2022/11/17 03:54:16.047121 -    0.000302 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:16.047" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:16.048" level="INFO">#(CST) 2022/11/17 03:54:16.047519 -    0.000399 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:16.058" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:16.063" level="INFO">#(CST) 2022/11/17 03:54:16.062460 -    0.014941 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:16.063" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:16.094" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:16.094" level="INFO">#(CST) 2022/11/17 03:54:16.093971 -    0.031511 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:16.094" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:16.107" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:16.107" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:54:16.192" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:16.192" level="INFO">#(CST) 2022/11/17 03:54:16.192111 -    0.098140 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:16.203" level="INFO">#(CST) 2022/11/17 03:54:16.202618 -    0.010508 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:16.215" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:16.230" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:54:16.230" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:54:16.230" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:54:15.944" endtime="20221117 03:54:16.230"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:54:16.232" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:54:16.232" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:54:16.231" endtime="20221117 03:54:16.232"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:54:16.233" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:54:16.233" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:16.232" endtime="20221117 03:54:16.233"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:54:16.234" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:54:16.234" endtime="20221117 03:54:16.234"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:54:16.236" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:16.235" endtime="20221117 03:54:16.236"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:54:16.237" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:54:16.236" endtime="20221117 03:54:16.237"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:16.237" endtime="20221117 03:54:16.238"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:16.235" endtime="20221117 03:54:16.238"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:54:16.239" level="INFO">@{if_info} = [ inet | 10.7.7.8/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:16.239" endtime="20221117 03:54:16.239"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:54:16.240" level="INFO">${ip_n_prefix} = 10.7.7.8/16</msg>
<status status="PASS" starttime="20221117 03:54:16.240" endtime="20221117 03:54:16.240"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:16.241" endtime="20221117 03:54:16.241"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:16.238" endtime="20221117 03:54:16.241"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:54:16.243" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:16.242" endtime="20221117 03:54:16.243"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:54:16.244" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:54:16.243" endtime="20221117 03:54:16.244"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:16.244" endtime="20221117 03:54:16.245"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:16.242" endtime="20221117 03:54:16.245"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:16.234" endtime="20221117 03:54:16.245"></status>
</kw>
<msg timestamp="20221117 03:54:16.245" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.8/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:54:15.633" endtime="20221117 03:54:16.245"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:16.246" endtime="20221117 03:54:16.247"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:16.246" endtime="20221117 03:54:16.247"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:16.248" endtime="20221117 03:54:16.249"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:16.247" endtime="20221117 03:54:16.249"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:16.245" endtime="20221117 03:54:16.249"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:15.315" endtime="20221117 03:54:16.249"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.858" endtime="20221117 03:54:16.249"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.857" endtime="20221117 03:54:16.249"></status>
</kw>
<kw name="${ip} = 10.7.7.8" type="foritem">
<kw name="Delete IP Address" library="bmc_network_utils">
<doc>Delete IP Address Of BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:54:16.251" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:54:16.251" endtime="20221117 03:54:16.251"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:54:16.252" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:54:16.252" endtime="20221117 03:54:16.252"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:54:16.334" level="INFO">#(CST) 2022/11/17 03:54:16.333963 -    0.131344 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:54:16.350" level="INFO">#(CST) 2022/11/17 03:54:16.350084 -    0.016121 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:54:16.350" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:16.350" level="INFO">#(CST) 2022/11/17 03:54:16.350369 -    0.000285 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:16.351" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:16.351" level="INFO">#(CST) 2022/11/17 03:54:16.350752 -    0.000383 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:16.361" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:16.365" level="INFO">#(CST) 2022/11/17 03:54:16.365138 -    0.014386 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:16.365" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:16.395" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:16.395" level="INFO">#(CST) 2022/11/17 03:54:16.395311 -    0.030173 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:16.395" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:16.408" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:16.408" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:54:16.492" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:16.493" level="INFO">#(CST) 2022/11/17 03:54:16.492508 -    0.097197 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:16.502" level="INFO">#(CST) 2022/11/17 03:54:16.501910 -    0.009403 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:16.513" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:16.530" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:54:16.254" endtime="20221117 03:54:16.530"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:54:16.545" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:54:16.559" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.013790769036859274 seconds.</msg>
<msg timestamp="20221117 03:54:16.559" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:54:16.530" endtime="20221117 03:54:16.560"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:54:16.561" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:54:16.560" endtime="20221117 03:54:16.561"></status>
</kw>
<msg timestamp="20221117 03:54:16.561" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:54:16.253" endtime="20221117 03:54:16.562"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:16.564" endtime="20221117 03:54:16.564"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:16.562" endtime="20221117 03:54:16.564"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:16.562" endtime="20221117 03:54:16.564"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:16.566" endtime="20221117 03:54:16.567"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:16.565" endtime="20221117 03:54:16.567"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:16.565" endtime="20221117 03:54:16.567"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:16.562" endtime="20221117 03:54:16.567"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<assign>
<var>${ip_found}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:16.568" endtime="20221117 03:54:16.569"></status>
</kw>
<msg timestamp="20221117 03:54:16.569" level="INFO">${ip_found} = True</msg>
<status status="PASS" starttime="20221117 03:54:16.568" endtime="20221117 03:54:16.569"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>${ip_found} == ${False}</arg>
<arg>${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:16.570" endtime="20221117 03:54:16.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:54:16.571" level="INFO">${data} = {'IPv4StaticAddresses': [None, {}]}</msg>
<status status="PASS" starttime="20221117 03:54:16.571" endtime="20221117 03:54:16.572"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:54:16.653" level="INFO">#(CST) 2022/11/17 03:54:16.652476 -    0.150566 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:54:16.669" level="INFO">#(CST) 2022/11/17 03:54:16.669230 -    0.016753 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:54:16.669" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:16.670" level="INFO">#(CST) 2022/11/17 03:54:16.669539 -    0.000309 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:16.670" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:16.670" level="INFO">#(CST) 2022/11/17 03:54:16.669962 -    0.000423 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:16.680" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:16.685" level="INFO">#(CST) 2022/11/17 03:54:16.684997 -    0.015035 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:16.685" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:16.718" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:16.718" level="INFO">#(CST) 2022/11/17 03:54:16.717595 -    0.032598 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:16.718" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:16.731" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:16.731" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:54:16.815" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:16.815" level="INFO">#(CST) 2022/11/17 03:54:16.814945 -    0.097350 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:16.824" level="INFO">#(CST) 2022/11/17 03:54:16.823657 -    0.008712 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:16.835" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:16.851" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:54:16.572" endtime="20221117 03:54:16.851"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:54:16.852" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:54:16.851" endtime="20221117 03:54:16.852"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:54:16.867" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:54:16.897" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.02984942588955164 seconds.</msg>
<status status="PASS" starttime="20221117 03:54:16.853" endtime="20221117 03:54:16.897"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:54:34.899" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:54:16.898" endtime="20221117 03:54:34.899"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:54:34.905" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:54:34.904" endtime="20221117 03:54:34.905"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:54:34.912" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:54:37.938" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:54:37.938" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=1.25 ms
64 bytes from rain40bmc.aus.stglabs.i...</msg>
<status status="PASS" starttime="20221117 03:54:34.905" endtime="20221117 03:54:37.938"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:54:37.941" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=1.25 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=2.02 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=2.01 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=1.65 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 1.250/1.735/2.022/0.319 ms</msg>
<status status="PASS" starttime="20221117 03:54:37.940" endtime="20221117 03:54:37.941"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:37.942" endtime="20221117 03:54:37.946"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:34.903" endtime="20221117 03:54:37.946"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:34.902" endtime="20221117 03:54:37.947"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:34.900" endtime="20221117 03:54:37.947"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify IP On BMC</arg>
<arg>${ip}</arg>
</arguments>
<assign>
<var>${delete_status}</var>
</assign>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:54:38.058" level="INFO">#(CST) 2022/11/17 03:54:38.058134 -   21.234477 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:54:38.077" level="INFO">#(CST) 2022/11/17 03:54:38.076996 -    0.018862 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:54:38.077" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:38.077" level="INFO">#(CST) 2022/11/17 03:54:38.077372 -    0.000376 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:38.078" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:38.078" level="INFO">#(CST) 2022/11/17 03:54:38.077844 -    0.000472 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:38.089" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:38.094" level="INFO">#(CST) 2022/11/17 03:54:38.094391 -    0.016547 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:38.095" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:38.128" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:38.128" level="INFO">#(CST) 2022/11/17 03:54:38.128015 -    0.033624 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:38.128" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:38.142" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:38.143" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:54:38.230" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:38.231" level="INFO">#(CST) 2022/11/17 03:54:38.230598 -    0.102583 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:38.241" level="INFO">#(CST) 2022/11/17 03:54:38.241171 -    0.010574 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:38.253" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:38.268" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:54:37.951" endtime="20221117 03:54:38.268"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:54:38.269" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:54:38.269" endtime="20221117 03:54:38.269"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:54:38.350" level="INFO">#(CST) 2022/11/17 03:54:38.350093 -    0.108921 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:54:38.366" level="INFO">#(CST) 2022/11/17 03:54:38.366064 -    0.015971 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:54:38.366" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:38.366" level="INFO">#(CST) 2022/11/17 03:54:38.366349 -    0.000284 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:38.367" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:38.367" level="INFO">#(CST) 2022/11/17 03:54:38.366717 -    0.000368 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:38.376" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:38.381" level="INFO">#(CST) 2022/11/17 03:54:38.381211 -    0.014494 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:38.381" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:38.412" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:38.412" level="INFO">#(CST) 2022/11/17 03:54:38.412072 -    0.030862 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:38.412" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:38.426" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:38.426" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:54:38.522" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:38.522" level="INFO">#(CST) 2022/11/17 03:54:38.521885 -    0.109812 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:38.528" level="INFO">#(CST) 2022/11/17 03:54:38.527912 -    0.006027 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:38.535" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:38.544" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:54:38.544" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:54:38.544" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:54:38.270" endtime="20221117 03:54:38.544"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:54:38.545" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:54:38.545" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:54:38.544" endtime="20221117 03:54:38.545"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:54:38.545" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:54:38.545" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:38.545" endtime="20221117 03:54:38.545"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:54:38.546" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:54:38.546" endtime="20221117 03:54:38.546"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:54:38.547" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:38.547" endtime="20221117 03:54:38.547"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:54:38.548" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:54:38.547" endtime="20221117 03:54:38.548"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:38.548" endtime="20221117 03:54:38.548"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:38.546" endtime="20221117 03:54:38.548"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:54:38.549" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:38.549" endtime="20221117 03:54:38.549"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:54:38.550" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:54:38.549" endtime="20221117 03:54:38.550"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:38.550" endtime="20221117 03:54:38.550"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:38.548" endtime="20221117 03:54:38.550"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:38.546" endtime="20221117 03:54:38.550"></status>
</kw>
<msg timestamp="20221117 03:54:38.551" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:54:37.949" endtime="20221117 03:54:38.551"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<msg timestamp="20221117 03:54:38.552" level="FAIL">IP address does not exist.</msg>
<status status="FAIL" starttime="20221117 03:54:38.551" endtime="20221117 03:54:38.552"></status>
</kw>
<status status="FAIL" starttime="20221117 03:54:37.948" endtime="20221117 03:54:38.552"></status>
</kw>
<msg timestamp="20221117 03:54:38.552" level="INFO">${delete_status} = False</msg>
<status status="PASS" starttime="20221117 03:54:37.948" endtime="20221117 03:54:38.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${False}'</arg>
<arg>ELSE</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${True}'</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>'${delete_status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:38.553" endtime="20221117 03:54:38.553"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:38.552" endtime="20221117 03:54:38.553"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:54:38.614" level="INFO">#(CST) 2022/11/17 03:54:38.613609 -    0.085698 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:54:38.627" level="INFO">#(CST) 2022/11/17 03:54:38.627255 -    0.013645 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:54:38.627" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:38.628" level="INFO">#(CST) 2022/11/17 03:54:38.627517 -    0.000262 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:38.628" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:38.628" level="INFO">#(CST) 2022/11/17 03:54:38.627859 -    0.000342 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:38.637" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:38.641" level="INFO">#(CST) 2022/11/17 03:54:38.640675 -    0.012816 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:38.641" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:38.671" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:38.671" level="INFO">#(CST) 2022/11/17 03:54:38.670783 -    0.030108 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:38.671" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:38.684" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:38.684" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:54:38.770" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:38.771" level="INFO">#(CST) 2022/11/17 03:54:38.770573 -    0.099790 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:38.777" level="INFO">#(CST) 2022/11/17 03:54:38.777375 -    0.006802 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:38.786" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:38.797" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:54:38.555" endtime="20221117 03:54:38.798"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:54:38.809" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:54:38.828" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.017754411324858665 seconds.</msg>
<msg timestamp="20221117 03:54:38.828" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:54:38.798" endtime="20221117 03:54:38.828"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:54:38.830" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:54:38.829" endtime="20221117 03:54:38.830"></status>
</kw>
<msg timestamp="20221117 03:54:38.830" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:54:38.554" endtime="20221117 03:54:38.830"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:54:38.925" level="INFO">#(CST) 2022/11/17 03:54:38.924506 -    0.147131 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:54:38.943" level="INFO">#(CST) 2022/11/17 03:54:38.942457 -    0.017951 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:54:38.943" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:38.943" level="INFO">#(CST) 2022/11/17 03:54:38.942774 -    0.000317 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:38.943" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:38.943" level="INFO">#(CST) 2022/11/17 03:54:38.943200 -    0.000426 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:38.954" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:38.959" level="INFO">#(CST) 2022/11/17 03:54:38.959076 -    0.015877 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:38.959" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:38.993" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:38.993" level="INFO">#(CST) 2022/11/17 03:54:38.993199 -    0.034123 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:38.993" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:39.007" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:39.007" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:54:39.094" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:39.094" level="INFO">#(CST) 2022/11/17 03:54:39.093688 -    0.100489 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:39.102" level="INFO">#(CST) 2022/11/17 03:54:39.102327 -    0.008639 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:39.113" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:39.127" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:54:38.831" endtime="20221117 03:54:39.127"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:54:39.129" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:54:39.128" endtime="20221117 03:54:39.129"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:54:39.207" level="INFO">#(CST) 2022/11/17 03:54:39.206509 -    0.104182 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:54:39.222" level="INFO">#(CST) 2022/11/17 03:54:39.222382 -    0.015873 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:54:39.223" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:39.223" level="INFO">#(CST) 2022/11/17 03:54:39.222666 -    0.000284 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:39.223" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:39.223" level="INFO">#(CST) 2022/11/17 03:54:39.223049 -    0.000382 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:39.233" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:39.237" level="INFO">#(CST) 2022/11/17 03:54:39.237428 -    0.014380 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:39.238" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:39.268" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:39.268" level="INFO">#(CST) 2022/11/17 03:54:39.268324 -    0.030896 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:39.268" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:39.281" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:39.281" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:54:39.378" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:39.378" level="INFO">#(CST) 2022/11/17 03:54:39.378192 -    0.109868 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:39.386" level="INFO">#(CST) 2022/11/17 03:54:39.385921 -    0.007729 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:39.395" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:39.407" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:54:39.407" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:54:39.407" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:54:39.129" endtime="20221117 03:54:39.407"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:54:39.408" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:54:39.408" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:54:39.407" endtime="20221117 03:54:39.408"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:54:39.409" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:54:39.409" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:39.409" endtime="20221117 03:54:39.409"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:54:39.410" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:54:39.410" endtime="20221117 03:54:39.410"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:54:39.411" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:39.411" endtime="20221117 03:54:39.411"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:54:39.412" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:54:39.411" endtime="20221117 03:54:39.412"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:39.412" endtime="20221117 03:54:39.413"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:39.410" endtime="20221117 03:54:39.413"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:54:39.414" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:39.413" endtime="20221117 03:54:39.414"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:54:39.414" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:54:39.414" endtime="20221117 03:54:39.414"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:39.415" endtime="20221117 03:54:39.415"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:39.413" endtime="20221117 03:54:39.415"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:39.410" endtime="20221117 03:54:39.415"></status>
</kw>
<msg timestamp="20221117 03:54:39.416" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:54:38.831" endtime="20221117 03:54:39.416"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:39.416" endtime="20221117 03:54:39.417"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:39.416" endtime="20221117 03:54:39.417"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:39.416" endtime="20221117 03:54:39.417"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:38.554" endtime="20221117 03:54:39.417"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:16.250" endtime="20221117 03:54:39.417"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:16.249" endtime="20221117 03:54:39.417"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.857" endtime="20221117 03:54:39.417"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:54:39.487" level="INFO">#(CST) 2022/11/17 03:54:39.487325 -    0.101405 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:54:39.502" level="INFO">#(CST) 2022/11/17 03:54:39.502155 -    0.014830 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:54:39.502" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:39.502" level="INFO">#(CST) 2022/11/17 03:54:39.502432 -    0.000277 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:39.503" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:39.503" level="INFO">#(CST) 2022/11/17 03:54:39.502790 -    0.000358 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:39.512" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:39.516" level="INFO">#(CST) 2022/11/17 03:54:39.516057 -    0.013268 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:39.516" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:39.546" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:39.546" level="INFO">#(CST) 2022/11/17 03:54:39.546016 -    0.029958 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:39.546" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:39.558" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:39.558" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:54:39.645" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:39.645" level="INFO">#(CST) 2022/11/17 03:54:39.644718 -    0.098703 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:39.654" level="INFO">#(CST) 2022/11/17 03:54:39.653453 -    0.008735 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:39.664" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:39.680" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:54:39.419" endtime="20221117 03:54:39.680"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:54:39.694" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:54:39.709" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014209988992661238 seconds.</msg>
<msg timestamp="20221117 03:54:39.709" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:54:39.681" endtime="20221117 03:54:39.709"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:54:39.711" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:54:39.710" endtime="20221117 03:54:39.711"></status>
</kw>
<msg timestamp="20221117 03:54:39.712" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:54:39.418" endtime="20221117 03:54:39.712"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:54:39.808" level="INFO">#(CST) 2022/11/17 03:54:39.807783 -    0.154330 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:54:39.826" level="INFO">#(CST) 2022/11/17 03:54:39.825938 -    0.018155 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:54:39.826" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:39.826" level="INFO">#(CST) 2022/11/17 03:54:39.826260 -    0.000322 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:39.827" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:39.827" level="INFO">#(CST) 2022/11/17 03:54:39.826686 -    0.000426 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:39.838" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:39.843" level="INFO">#(CST) 2022/11/17 03:54:39.842676 -    0.015990 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:39.843" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:39.878" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:39.878" level="INFO">#(CST) 2022/11/17 03:54:39.877707 -    0.035030 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:39.878" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:39.892" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:39.892" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:54:39.979" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:39.979" level="INFO">#(CST) 2022/11/17 03:54:39.978734 -    0.101027 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:39.988" level="INFO">#(CST) 2022/11/17 03:54:39.987645 -    0.008911 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:39.999" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:40.015" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:54:39.713" endtime="20221117 03:54:40.015"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:54:40.017" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:54:40.016" endtime="20221117 03:54:40.017"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:54:40.097" level="INFO">#(CST) 2022/11/17 03:54:40.096577 -    0.108932 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:54:40.113" level="INFO">#(CST) 2022/11/17 03:54:40.112889 -    0.016312 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:54:40.113" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:40.113" level="INFO">#(CST) 2022/11/17 03:54:40.113195 -    0.000306 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:40.114" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:40.114" level="INFO">#(CST) 2022/11/17 03:54:40.113605 -    0.000410 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:40.124" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:40.128" level="INFO">#(CST) 2022/11/17 03:54:40.128114 -    0.014509 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:40.128" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:40.159" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:40.160" level="INFO">#(CST) 2022/11/17 03:54:40.159524 -    0.031410 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:40.160" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:40.172" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:40.173" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:54:40.259" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:40.259" level="INFO">#(CST) 2022/11/17 03:54:40.259249 -    0.099725 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:40.269" level="INFO">#(CST) 2022/11/17 03:54:40.268407 -    0.009158 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:40.280" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:40.294" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:54:40.294" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:54:40.294" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:54:40.017" endtime="20221117 03:54:40.294"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:54:40.295" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:54:40.295" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:54:40.294" endtime="20221117 03:54:40.295"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:54:40.296" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:54:40.296" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:40.296" endtime="20221117 03:54:40.296"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:54:40.297" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:54:40.297" endtime="20221117 03:54:40.297"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:54:40.299" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:40.298" endtime="20221117 03:54:40.299"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:54:40.300" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:54:40.300" endtime="20221117 03:54:40.300"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:40.301" endtime="20221117 03:54:40.301"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:40.298" endtime="20221117 03:54:40.301"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:54:40.302" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:40.302" endtime="20221117 03:54:40.302"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:54:40.303" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:54:40.303" endtime="20221117 03:54:40.303"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:40.304" endtime="20221117 03:54:40.304"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:40.301" endtime="20221117 03:54:40.304"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:40.297" endtime="20221117 03:54:40.305"></status>
</kw>
<msg timestamp="20221117 03:54:40.305" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:54:39.712" endtime="20221117 03:54:40.305"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:40.306" endtime="20221117 03:54:40.307"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:40.305" endtime="20221117 03:54:40.307"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:40.305" endtime="20221117 03:54:40.307"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:39.418" endtime="20221117 03:54:40.307"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.857" endtime="20221117 03:54:40.307"></status>
</kw>
<kw name="Test Teardown Execution">
<doc>Test teardown execution.</doc>
<kw name="Logout" library="Redfish">
<doc>Logout of session. YOU MUST CALL THIS WHEN YOU ARE DONE TO FREE</doc>
<msg timestamp="20221117 03:54:40.321" level="INFO">Attempt 1 of /redfish/v1/SessionService/Sessions/hGcTZK5qFR</msg>
<msg timestamp="20221117 03:54:40.332" level="INFO">Response Time to /redfish/v1/SessionService/Sessions/hGcTZK5qFR: 0.010567655321210623 seconds.</msg>
<msg timestamp="20221117 03:54:40.333" level="INFO">User logged out: {
  "@Message.ExtendedInfo": [
    {
      "@odata.type": "#Message.v1_1_1.Message",
      "Message": "Successfully Completed Request",
      "MessageArgs": [],
      "MessageId": "Base.1.8.1.Success",
      "MessageSeverity": "OK",
      "Resolution": "None"
    }
  ]
}</msg>
<status status="PASS" starttime="20221117 03:54:40.308" endtime="20221117 03:54:40.333"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:40.307" endtime="20221117 03:54:40.333"></status>
</kw>
<status status="PASS" starttime="20221117 03:53:52.856" endtime="20221117 03:54:40.333"></status>
</kw>
<doc>Configure multiple static ipv4 address via Redfish and verify.</doc>
<tags>
<tag>Configure_And_Verify_Multiple_Static_IPv4_Addresses</tag>
<tag>Network_Conf_Test</tag>
</tags>
<status status="PASS" starttime="20221117 03:53:04.835" endtime="20221117 03:54:40.333" critical="yes"></status>
</test>
<test id="s1-t3" name="Configure And Verify Multiple IPv4 Addresses">
<kw name="Test Setup Execution" type="setup">
<doc>Test setup execution.</doc>
<kw name="Login" library="Redfish">
<doc>Assign BMC default values for username, password and auth arguments
and call parent class login method.</doc>
<msg timestamp="20221117 03:54:40.352" level="INFO">Attempt 1 of /redfish/v1/SessionService/Sessions</msg>
<msg timestamp="20221117 03:54:40.399" level="INFO">Response Time to /redfish/v1/SessionService/Sessions: 0.04723830474540591 seconds.</msg>
<msg timestamp="20221117 03:54:40.400" level="INFO">{'@odata.id': '/redfish/v1/SessionService/Sessions/rUmYg7tvtg', '@odata.type': '#Session.v1_5_0.Session', 'ClientOriginIPAddress': '::ffff:9.3.84.152', 'Description': 'Manager User Session', 'Id': 'rUmYg7tvtg', 'Name': 'User Session', 'Oem': {'OpenBMC': {'@odata.type': '#OemSession.v1_0_0.Session', 'ClientID': ''}}, 'UserName': 'service'}</msg>
<msg timestamp="20221117 03:54:40.400" level="INFO">Login returned code 201: {
  "@odata.id": "/redfish/v1/SessionService/Sessions/rUmYg7tvtg",
  "@odata.type": "#Session.v1_5_0.Session",
  "ClientOriginIPAddress": "::ffff:9.3.84.152",
  "Description": "Manager User Session",
  "Id": "rUmYg7tvtg",
  "Name": "User Session",
  "Oem": {
    "OpenBMC": {
      "@odata.type": "#OemSession.v1_0_0.Session",
      "ClientID": ""
    }
  },
  "UserName": "service"
}</msg>
<status status="PASS" starttime="20221117 03:54:40.336" endtime="20221117 03:54:40.400"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:54:40.489" level="INFO">#(CST) 2022/11/17 03:54:40.488583 -    0.220176 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:54:40.506" level="INFO">#(CST) 2022/11/17 03:54:40.506304 -    0.017721 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:54:40.507" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:40.507" level="INFO">#(CST) 2022/11/17 03:54:40.506627 -    0.000323 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:40.507" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:40.507" level="INFO">#(CST) 2022/11/17 03:54:40.507190 -    0.000563 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:40.518" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:40.522" level="INFO">#(CST) 2022/11/17 03:54:40.522409 -    0.015219 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:40.523" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:40.556" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:40.556" level="INFO">#(CST) 2022/11/17 03:54:40.555931 -    0.033522 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:40.556" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:40.569" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:40.569" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:54:40.656" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:40.656" level="INFO">#(CST) 2022/11/17 03:54:40.655758 -    0.099827 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:40.664" level="INFO">#(CST) 2022/11/17 03:54:40.663718 -    0.007960 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:40.674" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:40.689" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:54:40.402" endtime="20221117 03:54:40.689"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:54:40.702" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:54:40.717" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014418568927794695 seconds.</msg>
<msg timestamp="20221117 03:54:40.718" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:54:40.690" endtime="20221117 03:54:40.718"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:54:40.719" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:54:40.718" endtime="20221117 03:54:40.719"></status>
</kw>
<msg timestamp="20221117 03:54:40.719" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:54:40.400" endtime="20221117 03:54:40.719"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{network_configurations}</arg>
</arguments>
<msg timestamp="20221117 03:54:40.720" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:54:40.720" endtime="20221117 03:54:40.720"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:54:40.787" level="INFO">#(CST) 2022/11/17 03:54:40.787401 -    0.123683 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:54:40.802" level="INFO">#(CST) 2022/11/17 03:54:40.802368 -    0.014967 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:54:40.803" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:40.803" level="INFO">#(CST) 2022/11/17 03:54:40.802678 -    0.000310 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:40.803" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:40.803" level="INFO">#(CST) 2022/11/17 03:54:40.803087 -    0.000410 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:40.813" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:40.817" level="INFO">#(CST) 2022/11/17 03:54:40.816507 -    0.013420 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:40.817" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:40.848" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:40.849" level="INFO">#(CST) 2022/11/17 03:54:40.848517 -    0.032010 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:40.849" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:40.860" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:40.861" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:54:40.945" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:40.946" level="INFO">#(CST) 2022/11/17 03:54:40.945584 -    0.097067 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:40.954" level="INFO">#(CST) 2022/11/17 03:54:40.953522 -    0.007938 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:40.964" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:40.980" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:54:40.721" endtime="20221117 03:54:40.980"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:54:40.981" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:54:40.980" endtime="20221117 03:54:40.981"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:54:41.053" level="INFO">#(CST) 2022/11/17 03:54:41.053339 -    0.099817 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:54:41.069" level="INFO">#(CST) 2022/11/17 03:54:41.069247 -    0.015908 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:54:41.069" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:41.070" level="INFO">#(CST) 2022/11/17 03:54:41.069571 -    0.000324 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:41.070" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:41.070" level="INFO">#(CST) 2022/11/17 03:54:41.070053 -    0.000482 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:41.080" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:41.084" level="INFO">#(CST) 2022/11/17 03:54:41.084061 -    0.014008 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:41.084" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:41.116" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:41.116" level="INFO">#(CST) 2022/11/17 03:54:41.115601 -    0.031540 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:41.116" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:41.128" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:41.128" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:54:41.215" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:41.215" level="INFO">#(CST) 2022/11/17 03:54:41.215124 -    0.099523 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:41.223" level="INFO">#(CST) 2022/11/17 03:54:41.222960 -    0.007836 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:41.233" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:41.246" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:54:41.247" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:54:41.247" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:54:40.982" endtime="20221117 03:54:41.247"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:54:41.248" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:54:41.248" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:54:41.247" endtime="20221117 03:54:41.248"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:54:41.249" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:54:41.249" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:41.248" endtime="20221117 03:54:41.249"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:54:41.250" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:54:41.250" endtime="20221117 03:54:41.250"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:54:41.252" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:41.251" endtime="20221117 03:54:41.252"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:54:41.253" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:54:41.252" endtime="20221117 03:54:41.253"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:41.253" endtime="20221117 03:54:41.254"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:41.251" endtime="20221117 03:54:41.254"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:54:41.255" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:54:41.254" endtime="20221117 03:54:41.255"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:54:41.256" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:54:41.256" endtime="20221117 03:54:41.256"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:41.257" endtime="20221117 03:54:41.257"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:41.254" endtime="20221117 03:54:41.257"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:41.250" endtime="20221117 03:54:41.257"></status>
</kw>
<msg timestamp="20221117 03:54:41.258" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:54:40.721" endtime="20221117 03:54:41.258"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${ip_data}</arg>
</arguments>
<msg timestamp="20221117 03:54:41.259" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:54:41.258" endtime="20221117 03:54:41.259"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:40.335" endtime="20221117 03:54:41.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Address=${test_ipv4_addr}</arg>
<arg>SubnetMask=255.255.0.0</arg>
<arg>Gateway=${test_gateway}</arg>
</arguments>
<assign>
<var>${ip1}</var>
</assign>
<msg timestamp="20221117 03:54:41.260" level="INFO">${ip1} = {'Address': '10.7.7.7', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}</msg>
<status status="PASS" starttime="20221117 03:54:41.260" endtime="20221117 03:54:41.261"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Address=${test_ipv4_addr2}</arg>
<arg>SubnetMask=255.255.252.0</arg>
<arg>Gateway=${test_gateway}</arg>
</arguments>
<assign>
<var>${ip2}</var>
</assign>
<msg timestamp="20221117 03:54:41.262" level="INFO">${ip2} = {'Address': '10.7.7.8', 'SubnetMask': '255.255.252.0', 'Gateway': '9.41.164.1'}</msg>
<status status="PASS" starttime="20221117 03:54:41.261" endtime="20221117 03:54:41.262"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:54:41.263" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:54:41.263" endtime="20221117 03:54:41.263"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:54:41.264" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:54:41.264" endtime="20221117 03:54:41.264"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>${network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:54:41.331" level="INFO">#(CST) 2022/11/17 03:54:41.330584 -    0.107625 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:54:41.346" level="INFO">#(CST) 2022/11/17 03:54:41.345518 -    0.014934 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:54:41.346" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:41.346" level="INFO">#(CST) 2022/11/17 03:54:41.345838 -    0.000319 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:41.346" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:41.346" level="INFO">#(CST) 2022/11/17 03:54:41.346268 -    0.000430 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:41.356" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:41.360" level="INFO">#(CST) 2022/11/17 03:54:41.359583 -    0.013315 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:41.360" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:41.390" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:41.390" level="INFO">#(CST) 2022/11/17 03:54:41.390360 -    0.030777 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:41.391" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:41.402" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:41.402" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:54:41.490" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:41.491" level="INFO">#(CST) 2022/11/17 03:54:41.490538 -    0.100178 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:41.499" level="INFO">#(CST) 2022/11/17 03:54:41.498775 -    0.008236 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:41.509" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:41.524" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:54:41.265" endtime="20221117 03:54:41.524"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:54:41.537" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:54:41.552" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014793940354138613 seconds.</msg>
<msg timestamp="20221117 03:54:41.553" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:54:41.525" endtime="20221117 03:54:41.553"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:54:41.554" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:54:41.553" endtime="20221117 03:54:41.554"></status>
</kw>
<msg timestamp="20221117 03:54:41.554" level="INFO">${network_configurations} = [{'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}]</msg>
<status status="PASS" starttime="20221117 03:54:41.264" endtime="20221117 03:54:41.555"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${network_configurations}</arg>
</arguments>
<assign>
<var>${num_entries}</var>
</assign>
<msg timestamp="20221117 03:54:41.555" level="INFO">Length is 1</msg>
<msg timestamp="20221117 03:54:41.556" level="INFO">${num_entries} = 1</msg>
<status status="PASS" starttime="20221117 03:54:41.555" endtime="20221117 03:54:41.556"></status>
</kw>
<kw name="${INDEX} IN RANGE [ 0 | ${num_entries} ]" type="for">
<kw name="${INDEX} = 0" type="foritem">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:41.557" endtime="20221117 03:54:41.557"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:41.556" endtime="20221117 03:54:41.557"></status>
</kw>
<status status="PASS" starttime="20221117 03:54:41.556" endtime="20221117 03:54:41.557"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip1}</arg>
<arg>${ip2}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:54:41.558" endtime="20221117 03:54:41.558"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20221117 03:54:41.560" level="INFO">${payload} = {'IPv4StaticAddresses': [{}, {'Address': '10.7.7.7', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}, {'Address': '10.7.7.8', 'SubnetMask': '255.255.252.0', 'Gateway': '9.41.164.1'}]}</msg>
<status status="PASS" starttime="20221117 03:54:41.559" endtime="20221117 03:54:41.560"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:54:41.621" level="INFO">#(CST) 2022/11/17 03:54:41.620657 -    0.121882 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:54:41.635" level="INFO">#(CST) 2022/11/17 03:54:41.634924 -    0.014267 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:54:41.635" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:54:41.635" level="INFO">#(CST) 2022/11/17 03:54:41.635227 -    0.000303 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:54:41.636" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:54:41.636" level="INFO">#(CST) 2022/11/17 03:54:41.635634 -    0.000407 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:54:41.645" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:54:41.649" level="INFO">#(CST) 2022/11/17 03:54:41.648422 -    0.012789 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:54:41.649" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:54:41.679" level="INFO">children:
</msg>
<msg timestamp="20221117 03:54:41.679" level="INFO">#(CST) 2022/11/17 03:54:41.679164 -    0.030741 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:54:41.679" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:54:41.691" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:54:41.691" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:54:41.781" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:54:41.781" level="INFO">#(CST) 2022/11/17 03:54:41.780656 -    0.101493 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:54:41.788" level="INFO">#(CST) 2022/11/17 03:54:41.787818 -    0.007162 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:54:41.798" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:54:41.813" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:54:41.560" endtime="20221117 03:54:41.813"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:54:41.814" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:54:41.813" endtime="20221117 03:54:41.814"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{payload}</arg>
<arg>valid_status_codes=[${HTTP_OK}, ${HTTP_NO_CONTENT}]</arg>
</arguments>
<msg timestamp="20221117 03:54:41.827" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:54:42.244" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.4165884959511459 seconds.</msg>
<status status="PASS" starttime="20221117 03:54:41.815" endtime="20221117 03:54:42.244"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:55:00.246" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:54:42.245" endtime="20221117 03:55:00.246"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:55:00.251" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:55:00.251" endtime="20221117 03:55:00.252"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:55:00.259" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:55:03.276" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:55:03.276" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=1.78 ms
64 bytes from rain40bmc.aus.stglabs.i...</msg>
<status status="PASS" starttime="20221117 03:55:00.252" endtime="20221117 03:55:03.276"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:55:03.279" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=1.78 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=2.60 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.944 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.998 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.944/1.581/2.603/0.676 ms</msg>
<status status="PASS" starttime="20221117 03:55:03.277" endtime="20221117 03:55:03.279"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:03.279" endtime="20221117 03:55:03.280"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:00.250" endtime="20221117 03:55:03.281"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:00.249" endtime="20221117 03:55:03.281"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:00.247" endtime="20221117 03:55:03.281"></status>
</kw>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${test_ipv4_addr}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:55:03.371" level="INFO">#(CST) 2022/11/17 03:55:03.371222 -   21.583404 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:55:03.389" level="INFO">#(CST) 2022/11/17 03:55:03.388931 -    0.017709 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:55:03.389" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:03.389" level="INFO">#(CST) 2022/11/17 03:55:03.389381 -    0.000450 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:03.390" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:03.390" level="INFO">#(CST) 2022/11/17 03:55:03.389906 -    0.000526 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:03.401" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:03.407" level="INFO">#(CST) 2022/11/17 03:55:03.406476 -    0.016570 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:03.407" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:03.443" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:03.443" level="INFO">#(CST) 2022/11/17 03:55:03.442958 -    0.036482 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:03.443" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:03.456" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:03.456" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:55:03.543" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:03.543" level="INFO">#(CST) 2022/11/17 03:55:03.542749 -    0.099791 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:03.551" level="INFO">#(CST) 2022/11/17 03:55:03.550593 -    0.007845 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:03.561" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:03.576" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:55:03.284" endtime="20221117 03:55:03.577"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:55:03.578" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:55:03.577" endtime="20221117 03:55:03.578"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:55:03.651" level="INFO">#(CST) 2022/11/17 03:55:03.650432 -    0.099838 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:55:03.666" level="INFO">#(CST) 2022/11/17 03:55:03.666077 -    0.015646 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:55:03.666" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:03.666" level="INFO">#(CST) 2022/11/17 03:55:03.666406 -    0.000329 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:03.667" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:03.667" level="INFO">#(CST) 2022/11/17 03:55:03.666847 -    0.000441 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:03.677" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:03.681" level="INFO">#(CST) 2022/11/17 03:55:03.680708 -    0.013861 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:03.681" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:03.713" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:03.713" level="INFO">#(CST) 2022/11/17 03:55:03.713073 -    0.032365 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:03.713" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:03.725" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:03.725" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:55:03.812" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:03.812" level="INFO">#(CST) 2022/11/17 03:55:03.812123 -    0.099050 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:03.821" level="INFO">#(CST) 2022/11/17 03:55:03.820366 -    0.008243 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:03.831" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:03.845" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:55:03.845" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:55:03.845" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:55:03.579" endtime="20221117 03:55:03.845"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:55:03.846" level="INFO">4 out of 5 lines matched</msg>
<msg timestamp="20221117 03:55:03.846" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0
    inet 9.41.164.249/24 brd ...</msg>
<status status="PASS" starttime="20221117 03:55:03.846" endtime="20221117 03:55:03.846"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:55:03.847" level="INFO">4 lines returned</msg>
<msg timestamp="20221117 03:55:03.848" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0 |     inet 9.41.164.249...</msg>
<status status="PASS" starttime="20221117 03:55:03.847" endtime="20221117 03:55:03.848"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:55:03.849" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:55:03.848" endtime="20221117 03:55:03.849"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:03.850" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:03.850" endtime="20221117 03:55:03.851"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:03.852" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:55:03.851" endtime="20221117 03:55:03.852"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:03.852" endtime="20221117 03:55:03.853"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:03.849" endtime="20221117 03:55:03.853"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:03.855" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:03.854" endtime="20221117 03:55:03.855"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:03.856" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:55:03.855" endtime="20221117 03:55:03.856"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:03.856" endtime="20221117 03:55:03.857"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:03.853" endtime="20221117 03:55:03.857"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:03.858" level="INFO">@{if_info} = [ inet | 10.7.7.8/22 | brd | 10.7.7.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:03.858" endtime="20221117 03:55:03.858"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:03.859" level="INFO">${ip_n_prefix} = 10.7.7.8/22</msg>
<status status="PASS" starttime="20221117 03:55:03.859" endtime="20221117 03:55:03.859"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:03.860" endtime="20221117 03:55:03.860"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:03.857" endtime="20221117 03:55:03.860"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:03.862" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:03.861" endtime="20221117 03:55:03.862"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:03.863" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:55:03.862" endtime="20221117 03:55:03.863"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:03.863" endtime="20221117 03:55:03.864"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:03.861" endtime="20221117 03:55:03.864"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:03.849" endtime="20221117 03:55:03.864"></status>
</kw>
<msg timestamp="20221117 03:55:03.864" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.7/16 | 10.7.7.8/22 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:55:03.283" endtime="20221117 03:55:03.864"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:03.865" endtime="20221117 03:55:03.866"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:03.282" endtime="20221117 03:55:03.866"></status>
</kw>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${test_ipv4_addr2}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:55:03.938" level="INFO">#(CST) 2022/11/17 03:55:03.937409 -    0.117043 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:55:03.953" level="INFO">#(CST) 2022/11/17 03:55:03.952626 -    0.015217 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:55:03.953" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:03.953" level="INFO">#(CST) 2022/11/17 03:55:03.952944 -    0.000319 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:03.953" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:03.953" level="INFO">#(CST) 2022/11/17 03:55:03.953357 -    0.000412 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:03.963" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:03.967" level="INFO">#(CST) 2022/11/17 03:55:03.966986 -    0.013630 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:03.967" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:03.999" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:03.999" level="INFO">#(CST) 2022/11/17 03:55:03.998715 -    0.031729 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:03.999" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:04.011" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:04.011" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:55:04.107" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:04.107" level="INFO">#(CST) 2022/11/17 03:55:04.106835 -    0.108120 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:04.115" level="INFO">#(CST) 2022/11/17 03:55:04.114773 -    0.007938 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:04.125" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:04.141" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:55:03.868" endtime="20221117 03:55:04.141"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:55:04.142" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:55:04.141" endtime="20221117 03:55:04.142"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:55:04.213" level="INFO">#(CST) 2022/11/17 03:55:04.212672 -    0.097899 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:55:04.228" level="INFO">#(CST) 2022/11/17 03:55:04.228092 -    0.015420 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:55:04.228" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:04.228" level="INFO">#(CST) 2022/11/17 03:55:04.228397 -    0.000305 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:04.229" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:04.229" level="INFO">#(CST) 2022/11/17 03:55:04.228820 -    0.000424 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:04.239" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:04.243" level="INFO">#(CST) 2022/11/17 03:55:04.242642 -    0.013822 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:04.243" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:04.275" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:04.275" level="INFO">#(CST) 2022/11/17 03:55:04.274981 -    0.032339 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:04.275" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:04.287" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:04.287" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:55:04.384" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:04.384" level="INFO">#(CST) 2022/11/17 03:55:04.383701 -    0.108720 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:04.392" level="INFO">#(CST) 2022/11/17 03:55:04.391399 -    0.007698 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:04.402" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:04.414" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:55:04.415" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:55:04.415" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:55:04.143" endtime="20221117 03:55:04.415"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:55:04.416" level="INFO">4 out of 5 lines matched</msg>
<msg timestamp="20221117 03:55:04.416" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0
    inet 9.41.164.249/24 brd ...</msg>
<status status="PASS" starttime="20221117 03:55:04.415" endtime="20221117 03:55:04.416"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:55:04.417" level="INFO">4 lines returned</msg>
<msg timestamp="20221117 03:55:04.417" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0 |     inet 9.41.164.249...</msg>
<status status="PASS" starttime="20221117 03:55:04.417" endtime="20221117 03:55:04.417"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:55:04.418" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:55:04.418" endtime="20221117 03:55:04.418"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:04.420" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:04.419" endtime="20221117 03:55:04.420"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:04.421" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:55:04.420" endtime="20221117 03:55:04.421"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:04.422" endtime="20221117 03:55:04.422"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:04.419" endtime="20221117 03:55:04.422"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:04.423" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:04.423" endtime="20221117 03:55:04.423"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:04.424" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:55:04.424" endtime="20221117 03:55:04.425"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:04.425" endtime="20221117 03:55:04.426"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:04.422" endtime="20221117 03:55:04.426"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:04.427" level="INFO">@{if_info} = [ inet | 10.7.7.8/22 | brd | 10.7.7.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:04.426" endtime="20221117 03:55:04.427"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:04.428" level="INFO">${ip_n_prefix} = 10.7.7.8/22</msg>
<status status="PASS" starttime="20221117 03:55:04.427" endtime="20221117 03:55:04.428"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:04.429" endtime="20221117 03:55:04.429"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:04.426" endtime="20221117 03:55:04.429"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:04.430" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:04.430" endtime="20221117 03:55:04.431"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:04.431" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:55:04.431" endtime="20221117 03:55:04.432"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:04.432" endtime="20221117 03:55:04.432"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:04.429" endtime="20221117 03:55:04.433"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:04.418" endtime="20221117 03:55:04.433"></status>
</kw>
<msg timestamp="20221117 03:55:04.433" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.7/16 | 10.7.7.8/22 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:55:03.867" endtime="20221117 03:55:04.433"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:04.433" endtime="20221117 03:55:04.434"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:03.866" endtime="20221117 03:55:04.434"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete IP Address</arg>
<arg>${test_ipv4_addr}</arg>
<arg>AND</arg>
<arg>Delete IP Address</arg>
<arg>${test_ipv4_addr2}</arg>
<arg>AND</arg>
<arg>Test Teardown Execution</arg>
</arguments>
<kw name="Delete IP Address" library="bmc_network_utils">
<doc>Delete IP Address Of BMC.</doc>
<arguments>
<arg>${test_ipv4_addr}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:55:04.437" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:55:04.437" endtime="20221117 03:55:04.437"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:55:04.438" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:55:04.438" endtime="20221117 03:55:04.438"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:55:04.512" level="INFO">#(CST) 2022/11/17 03:55:04.511691 -    0.120293 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:55:04.527" level="INFO">#(CST) 2022/11/17 03:55:04.527083 -    0.015392 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:55:04.527" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:04.527" level="INFO">#(CST) 2022/11/17 03:55:04.527373 -    0.000290 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:04.528" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:04.528" level="INFO">#(CST) 2022/11/17 03:55:04.527816 -    0.000443 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:04.537" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:04.542" level="INFO">#(CST) 2022/11/17 03:55:04.541533 -    0.013718 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:04.542" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:04.575" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:04.576" level="INFO">#(CST) 2022/11/17 03:55:04.575338 -    0.033804 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:04.576" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:04.604" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:04.604" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:55:04.692" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:04.692" level="INFO">#(CST) 2022/11/17 03:55:04.691914 -    0.116576 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:04.701" level="INFO">#(CST) 2022/11/17 03:55:04.700755 -    0.008841 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:04.712" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:04.731" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:55:04.440" endtime="20221117 03:55:04.731"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:55:04.749" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:55:04.764" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.015038962010294199 seconds.</msg>
<msg timestamp="20221117 03:55:04.765" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:55:04.732" endtime="20221117 03:55:04.765"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:55:04.768" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:55:04.766" endtime="20221117 03:55:04.768"></status>
</kw>
<msg timestamp="20221117 03:55:04.769" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:55:04.439" endtime="20221117 03:55:04.769"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:04.773" endtime="20221117 03:55:04.774"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:04.771" endtime="20221117 03:55:04.774"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:04.770" endtime="20221117 03:55:04.774"></status>
</kw>
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.252.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:04.777" endtime="20221117 03:55:04.778"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:04.775" endtime="20221117 03:55:04.778"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:04.775" endtime="20221117 03:55:04.779"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:04.782" endtime="20221117 03:55:04.782"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:04.780" endtime="20221117 03:55:04.783"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:04.779" endtime="20221117 03:55:04.783"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:04.769" endtime="20221117 03:55:04.783"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<assign>
<var>${ip_found}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:04.785" endtime="20221117 03:55:04.786"></status>
</kw>
<msg timestamp="20221117 03:55:04.787" level="INFO">${ip_found} = True</msg>
<status status="PASS" starttime="20221117 03:55:04.784" endtime="20221117 03:55:04.787"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>${ip_found} == ${False}</arg>
<arg>${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:04.788" endtime="20221117 03:55:04.788"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:55:04.790" level="INFO">${data} = {'IPv4StaticAddresses': [None, {}, {}]}</msg>
<status status="PASS" starttime="20221117 03:55:04.789" endtime="20221117 03:55:04.790"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:55:04.867" level="INFO">#(CST) 2022/11/17 03:55:04.867352 -    0.166596 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:55:04.882" level="INFO">#(CST) 2022/11/17 03:55:04.881782 -    0.014430 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:55:04.882" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:04.882" level="INFO">#(CST) 2022/11/17 03:55:04.882071 -    0.000289 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:04.882" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:04.883" level="INFO">#(CST) 2022/11/17 03:55:04.882462 -    0.000391 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:04.892" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:04.896" level="INFO">#(CST) 2022/11/17 03:55:04.895766 -    0.013304 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:04.896" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:04.925" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:04.925" level="INFO">#(CST) 2022/11/17 03:55:04.925389 -    0.029623 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:04.926" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:04.937" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:04.937" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:55:05.026" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:05.026" level="INFO">#(CST) 2022/11/17 03:55:05.025736 -    0.100347 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:05.034" level="INFO">#(CST) 2022/11/17 03:55:05.034034 -    0.008298 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:05.045" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:05.060" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:55:04.791" endtime="20221117 03:55:05.061"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:55:05.062" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:55:05.061" endtime="20221117 03:55:05.062"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:55:05.076" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:55:05.108" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.031446121633052826 seconds.</msg>
<status status="PASS" starttime="20221117 03:55:05.062" endtime="20221117 03:55:05.108"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:55:23.110" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:55:05.109" endtime="20221117 03:55:23.110"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:55:23.116" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:55:23.115" endtime="20221117 03:55:23.116"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:55:23.124" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:55:26.149" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:55:26.149" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=3.11 ms
64 bytes from rain40bmc.aus.stglabs.i...</msg>
<status status="PASS" starttime="20221117 03:55:23.116" endtime="20221117 03:55:26.149"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:55:26.152" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=3.11 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=4.30 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=4.81 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=4.25 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 3.111/4.120/4.810/0.623 ms</msg>
<status status="PASS" starttime="20221117 03:55:26.151" endtime="20221117 03:55:26.153"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:26.153" endtime="20221117 03:55:26.154"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:23.114" endtime="20221117 03:55:26.155"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:23.113" endtime="20221117 03:55:26.155"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:23.111" endtime="20221117 03:55:26.155"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify IP On BMC</arg>
<arg>${ip}</arg>
</arguments>
<assign>
<var>${delete_status}</var>
</assign>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:55:26.262" level="INFO">#(CST) 2022/11/17 03:55:26.262314 -   21.228280 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:55:26.281" level="INFO">#(CST) 2022/11/17 03:55:26.280889 -    0.018574 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:55:26.281" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:26.281" level="INFO">#(CST) 2022/11/17 03:55:26.281276 -    0.000388 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:26.282" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:26.282" level="INFO">#(CST) 2022/11/17 03:55:26.281747 -    0.000470 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:26.293" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:26.298" level="INFO">#(CST) 2022/11/17 03:55:26.297923 -    0.016176 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:26.298" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:26.333" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:26.333" level="INFO">#(CST) 2022/11/17 03:55:26.332757 -    0.034834 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:26.333" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:26.347" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:26.347" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:55:26.460" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:26.460" level="INFO">#(CST) 2022/11/17 03:55:26.460354 -    0.127597 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:26.469" level="INFO">#(CST) 2022/11/17 03:55:26.469299 -    0.008945 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:26.480" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:26.496" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:55:26.159" endtime="20221117 03:55:26.496"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:55:26.497" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:55:26.497" endtime="20221117 03:55:26.498"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:55:26.579" level="INFO">#(CST) 2022/11/17 03:55:26.578658 -    0.109359 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:55:26.595" level="INFO">#(CST) 2022/11/17 03:55:26.595048 -    0.016390 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:55:26.595" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:26.595" level="INFO">#(CST) 2022/11/17 03:55:26.595330 -    0.000283 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:26.596" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:26.596" level="INFO">#(CST) 2022/11/17 03:55:26.595737 -    0.000407 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:26.606" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:26.610" level="INFO">#(CST) 2022/11/17 03:55:26.610306 -    0.014569 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:26.610" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:26.641" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:26.641" level="INFO">#(CST) 2022/11/17 03:55:26.641164 -    0.030859 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:26.641" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:26.654" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:26.655" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:55:26.747" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:26.747" level="INFO">#(CST) 2022/11/17 03:55:26.746852 -    0.105688 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:26.757" level="INFO">#(CST) 2022/11/17 03:55:26.756485 -    0.009633 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:26.768" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:26.782" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0
    in...</msg>
<msg timestamp="20221117 03:55:26.782" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:55:26.782" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:55:26.498" endtime="20221117 03:55:26.782"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:55:26.783" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:55:26.784" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:55:26.783" endtime="20221117 03:55:26.784"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:55:26.785" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:55:26.785" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:26.784" endtime="20221117 03:55:26.785"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:55:26.786" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:55:26.785" endtime="20221117 03:55:26.786"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:26.787" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:26.787" endtime="20221117 03:55:26.787"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:26.788" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:55:26.788" endtime="20221117 03:55:26.788"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:26.789" endtime="20221117 03:55:26.790"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:26.786" endtime="20221117 03:55:26.790"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:26.791" level="INFO">@{if_info} = [ inet | 10.7.7.8/22 | brd | 10.7.7.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:26.790" endtime="20221117 03:55:26.791"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:26.792" level="INFO">${ip_n_prefix} = 10.7.7.8/22</msg>
<status status="PASS" starttime="20221117 03:55:26.791" endtime="20221117 03:55:26.792"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:26.792" endtime="20221117 03:55:26.793"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:26.790" endtime="20221117 03:55:26.793"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:26.794" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:26.793" endtime="20221117 03:55:26.794"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:26.795" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:55:26.794" endtime="20221117 03:55:26.795"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:26.795" endtime="20221117 03:55:26.796"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:26.793" endtime="20221117 03:55:26.796"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:26.786" endtime="20221117 03:55:26.796"></status>
</kw>
<msg timestamp="20221117 03:55:26.796" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.8/22 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:55:26.158" endtime="20221117 03:55:26.796"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<msg timestamp="20221117 03:55:26.798" level="FAIL">IP address does not exist.</msg>
<status status="FAIL" starttime="20221117 03:55:26.797" endtime="20221117 03:55:26.798"></status>
</kw>
<status status="FAIL" starttime="20221117 03:55:26.157" endtime="20221117 03:55:26.798"></status>
</kw>
<msg timestamp="20221117 03:55:26.798" level="INFO">${delete_status} = False</msg>
<status status="PASS" starttime="20221117 03:55:26.156" endtime="20221117 03:55:26.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${False}'</arg>
<arg>ELSE</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${True}'</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>'${delete_status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:26.800" endtime="20221117 03:55:26.800"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:26.799" endtime="20221117 03:55:26.801"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:55:26.878" level="INFO">#(CST) 2022/11/17 03:55:26.877469 -    0.120983 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:55:26.894" level="INFO">#(CST) 2022/11/17 03:55:26.893474 -    0.016005 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:55:26.894" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:26.894" level="INFO">#(CST) 2022/11/17 03:55:26.893756 -    0.000283 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:26.894" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:26.894" level="INFO">#(CST) 2022/11/17 03:55:26.894149 -    0.000393 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:26.904" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:26.908" level="INFO">#(CST) 2022/11/17 03:55:26.908374 -    0.014225 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:26.909" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:26.939" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:26.939" level="INFO">#(CST) 2022/11/17 03:55:26.939094 -    0.030720 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:26.939" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:26.952" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:26.952" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:55:27.043" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:27.043" level="INFO">#(CST) 2022/11/17 03:55:27.042938 -    0.103844 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:27.052" level="INFO">#(CST) 2022/11/17 03:55:27.052021 -    0.009083 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:27.064" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:27.080" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:55:26.802" endtime="20221117 03:55:27.080"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:55:27.095" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:55:27.118" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.02218546997755766 seconds.</msg>
<msg timestamp="20221117 03:55:27.118" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:55:27.081" endtime="20221117 03:55:27.118"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:55:27.120" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.252.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMa...</msg>
<status status="PASS" starttime="20221117 03:55:27.119" endtime="20221117 03:55:27.120"></status>
</kw>
<msg timestamp="20221117 03:55:27.120" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.252.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMa...</msg>
<status status="PASS" starttime="20221117 03:55:26.802" endtime="20221117 03:55:27.120"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:55:27.196" level="INFO">#(CST) 2022/11/17 03:55:27.195767 -    0.143746 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:55:27.211" level="INFO">#(CST) 2022/11/17 03:55:27.211292 -    0.015525 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:55:27.211" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:27.212" level="INFO">#(CST) 2022/11/17 03:55:27.211576 -    0.000283 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:27.212" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:27.212" level="INFO">#(CST) 2022/11/17 03:55:27.211962 -    0.000386 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:27.221" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:27.226" level="INFO">#(CST) 2022/11/17 03:55:27.225705 -    0.013743 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:27.226" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:27.257" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:27.257" level="INFO">#(CST) 2022/11/17 03:55:27.256613 -    0.030908 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:27.257" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:27.269" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:27.269" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:55:27.357" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:27.357" level="INFO">#(CST) 2022/11/17 03:55:27.357059 -    0.100446 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:27.366" level="INFO">#(CST) 2022/11/17 03:55:27.365552 -    0.008493 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:27.376" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:27.391" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:55:27.121" endtime="20221117 03:55:27.391"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:55:27.392" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:55:27.392" endtime="20221117 03:55:27.392"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:55:27.468" level="INFO">#(CST) 2022/11/17 03:55:27.468221 -    0.102669 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:55:27.485" level="INFO">#(CST) 2022/11/17 03:55:27.484466 -    0.016244 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:55:27.485" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:27.485" level="INFO">#(CST) 2022/11/17 03:55:27.484770 -    0.000304 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:27.485" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:27.485" level="INFO">#(CST) 2022/11/17 03:55:27.485178 -    0.000408 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:27.495" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:27.500" level="INFO">#(CST) 2022/11/17 03:55:27.499593 -    0.014415 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:27.500" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:27.532" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:27.532" level="INFO">#(CST) 2022/11/17 03:55:27.531646 -    0.032053 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:27.532" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:27.544" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:27.544" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:55:27.645" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:27.646" level="INFO">#(CST) 2022/11/17 03:55:27.645390 -    0.113743 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:27.654" level="INFO">#(CST) 2022/11/17 03:55:27.654276 -    0.008886 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:27.666" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:27.680" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0
    in...</msg>
<msg timestamp="20221117 03:55:27.680" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:55:27.680" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:55:27.393" endtime="20221117 03:55:27.680"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:55:27.681" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:55:27.681" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:55:27.681" endtime="20221117 03:55:27.681"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:55:27.682" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:55:27.683" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:27.682" endtime="20221117 03:55:27.683"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:55:27.684" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:55:27.683" endtime="20221117 03:55:27.684"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:27.685" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:27.685" endtime="20221117 03:55:27.685"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:27.686" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:55:27.686" endtime="20221117 03:55:27.686"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:27.687" endtime="20221117 03:55:27.687"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:27.684" endtime="20221117 03:55:27.687"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:27.689" level="INFO">@{if_info} = [ inet | 10.7.7.8/22 | brd | 10.7.7.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:27.688" endtime="20221117 03:55:27.689"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:27.690" level="INFO">${ip_n_prefix} = 10.7.7.8/22</msg>
<status status="PASS" starttime="20221117 03:55:27.689" endtime="20221117 03:55:27.690"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:27.690" endtime="20221117 03:55:27.691"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:27.687" endtime="20221117 03:55:27.691"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:27.692" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:27.691" endtime="20221117 03:55:27.692"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:27.693" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:55:27.692" endtime="20221117 03:55:27.693"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:27.693" endtime="20221117 03:55:27.694"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:27.691" endtime="20221117 03:55:27.694"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:27.684" endtime="20221117 03:55:27.694"></status>
</kw>
<msg timestamp="20221117 03:55:27.694" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.8/22', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:55:27.120" endtime="20221117 03:55:27.694"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.252.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:27.695" endtime="20221117 03:55:27.696"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:27.695" endtime="20221117 03:55:27.696"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:27.697" endtime="20221117 03:55:27.698"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:27.696" endtime="20221117 03:55:27.698"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:27.695" endtime="20221117 03:55:27.698"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:26.801" endtime="20221117 03:55:27.698"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:04.436" endtime="20221117 03:55:27.698"></status>
</kw>
<kw name="Delete IP Address" library="bmc_network_utils">
<doc>Delete IP Address Of BMC.</doc>
<arguments>
<arg>${test_ipv4_addr2}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:55:27.700" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:55:27.700" endtime="20221117 03:55:27.700"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:55:27.701" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:55:27.701" endtime="20221117 03:55:27.701"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:55:27.772" level="INFO">#(CST) 2022/11/17 03:55:27.771814 -    0.117538 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:55:27.786" level="INFO">#(CST) 2022/11/17 03:55:27.785699 -    0.013884 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:55:27.786" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:27.786" level="INFO">#(CST) 2022/11/17 03:55:27.785982 -    0.000283 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:27.786" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:27.786" level="INFO">#(CST) 2022/11/17 03:55:27.786333 -    0.000351 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:27.795" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:27.799" level="INFO">#(CST) 2022/11/17 03:55:27.798798 -    0.012466 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:27.799" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:27.827" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:27.827" level="INFO">#(CST) 2022/11/17 03:55:27.826891 -    0.028093 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:27.827" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:27.839" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:27.839" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:55:27.930" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:27.930" level="INFO">#(CST) 2022/11/17 03:55:27.929697 -    0.102805 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:27.939" level="INFO">#(CST) 2022/11/17 03:55:27.938398 -    0.008702 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:27.950" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:27.966" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:55:27.702" endtime="20221117 03:55:27.966"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:55:27.980" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:55:27.997" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.016352557111531496 seconds.</msg>
<msg timestamp="20221117 03:55:27.997" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:55:27.966" endtime="20221117 03:55:27.997"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:55:27.998" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.252.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMa...</msg>
<status status="PASS" starttime="20221117 03:55:27.998" endtime="20221117 03:55:27.998"></status>
</kw>
<msg timestamp="20221117 03:55:27.999" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.252.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMa...</msg>
<status status="PASS" starttime="20221117 03:55:27.701" endtime="20221117 03:55:27.999"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.252.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:28.001" endtime="20221117 03:55:28.001"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:28.000" endtime="20221117 03:55:28.002"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:27.999" endtime="20221117 03:55:28.002"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:28.003" endtime="20221117 03:55:28.004"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:28.002" endtime="20221117 03:55:28.005"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:28.002" endtime="20221117 03:55:28.005"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:27.999" endtime="20221117 03:55:28.005"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<assign>
<var>${ip_found}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:28.006" endtime="20221117 03:55:28.007"></status>
</kw>
<msg timestamp="20221117 03:55:28.007" level="INFO">${ip_found} = True</msg>
<status status="PASS" starttime="20221117 03:55:28.005" endtime="20221117 03:55:28.007"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>${ip_found} == ${False}</arg>
<arg>${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:28.007" endtime="20221117 03:55:28.008"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:55:28.009" level="INFO">${data} = {'IPv4StaticAddresses': [None, {}]}</msg>
<status status="PASS" starttime="20221117 03:55:28.008" endtime="20221117 03:55:28.009"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:55:28.081" level="INFO">#(CST) 2022/11/17 03:55:28.080828 -    0.142430 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:55:28.096" level="INFO">#(CST) 2022/11/17 03:55:28.096207 -    0.015379 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:55:28.096" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:28.097" level="INFO">#(CST) 2022/11/17 03:55:28.096504 -    0.000297 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:28.097" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:28.097" level="INFO">#(CST) 2022/11/17 03:55:28.096915 -    0.000411 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:28.107" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:28.111" level="INFO">#(CST) 2022/11/17 03:55:28.110774 -    0.013859 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:28.111" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:28.142" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:28.142" level="INFO">#(CST) 2022/11/17 03:55:28.142125 -    0.031352 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:28.142" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:28.154" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:28.154" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:55:28.243" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:28.244" level="INFO">#(CST) 2022/11/17 03:55:28.243443 -    0.101318 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:28.252" level="INFO">#(CST) 2022/11/17 03:55:28.251897 -    0.008454 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:28.263" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:28.279" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:55:28.009" endtime="20221117 03:55:28.279"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:55:28.280" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:55:28.279" endtime="20221117 03:55:28.280"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:55:28.294" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:55:28.328" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.033483664970844984 seconds.</msg>
<status status="PASS" starttime="20221117 03:55:28.281" endtime="20221117 03:55:28.329"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:55:46.330" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:55:28.329" endtime="20221117 03:55:46.331"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:55:46.336" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:55:46.335" endtime="20221117 03:55:46.336"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:55:46.344" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:55:49.373" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:55:49.373" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=2.60 ms
64 bytes from rain40bmc.aus.stglabs.i...</msg>
<status status="PASS" starttime="20221117 03:55:46.336" endtime="20221117 03:55:49.373"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:55:49.376" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=2.60 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=2.51 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=4.00 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=3.80 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 2.515/3.233/4.004/0.676 ms</msg>
<status status="PASS" starttime="20221117 03:55:49.375" endtime="20221117 03:55:49.376"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:49.377" endtime="20221117 03:55:49.377"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:46.334" endtime="20221117 03:55:49.378"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:46.333" endtime="20221117 03:55:49.378"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:46.331" endtime="20221117 03:55:49.378"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify IP On BMC</arg>
<arg>${ip}</arg>
</arguments>
<assign>
<var>${delete_status}</var>
</assign>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:55:49.486" level="INFO">#(CST) 2022/11/17 03:55:49.485634 -   21.233737 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:55:49.504" level="INFO">#(CST) 2022/11/17 03:55:49.503710 -    0.018076 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:55:49.504" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:49.504" level="INFO">#(CST) 2022/11/17 03:55:49.504160 -    0.000450 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:49.505" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:49.505" level="INFO">#(CST) 2022/11/17 03:55:49.504663 -    0.000503 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:49.515" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:49.520" level="INFO">#(CST) 2022/11/17 03:55:49.520366 -    0.015704 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:49.521" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:49.554" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:49.555" level="INFO">#(CST) 2022/11/17 03:55:49.554525 -    0.034159 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:49.555" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:49.568" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:49.568" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:55:49.660" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:49.660" level="INFO">#(CST) 2022/11/17 03:55:49.660195 -    0.105670 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:49.670" level="INFO">#(CST) 2022/11/17 03:55:49.670205 -    0.010010 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:49.682" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:49.699" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:55:49.383" endtime="20221117 03:55:49.700"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:55:49.702" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:55:49.701" endtime="20221117 03:55:49.702"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:55:49.788" level="INFO">#(CST) 2022/11/17 03:55:49.787564 -    0.117359 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:55:49.804" level="INFO">#(CST) 2022/11/17 03:55:49.804301 -    0.016737 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:55:49.805" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:49.805" level="INFO">#(CST) 2022/11/17 03:55:49.804598 -    0.000296 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:49.805" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:49.805" level="INFO">#(CST) 2022/11/17 03:55:49.805010 -    0.000412 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:49.815" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:49.820" level="INFO">#(CST) 2022/11/17 03:55:49.819864 -    0.014854 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:49.820" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:49.851" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:49.851" level="INFO">#(CST) 2022/11/17 03:55:49.850877 -    0.031013 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:49.851" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:49.864" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:49.864" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:55:49.966" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:49.966" level="INFO">#(CST) 2022/11/17 03:55:49.965752 -    0.114875 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:49.975" level="INFO">#(CST) 2022/11/17 03:55:49.974704 -    0.008952 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:49.986" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:49.999" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:55:49.999" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:55:49.999" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:55:49.702" endtime="20221117 03:55:50.000"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:55:50.001" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:55:50.001" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:55:50.000" endtime="20221117 03:55:50.001"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:55:50.002" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:55:50.002" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:50.001" endtime="20221117 03:55:50.002"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:55:50.003" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:55:50.002" endtime="20221117 03:55:50.003"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:50.004" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:50.004" endtime="20221117 03:55:50.004"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:50.005" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:55:50.005" endtime="20221117 03:55:50.005"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:50.006" endtime="20221117 03:55:50.006"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:50.003" endtime="20221117 03:55:50.006"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:50.007" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:50.007" endtime="20221117 03:55:50.007"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:50.008" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:55:50.008" endtime="20221117 03:55:50.008"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:50.009" endtime="20221117 03:55:50.009"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:50.006" endtime="20221117 03:55:50.009"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:50.003" endtime="20221117 03:55:50.009"></status>
</kw>
<msg timestamp="20221117 03:55:50.010" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:55:49.381" endtime="20221117 03:55:50.010"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<msg timestamp="20221117 03:55:50.011" level="FAIL">IP address does not exist.</msg>
<status status="FAIL" starttime="20221117 03:55:50.010" endtime="20221117 03:55:50.011"></status>
</kw>
<status status="FAIL" starttime="20221117 03:55:49.380" endtime="20221117 03:55:50.012"></status>
</kw>
<msg timestamp="20221117 03:55:50.012" level="INFO">${delete_status} = False</msg>
<status status="PASS" starttime="20221117 03:55:49.379" endtime="20221117 03:55:50.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${False}'</arg>
<arg>ELSE</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${True}'</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>'${delete_status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:50.013" endtime="20221117 03:55:50.014"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:50.012" endtime="20221117 03:55:50.014"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:55:50.091" level="INFO">#(CST) 2022/11/17 03:55:50.091270 -    0.116566 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:55:50.107" level="INFO">#(CST) 2022/11/17 03:55:50.106936 -    0.015666 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:55:50.107" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:50.107" level="INFO">#(CST) 2022/11/17 03:55:50.107221 -    0.000285 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:50.108" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:50.108" level="INFO">#(CST) 2022/11/17 03:55:50.107602 -    0.000381 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:50.117" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:50.122" level="INFO">#(CST) 2022/11/17 03:55:50.121691 -    0.014089 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:50.122" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:50.152" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:50.153" level="INFO">#(CST) 2022/11/17 03:55:50.152557 -    0.030866 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:50.153" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:50.165" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:50.165" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:55:50.256" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:50.257" level="INFO">#(CST) 2022/11/17 03:55:50.256391 -    0.103834 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:50.266" level="INFO">#(CST) 2022/11/17 03:55:50.265506 -    0.009114 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:50.277" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:50.293" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:55:50.016" endtime="20221117 03:55:50.293"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:55:50.309" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:55:50.331" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.021480785217136145 seconds.</msg>
<msg timestamp="20221117 03:55:50.331" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:55:50.294" endtime="20221117 03:55:50.332"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:55:50.333" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:55:50.332" endtime="20221117 03:55:50.333"></status>
</kw>
<msg timestamp="20221117 03:55:50.334" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:55:50.015" endtime="20221117 03:55:50.334"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:55:50.432" level="INFO">#(CST) 2022/11/17 03:55:50.431864 -    0.166358 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:55:50.450" level="INFO">#(CST) 2022/11/17 03:55:50.450303 -    0.018440 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:55:50.451" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:50.451" level="INFO">#(CST) 2022/11/17 03:55:50.450622 -    0.000318 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:50.451" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:50.451" level="INFO">#(CST) 2022/11/17 03:55:50.451068 -    0.000447 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:50.464" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:50.469" level="INFO">#(CST) 2022/11/17 03:55:50.468446 -    0.017378 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:50.469" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:50.503" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:50.503" level="INFO">#(CST) 2022/11/17 03:55:50.502717 -    0.034270 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:50.503" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:50.516" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:50.516" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:55:50.609" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:50.609" level="INFO">#(CST) 2022/11/17 03:55:50.609298 -    0.106581 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:50.618" level="INFO">#(CST) 2022/11/17 03:55:50.618220 -    0.008921 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:50.629" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:50.645" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:55:50.336" endtime="20221117 03:55:50.645"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:55:50.646" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:55:50.646" endtime="20221117 03:55:50.647"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:55:50.727" level="INFO">#(CST) 2022/11/17 03:55:50.726712 -    0.108492 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:55:50.743" level="INFO">#(CST) 2022/11/17 03:55:50.743247 -    0.016535 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:55:50.743" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:55:50.744" level="INFO">#(CST) 2022/11/17 03:55:50.743552 -    0.000305 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:55:50.744" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:55:50.744" level="INFO">#(CST) 2022/11/17 03:55:50.743973 -    0.000421 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:55:50.754" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:55:50.759" level="INFO">#(CST) 2022/11/17 03:55:50.758718 -    0.014745 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:55:50.759" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:55:50.791" level="INFO">children:
</msg>
<msg timestamp="20221117 03:55:50.791" level="INFO">#(CST) 2022/11/17 03:55:50.790939 -    0.032220 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:55:50.791" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:55:50.804" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:55:50.804" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:55:50.895" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:55:50.896" level="INFO">#(CST) 2022/11/17 03:55:50.895529 -    0.104590 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:55:50.905" level="INFO">#(CST) 2022/11/17 03:55:50.905211 -    0.009682 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:55:50.917" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:55:50.932" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:55:50.932" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:55:50.932" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:55:50.647" endtime="20221117 03:55:50.932"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:55:50.933" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:55:50.933" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:55:50.933" endtime="20221117 03:55:50.933"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:55:50.934" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:55:50.935" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:50.934" endtime="20221117 03:55:50.935"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:55:50.936" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:55:50.935" endtime="20221117 03:55:50.936"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:50.937" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:50.937" endtime="20221117 03:55:50.937"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:50.938" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:55:50.938" endtime="20221117 03:55:50.938"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:50.939" endtime="20221117 03:55:50.939"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:50.936" endtime="20221117 03:55:50.940"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:55:50.941" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:55:50.940" endtime="20221117 03:55:50.941"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:55:50.942" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:55:50.941" endtime="20221117 03:55:50.942"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:50.942" endtime="20221117 03:55:50.943"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:50.940" endtime="20221117 03:55:50.943"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:50.936" endtime="20221117 03:55:50.943"></status>
</kw>
<msg timestamp="20221117 03:55:50.943" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:55:50.335" endtime="20221117 03:55:50.943"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:50.944" endtime="20221117 03:55:50.945"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:50.944" endtime="20221117 03:55:50.945"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:50.944" endtime="20221117 03:55:50.945"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:50.014" endtime="20221117 03:55:50.946"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:27.699" endtime="20221117 03:55:50.946"></status>
</kw>
<kw name="Test Teardown Execution">
<doc>Test teardown execution.</doc>
<kw name="Logout" library="Redfish">
<doc>Logout of session. YOU MUST CALL THIS WHEN YOU ARE DONE TO FREE</doc>
<msg timestamp="20221117 03:55:50.961" level="INFO">Attempt 1 of /redfish/v1/SessionService/Sessions/rUmYg7tvtg</msg>
<msg timestamp="20221117 03:55:50.973" level="INFO">Response Time to /redfish/v1/SessionService/Sessions/rUmYg7tvtg: 0.011427156627178192 seconds.</msg>
<msg timestamp="20221117 03:55:50.973" level="INFO">User logged out: {
  "@Message.ExtendedInfo": [
    {
      "@odata.type": "#Message.v1_1_1.Message",
      "Message": "Successfully Completed Request",
      "MessageArgs": [],
      "MessageId": "Base.1.8.1.Success",
      "MessageSeverity": "OK",
      "Resolution": "None"
    }
  ]
}</msg>
<status status="PASS" starttime="20221117 03:55:50.947" endtime="20221117 03:55:50.973"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:50.946" endtime="20221117 03:55:50.974"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:04.435" endtime="20221117 03:55:50.974"></status>
</kw>
<doc>Configure multiple IPv4 addresses and verify.</doc>
<tags>
<tag>Configure_And_Verify_Multiple_IPv4_Addresses</tag>
<tag>Network_Conf_Test</tag>
</tags>
<status status="PASS" starttime="20221117 03:54:40.334" endtime="20221117 03:55:50.974" critical="yes"></status>
</test>
<kw name="Suite Teardown Execution" type="teardown">
<doc>Do suite teardown execution.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${DHCPEnabled}==True</arg>
<arg>Enable IPv4 DHCP Settings</arg>
</arguments>
<status status="PASS" starttime="20221117 03:55:50.976" endtime="20221117 03:55:50.977"></status>
</kw>
<status status="PASS" starttime="20221117 03:55:50.976" endtime="20221117 03:55:50.977"></status>
</kw>
<doc>Network interface configuration and verification
tests.</doc>
<status status="PASS" starttime="20221117 03:51:26.591" endtime="20221117 03:55:50.977"></status>
</suite>
<statistics>
<total>
<stat pass="3" fail="0">Critical Tests</stat>
<stat pass="3" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">Configure_And_Verify_Multiple_IPv4_Addresses</stat>
<stat pass="1" fail="0">Configure_And_Verify_Multiple_Static_IPv4_Addresses</stat>
<stat pass="3" fail="0">Network_Conf_Test</stat>
<stat pass="1" fail="0">Verify_Modifying_IP_Address_Multiple_Times</stat>
</tag>
<suite>
<stat pass="3" fail="0" id="s1" name="Test Bmc Network Conf">Test Bmc Network Conf</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
