{
  "comments": [
    {
      "key": {
        "uuid": "feb6a278_f36d60e7",
        "filename": "docs/openbmc_libdoc_generation.md",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 1000026
      },
      "writtenOn": "2019-07-23T19:56:54Z",
      "side": 1,
      "message": "*files",
      "revId": "59f3cb97825adadacdbe016d5e12e74ee6ef77ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1faa08e_89119280",
        "filename": "tools/generate_repo_libdoc.py",
        "patchSetId": 14
      },
      "lineNbr": 1,
      "author": {
        "id": 1000026
      },
      "writtenOn": "2019-07-23T19:56:54Z",
      "side": 1,
      "message": "- When I cherry picked your change, this file did not have the execute bit turned on.  To fix that, do this and push your changes:\n\nchmod +x tools/generate_repo_libdoc.py\n\n- Can you move this to bin?  We have all of our environment variables set up nicely to run programs from bin.\n\nPlease make this change AFTER you make all other changes.  Otherwise, the file diff gerrit won\u0027t work for me.",
      "revId": "59f3cb97825adadacdbe016d5e12e74ee6ef77ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6660fd1a_c7243468",
        "filename": "tools/generate_repo_libdoc.py",
        "patchSetId": 14
      },
      "lineNbr": 4,
      "author": {
        "id": 1000026
      },
      "writtenOn": "2019-07-23T19:56:54Z",
      "side": 1,
      "message": "This is a preference of mine but since the text here will almost always be close to the main help text, I often just have this for my entire program doc string:\n\nSee help text for details.\n\nThis is mainly to avoid having to maintain this summary text in 2 places.",
      "revId": "59f3cb97825adadacdbe016d5e12e74ee6ef77ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac95092f_ea3d605e",
        "filename": "tools/generate_repo_libdoc.py",
        "patchSetId": 14
      },
      "lineNbr": 13,
      "author": {
        "id": 1000026
      },
      "writtenOn": "2019-07-23T19:56:54Z",
      "side": 1,
      "message": "Delete this line.\n\nThe only changes you have to make from the original python_pgm_template is to add your variables and help text, to add your functions and to add your code wherever it says \"your code here\".",
      "revId": "59f3cb97825adadacdbe016d5e12e74ee6ef77ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9cb25af7_c1f1827d",
        "filename": "tools/generate_repo_libdoc.py",
        "patchSetId": 14
      },
      "lineNbr": 16,
      "author": {
        "id": 1000026
      },
      "writtenOn": "2019-07-23T19:56:54Z",
      "side": 1,
      "message": "I always work under the assumption that it is the user\u0027s job to set up the environment so that the necessary python files can be found.  That means setting PYTHONPATH up to point to the ../lib directory.\n\nSo, can you delete this line?",
      "revId": "59f3cb97825adadacdbe016d5e12e74ee6ef77ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d8942fb_e2400b6f",
        "filename": "tools/generate_repo_libdoc.py",
        "patchSetId": 14
      },
      "lineNbr": 27,
      "author": {
        "id": 1000026
      },
      "writtenOn": "2019-07-23T19:56:54Z",
      "side": 1,
      "message": "Remove these 5 lines.  They are not needed.",
      "revId": "59f3cb97825adadacdbe016d5e12e74ee6ef77ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35451f70_84ba8dfc",
        "filename": "tools/generate_repo_libdoc.py",
        "patchSetId": 14
      },
      "lineNbr": 42,
      "author": {
        "id": 1000026
      },
      "writtenOn": "2019-07-23T19:56:54Z",
      "side": 1,
      "message": "Stick with the template version.  Change back to:\n\n    usage\u003d\u0027%(prog)s [OPTIONS]\u0027,",
      "revId": "59f3cb97825adadacdbe016d5e12e74ee6ef77ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8597291_1ed96ede",
        "filename": "tools/generate_repo_libdoc.py",
        "patchSetId": 14
      },
      "lineNbr": 43,
      "author": {
        "id": 1000026
      },
      "writtenOn": "2019-07-23T19:56:54Z",
      "side": 1,
      "message": "Good summary.\n\nJust a few changes.\n\n    description\u003d\"%(prog)s uses the libdoc.py file provided by robot \" +\n    \"framework to generate the keyword documentation for library and\" +\n    \" resource files.\",\n\nAlso, note that I used the + to concat the lines.  My preference.",
      "revId": "59f3cb97825adadacdbe016d5e12e74ee6ef77ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b2e5e9d_c7cb6634",
        "filename": "tools/generate_repo_libdoc.py",
        "patchSetId": 14
      },
      "lineNbr": 49,
      "author": {
        "id": 1000026
      },
      "writtenOn": "2019-07-23T19:56:54Z",
      "side": 1,
      "message": "We do not bother with short options.  Please remove them in all cases.\n\n    \u0027--format\u0027,",
      "revId": "59f3cb97825adadacdbe016d5e12e74ee6ef77ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89f06be6_a930e7ad",
        "filename": "tools/generate_repo_libdoc.py",
        "patchSetId": 14
      },
      "lineNbr": 53,
      "author": {
        "id": 1000026
      },
      "writtenOn": "2019-07-23T19:56:54Z",
      "side": 1,
      "message": "IMPORTANT:\n\nI have more comments I can make about the particulars of the code but I\u0027m going to stop pending an answer to the following question.\n\nWhat benefit does this program offer my over and above calling robot.libdoc directly:\n\nExample:\n\nI tried it like this:\n\ngenerate_repo_libdoc.py -f\u003dhtml /afs/rchland.ibm.com/usr6/micwalsh/git/openbmc-test-automation/lib/gen_robot_ssh.py /tmp/gen_robot_ssh.html\n\nWhich cause it to do this:\n\npython /opt/rh/rh-python36/root/usr/lib/python3.6/site-packages/robot/libdoc.py --format html /afs/rchland.ibm.com/usr6/micwalsh/git/openbmc-test-automation/lib/gen_robot_ssh.py /tmp/gen_robot_ssh.html\n\nOr simpler yet, I can just run this:\n\npython -m robot.libdoc -f html /afs/rchland.ibm.com/usr6/micwalsh/git/openbmc-test-automation/lib/gen_robot_ssh.py /tmp/gen_robot_ssh.html\n\nCan you list the benefits?  I\u0027m trying to understand if this program is worthwhile.",
      "revId": "59f3cb97825adadacdbe016d5e12e74ee6ef77ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f280c297_ec5bbd96",
        "filename": "tools/generate_repo_libdoc.py",
        "patchSetId": 14
      },
      "lineNbr": 53,
      "author": {
        "id": 1000423
      },
      "writtenOn": "2019-07-25T20:32:36Z",
      "side": 1,
      "message": "No, All are same as mention in your example\u0027s.                 \nBut benefits can be added. i have share my suggestion over slack. let me know you inputs.                                  Same Added here for reference.                                             By adding additional optional arguments-\n\nfilename\u003d file_1.robot,file_2.robot,file_3.robot\nfilename\u003d All\n\n\nCommand e.g. :\n\npython generate_repo_libdoc.py filename\u003dfile_1.robot,file_2.robot,file_3.robot /path/source_directory/ /path/destination_directory/\n\nabove command will accept the file names from argument \"filename\", specify source directory path,\n\nthen using generate_repo_libdoc.py tool generate keyword documentation files for listed file name in \"filename\" arguments.\n\npython generate_repo_libdoc.py filename\u003d All /path/source_directory/ /path/destination_directory/\n\nSimilar to above command , but will take all the files from source directory and generate the keyword documentation.\n\n\n--FileType\u003d Robot\n\npython generate_repo_libdoc.py --FileType\u003d Robot /path/source_directory/ /path/destination_directory/\n\nHere it will consider all the ROBOT files only in given path and then will generate keyword documentation.                                                        \n                                      \n (* Adding comments only for this point, once feature gets define, developed, will address other review comments)",
      "parentUuid": "89f06be6_a930e7ad",
      "revId": "59f3cb97825adadacdbe016d5e12e74ee6ef77ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e01b4f1_6fe5a0e3",
        "filename": "tools/generate_repo_libdoc.py",
        "patchSetId": 14
      },
      "lineNbr": 53,
      "author": {
        "id": 1000026
      },
      "writtenOn": "2019-08-02T20:52:35Z",
      "side": 1,
      "message": "k, that pretty much reduces down to the ability to process multiple files (if they are all destined for the same results directory).\n\nI copied python_pgm_template and quickly whipped up a program called libdocs.py which does just this one thing.  I\u0027ll re-print the code below.\n\nHowever, I\u0027m not necessarily proposing that you adopt this program.  I think what we need is a more comprehensively thought out process of how we\u0027re going to do this.\n\nSometimes the best way of doing that is playing with the tool a bit and seeing what the results are and what problems arise.  I sent you some emails on this topic.\n\nMy thoughts are along these lines:\n\n- Decide which files we plan to include in this process.  Will it be all python files in lib doc? All .robot files in libdoc?  Or should we keep a list of the files we wish to have processed.  Should any be excluded?  Should we include any other libraries?\n- Figure out what kind of pre-processing needs to be done on the python docstrings and the robot docstrings.\n- Run a pre-processor tool on each file to generate a temporary intermediate file.\n- Run libdoc on each intermediate file from the prior step.  Direct the results of each to some dir that we agree on (either existing docs sub-directory or maybe a new libdoc subdirectory).\n\n\nAnyway, here\u0027s my code.  What this does show is how we can leverage our existing tool set to get this task done rather simply.\n\nA comment:  Whenever I\u0027m writing some kind of wrapper, I do my best to not re-code all of the parms, etc. for the underlying support program (libdoc, in this case).  So, by supporting an \"args\" parm, I simply accept the parms and pass them down to libdoc.\n\n#!/usr/bin/env python\n\nr\"\"\"\nSee help text for details.\n\"\"\"\n\nimport sys\nimport re\n\nsave_path_0 \u003d sys.path[0]\ndel sys.path[0]\n\nfrom gen_arg import *\nfrom gen_print import *\nfrom gen_valid import *\nfrom gen_misc import *\nfrom gen_cmd import *\n\n# Restore sys.path[0].\nsys.path.insert(0, save_path_0)\n\n# Set exit_on_error for gen_valid functions.\nset_exit_on_error(True)\n\nparser \u003d argparse.ArgumentParser(\n    usage\u003d\u0027%(prog)s [OPTIONS]\u0027,\n    description\u003d\"%(prog)s will run the robot.libdoc tool on each file in the list.\",\n    formatter_class\u003dargparse.ArgumentDefaultsHelpFormatter,\n    prefix_chars\u003d\u0027-+\u0027)\n\nparser.add_argument(\n    \u0027--targ_dir_path\u0027,\n    default\u003d\u0027\u0027,\n    help\u003d\u0027The path to the target directory.\u0027)\n\nparser.add_argument(\n    \u0027file_paths\u0027,\n    default\u003d\u0027\u0027,\n    nargs\u003d\u0027+\u0027,\n    help\u003d\u0027A list of files that are to be processed by robot.libdoc.\u0027)\n\nparser.add_argument(\n    \u0027--args\u0027,\n    default\u003d[],\n    nargs\u003dargparse.REMAINDER,\n    help\u003d\u0027A string of arguments to be passed directly to the robot.libdoc tool.\u0027)\n\n\n# Populate stock_list with options we want.\nstock_list \u003d [(\"test_mode\", 0), (\"quiet\", 0), (\"debug\", 0)]\n\n\ndef exit_function(signal_number\u003d0,\n                  frame\u003dNone):\n    r\"\"\"\n    Execute whenever the program ends normally or with the signals that we catch (i.e. TERM, INT).\n    \"\"\"\n\n    dprint_executing()\n    dprint_var(signal_number)\n\n    qprint_pgm_footer()\n\n\ndef signal_handler(signal_number,\n                   frame):\n    r\"\"\"\n    Handle signals.  Without a function to catch a SIGTERM or SIGINT, our program would terminate immediately with return code 143 and without calling our exit_function.\n    \"\"\"\n\n    # Our convention is to set up exit_function with atexit.register() so there is no need to explicitly call exit_function from here.\n\n    dprint_executing()\n\n    # Calling exit prevents us from returning to the code that was running when we received the signal.\n    exit(0)\n\n\ndef validate_parms():\n    r\"\"\"\n    Validate program parameters, etc.\n    \"\"\"\n\n    global targ_dir_path\n\n    valid_dir_path(targ_dir_path)\n    targ_dir_path \u003d add_trailing_slash(targ_dir_path)\n\n    gen_post_validation(exit_function, signal_handler)\n\n\ndef main():\n\n    gen_get_options(parser, stock_list)\n\n    validate_parms()\n\n    qprint_pgm_header()\n\n    ignore_err \u003d 0\n\n    libdoc_command_string \u003d \" \".join([\"python -m robot.libdoc\"] + args)\n\n    for file_path in file_paths:\n        targ_file_name \u003d re.sub(r\"\\..*$\", \"\", os.path.basename(file_path)) \\\n            + \".html\"\n        cmd_list \u003d filter(None, [libdoc_command_string, file_path,\n                                 targ_dir_path + targ_file_name])\n        cmd_buf \u003d \" \".join(cmd_list)\n        t_shell_cmd(cmd_buf)\n\n\nmain()",
      "parentUuid": "f280c297_ec5bbd96",
      "revId": "59f3cb97825adadacdbe016d5e12e74ee6ef77ce",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}