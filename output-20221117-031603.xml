<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.6.12 on linux)" generated="20221117 03:16:03.995" rpa="false">
<suite id="s1" name="Test Bmc Network Conf" source="/gsa/ausgsa-p10/03/indiateam04/swe12345/openbmc/sweta_gui_add_multiple/redfish/managers/test_bmc_network_conf.robot">
<kw name="Suite Setup Execution" type="setup">
<doc>Do suite setup execution.</doc>
<kw name="Login" library="Redfish">
<doc>Assign BMC default values for username, password and auth arguments
and call parent class login method.</doc>
<msg timestamp="20221117 03:16:06.516" level="INFO">Attempt 1 of /redfish/v1/SessionService/Sessions</msg>
<msg timestamp="20221117 03:16:06.568" level="INFO">Response Time to /redfish/v1/SessionService/Sessions: 0.051886667031794786 seconds.</msg>
<msg timestamp="20221117 03:16:06.568" level="INFO">{'@odata.id': '/redfish/v1/SessionService/Sessions/HMGWROB958', '@odata.type': '#Session.v1_5_0.Session', 'ClientOriginIPAddress': '::ffff:9.3.84.152', 'Description': 'Manager User Session', 'Id': 'HMGWROB958', 'Name': 'User Session', 'Oem': {'OpenBMC': {'@odata.type': '#OemSession.v1_0_0.Session', 'ClientID': ''}}, 'UserName': 'service'}</msg>
<msg timestamp="20221117 03:16:06.568" level="INFO">Login returned code 201: {
  "@odata.id": "/redfish/v1/SessionService/Sessions/HMGWROB958",
  "@odata.type": "#Session.v1_5_0.Session",
  "ClientOriginIPAddress": "::ffff:9.3.84.152",
  "Description": "Manager User Session",
  "Id": "HMGWROB958",
  "Name": "User Session",
  "Oem": {
    "OpenBMC": {
      "@odata.type": "#OemSession.v1_0_0.Session",
      "ClientID": ""
    }
  },
  "UserName": "service"
}</msg>
<status status="PASS" starttime="20221117 03:16:06.505" endtime="20221117 03:16:06.568"></status>
</kw>
<kw name="Get IPv4 DHCP Enabled Status">
<doc>Return IPv4 DHCP enabled status from redfish URI.</doc>
<assign>
<var>${DHCPEnabled}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:06.644" level="INFO">#(CST) 2022/11/17 03:16:06.643459 -    2.316724 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:06.659" level="INFO">#(CST) 2022/11/17 03:16:06.659424 -    0.015965 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:06.660" level="INFO">#(CST) 2022/11/17 03:16:06.659585 -    0.000162 - Connecting to rain40bmc.
</msg>
<msg timestamp="20221117 03:16:06.664" level="INFO">#(CST) 2022/11/17 03:16:06.663808 -    0.004223 - Executing: login_ssh(login_args = {'username': 'service', 'password': '0penBmc1'}, max_login_attempts = 5)
</msg>
<msg timestamp="20221117 03:16:06.664" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:06.664" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:06.665" level="INFO">#(CST) 2022/11/17 03:16:06.664484 -    0.000676 - Logging in to rain40bmc.
</msg>
<msg timestamp="20221117 03:16:06.671" level="INFO">login_attempt_num:                                1
</msg>
<msg timestamp="20221117 03:16:06.671" level="INFO">Logging into 'rain40bmc:22' as 'service'.</msg>
<msg timestamp="20221117 03:16:07.122" level="INFO">Read output: root@rain40bmc:~#</msg>
<msg timestamp="20221117 03:16:07.128" level="INFO">out_buf:                                          root@rain40bmc:~# 
</msg>
<msg timestamp="20221117 03:16:07.138" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:07.144" level="INFO">#(CST) 2022/11/17 03:16:07.143792 -    0.479308 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:07.144" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:07.175" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:07.175" level="INFO">#(CST) 2022/11/17 03:16:07.175079 -    0.031287 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:07.175" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:07.188" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:07.188" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:07.283" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:07.284" level="INFO">#(CST) 2022/11/17 03:16:07.283394 -    0.108314 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:07.291" level="INFO">#(CST) 2022/11/17 03:16:07.291315 -    0.007921 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:07.302" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:07.320" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:06.569" endtime="20221117 03:16:07.320"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:16:07.322" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:16:07.321" endtime="20221117 03:16:07.322"></status>
</kw>
<kw name="Get Attribute" library="Redfish">
<doc>Get and return the named attribute from the properties for a given
path.</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>DHCPv4</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:16:07.334" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:16:07.348" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.013707177247852087 seconds.</msg>
<msg timestamp="20221117 03:16:07.349" level="INFO">${resp} = {'DHCPEnabled': False, 'UseDNSServers': True, 'UseDomainName': True, 'UseNTPServers': True}</msg>
<status status="PASS" starttime="20221117 03:16:07.322" endtime="20221117 03:16:07.349"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp['DHCPEnabled']}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20221117 03:16:07.350" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20221117 03:16:07.349" endtime="20221117 03:16:07.350"></status>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20221117 03:16:07.351" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20221117 03:16:07.351" endtime="20221117 03:16:07.351"></status>
</kw>
<msg timestamp="20221117 03:16:07.351" level="INFO">${DHCPEnabled} = False</msg>
<status status="PASS" starttime="20221117 03:16:06.568" endtime="20221117 03:16:07.352"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${DHCPEnabled}</arg>
</arguments>
<msg timestamp="20221117 03:16:07.352" level="INFO">${DHCPEnabled} = False</msg>
<status status="PASS" starttime="20221117 03:16:07.352" endtime="20221117 03:16:07.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${DHCPEnabled}==True</arg>
<arg>Run Keywords</arg>
<arg>${ip_addr}</arg>
<arg>${gateway}</arg>
<arg>${subnetmask}=</arg>
<arg>Get DHCP IP Info</arg>
<arg>AND</arg>
<arg>Add IP Address</arg>
<arg>${ip_addr}</arg>
<arg>${subnetmask}</arg>
<arg>${gateway}</arg>
<arg>AND</arg>
<arg>Set Suite Variable</arg>
<arg>${ip_addr}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:07.353" endtime="20221117 03:16:07.354"></status>
</kw>
<kw name="Get BMC Default Gateway" library="bmc_network_utils">
<doc>Get system default gateway.</doc>
<assign>
<var>${test_gateway}</var>
</assign>
<kw name="Get BMC Route Info" library="bmc_network_utils">
<doc>Get system route info.</doc>
<assign>
<var>${route_info}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip route</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:16:07.425" level="INFO">#(CST) 2022/11/17 03:16:07.424835 -    0.133520 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip route', open_connection_args = {'host': 'rain40bmc'...
</msg>
<msg timestamp="20221117 03:16:07.440" level="INFO">#(CST) 2022/11/17 03:16:07.440129 -    0.015294 - Issuing: sudo -i /sbin/ip route
</msg>
<msg timestamp="20221117 03:16:07.440" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:07.441" level="INFO">#(CST) 2022/11/17 03:16:07.440438 -    0.000309 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:07.441" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:07.441" level="INFO">#(CST) 2022/11/17 03:16:07.440845 -    0.000407 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:07.450" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:07.454" level="INFO">#(CST) 2022/11/17 03:16:07.454334 -    0.013489 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:07.455" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:07.485" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:07.485" level="INFO">#(CST) 2022/11/17 03:16:07.485259 -    0.030925 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:07.485" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:07.497" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip route
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:07.497" level="INFO">Executing command 'sudo -i /sbin/ip route'.</msg>
<msg timestamp="20221117 03:16:07.582" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:07.583" level="INFO">#(CST) 2022/11/17 03:16:07.582419 -    0.097160 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:07.591" level="INFO">#(CST) 2022/11/17 03:16:07.590551 -    0.008132 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:07.601" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:07.615" level="INFO">${cmd_output} = default via 9.41.164.1 dev eth0 
9.41.164.0/24 dev eth0 scope link  src 9.41.164.249 
10.7.7.0/24 dev eth0 scope link  src 10.7.7.8 
169.254.0.0/16 dev eth0 scope link  src 169.254.6.76  metric 2048 </msg>
<msg timestamp="20221117 03:16:07.615" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:16:07.615" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:16:07.355" endtime="20221117 03:16:07.615"></status>
</kw>
<msg timestamp="20221117 03:16:07.615" level="INFO">${route_info} = default via 9.41.164.1 dev eth0 
9.41.164.0/24 dev eth0 scope link  src 9.41.164.249 
10.7.7.0/24 dev eth0 scope link  src 10.7.7.8 
169.254.0.0/16 dev eth0 scope link  src 169.254.6.76  metric 2048 </msg>
<status status="PASS" starttime="20221117 03:16:07.355" endtime="20221117 03:16:07.616"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${route_info}</arg>
<arg>default via</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:16:07.617" level="INFO">1 out of 4 lines matched</msg>
<msg timestamp="20221117 03:16:07.617" level="INFO">${lines} = default via 9.41.164.1 dev eth0 </msg>
<status status="PASS" starttime="20221117 03:16:07.616" endtime="20221117 03:16:07.617"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:07.691" level="INFO">#(CST) 2022/11/17 03:16:07.690585 -    0.100034 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:07.707" level="INFO">#(CST) 2022/11/17 03:16:07.706617 -    0.016032 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:07.707" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:07.707" level="INFO">#(CST) 2022/11/17 03:16:07.706937 -    0.000321 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:07.707" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:07.707" level="INFO">#(CST) 2022/11/17 03:16:07.707384 -    0.000447 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:07.717" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:07.722" level="INFO">#(CST) 2022/11/17 03:16:07.721548 -    0.014164 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:07.722" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:07.754" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:07.754" level="INFO">#(CST) 2022/11/17 03:16:07.754349 -    0.032800 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:07.755" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:07.767" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:07.767" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:07.862" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:07.862" level="INFO">#(CST) 2022/11/17 03:16:07.862173 -    0.107824 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:07.870" level="INFO">#(CST) 2022/11/17 03:16:07.869713 -    0.007540 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:07.880" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:07.895" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:07.617" endtime="20221117 03:16:07.895"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:16:07.897" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:16:07.896" endtime="20221117 03:16:07.897"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${lines}</arg>
<arg>${ethernet_interface}</arg>
</arguments>
<assign>
<var>${default_gw_line}</var>
</assign>
<msg timestamp="20221117 03:16:07.898" level="INFO">1 out of 1 lines matched</msg>
<msg timestamp="20221117 03:16:07.898" level="INFO">${default_gw_line} = default via 9.41.164.1 dev eth0 </msg>
<status status="PASS" starttime="20221117 03:16:07.897" endtime="20221117 03:16:07.898"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${default_gw_line}</arg>
</arguments>
<assign>
<var>${default_gw}</var>
</assign>
<msg timestamp="20221117 03:16:07.899" level="INFO">${default_gw} = ['default', 'via', '9.41.164.1', 'dev', 'eth0']</msg>
<status status="PASS" starttime="20221117 03:16:07.898" endtime="20221117 03:16:07.899"></status>
</kw>
<msg timestamp="20221117 03:16:07.899" level="INFO">${test_gateway} = 9.41.164.1</msg>
<status status="PASS" starttime="20221117 03:16:07.354" endtime="20221117 03:16:07.899"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${test_gateway}</arg>
</arguments>
<msg timestamp="20221117 03:16:07.900" level="INFO">${test_gateway} = 9.41.164.1</msg>
<status status="PASS" starttime="20221117 03:16:07.900" endtime="20221117 03:16:07.900"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:06.504" endtime="20221117 03:16:07.901"></status>
</kw>
<test id="s1-t1" name="Verify Modifying IP Address Multiple Times">
<kw name="Test Setup Execution" type="setup">
<doc>Test setup execution.</doc>
<kw name="Login" library="Redfish">
<doc>Assign BMC default values for username, password and auth arguments
and call parent class login method.</doc>
<msg timestamp="20221117 03:16:07.922" level="INFO">Attempt 1 of /redfish/v1/SessionService/Sessions</msg>
<msg timestamp="20221117 03:16:07.975" level="INFO">Response Time to /redfish/v1/SessionService/Sessions: 0.05281311925500631 seconds.</msg>
<msg timestamp="20221117 03:16:07.975" level="INFO">{'@odata.id': '/redfish/v1/SessionService/Sessions/ZbwKMaLTVd', '@odata.type': '#Session.v1_5_0.Session', 'ClientOriginIPAddress': '::ffff:9.3.84.152', 'Description': 'Manager User Session', 'Id': 'ZbwKMaLTVd', 'Name': 'User Session', 'Oem': {'OpenBMC': {'@odata.type': '#OemSession.v1_0_0.Session', 'ClientID': ''}}, 'UserName': 'service'}</msg>
<msg timestamp="20221117 03:16:07.976" level="INFO">Login returned code 201: {
  "@odata.id": "/redfish/v1/SessionService/Sessions/ZbwKMaLTVd",
  "@odata.type": "#Session.v1_5_0.Session",
  "ClientOriginIPAddress": "::ffff:9.3.84.152",
  "Description": "Manager User Session",
  "Id": "ZbwKMaLTVd",
  "Name": "User Session",
  "Oem": {
    "OpenBMC": {
      "@odata.type": "#OemSession.v1_0_0.Session",
      "ClientID": ""
    }
  },
  "UserName": "service"
}</msg>
<status status="PASS" starttime="20221117 03:16:07.903" endtime="20221117 03:16:07.976"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:08.066" level="INFO">#(CST) 2022/11/17 03:16:08.065947 -    0.196233 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:08.084" level="INFO">#(CST) 2022/11/17 03:16:08.084077 -    0.018131 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:08.084" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:08.084" level="INFO">#(CST) 2022/11/17 03:16:08.084404 -    0.000327 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:08.085" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:08.085" level="INFO">#(CST) 2022/11/17 03:16:08.084856 -    0.000451 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:08.096" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:08.100" level="INFO">#(CST) 2022/11/17 03:16:08.100261 -    0.015405 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:08.101" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:08.134" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:08.135" level="INFO">#(CST) 2022/11/17 03:16:08.134489 -    0.034228 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:08.135" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:08.148" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:08.148" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:08.234" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:08.234" level="INFO">#(CST) 2022/11/17 03:16:08.234246 -    0.099756 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:08.242" level="INFO">#(CST) 2022/11/17 03:16:08.242306 -    0.008060 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:08.267" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:08.283" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:07.977" endtime="20221117 03:16:08.283"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:16:08.297" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:16:08.313" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014486691914498806 seconds.</msg>
<msg timestamp="20221117 03:16:08.313" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:16:08.284" endtime="20221117 03:16:08.313"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:16:08.316" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMa...</msg>
<status status="PASS" starttime="20221117 03:16:08.315" endtime="20221117 03:16:08.316"></status>
</kw>
<msg timestamp="20221117 03:16:08.317" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMa...</msg>
<status status="PASS" starttime="20221117 03:16:07.976" endtime="20221117 03:16:08.317"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{network_configurations}</arg>
</arguments>
<msg timestamp="20221117 03:16:08.318" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMa...</msg>
<status status="PASS" starttime="20221117 03:16:08.318" endtime="20221117 03:16:08.319"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:08.407" level="INFO">#(CST) 2022/11/17 03:16:08.407017 -    0.164711 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:08.425" level="INFO">#(CST) 2022/11/17 03:16:08.424510 -    0.017493 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:08.425" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:08.425" level="INFO">#(CST) 2022/11/17 03:16:08.424957 -    0.000448 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:08.425" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:08.425" level="INFO">#(CST) 2022/11/17 03:16:08.425420 -    0.000463 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:08.436" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:08.441" level="INFO">#(CST) 2022/11/17 03:16:08.440869 -    0.015449 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:08.441" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:08.476" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:08.476" level="INFO">#(CST) 2022/11/17 03:16:08.476331 -    0.035462 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:08.477" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:08.490" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:08.490" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:08.575" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:08.575" level="INFO">#(CST) 2022/11/17 03:16:08.574949 -    0.098618 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:08.583" level="INFO">#(CST) 2022/11/17 03:16:08.583086 -    0.008137 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:08.594" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:08.609" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:08.321" endtime="20221117 03:16:08.609"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:16:08.611" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:16:08.610" endtime="20221117 03:16:08.611"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:16:08.685" level="INFO">#(CST) 2022/11/17 03:16:08.684725 -    0.101638 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:16:08.701" level="INFO">#(CST) 2022/11/17 03:16:08.700711 -    0.015986 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:16:08.701" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:08.701" level="INFO">#(CST) 2022/11/17 03:16:08.701042 -    0.000331 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:08.701" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:08.702" level="INFO">#(CST) 2022/11/17 03:16:08.701460 -    0.000419 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:08.711" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:08.716" level="INFO">#(CST) 2022/11/17 03:16:08.715487 -    0.014026 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:08.716" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:08.747" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:08.747" level="INFO">#(CST) 2022/11/17 03:16:08.747402 -    0.031915 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:08.748" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:08.759" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:08.759" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:16:08.853" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:08.854" level="INFO">#(CST) 2022/11/17 03:16:08.853425 -    0.106023 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:08.861" level="INFO">#(CST) 2022/11/17 03:16:08.861029 -    0.007605 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:08.871" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:08.884" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/24 brd 10.7.7.255 scope global eth0
    in...</msg>
<msg timestamp="20221117 03:16:08.884" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:16:08.884" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:16:08.611" endtime="20221117 03:16:08.884"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:16:08.885" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:16:08.886" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/24 brd 10.7.7.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:16:08.885" endtime="20221117 03:16:08.886"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:16:08.887" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:16:08.887" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.8/24 brd 10.7.7.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:08.886" endtime="20221117 03:16:08.887"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:16:08.888" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:16:08.888" endtime="20221117 03:16:08.888"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:08.890" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:08.889" endtime="20221117 03:16:08.890"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:08.891" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:16:08.890" endtime="20221117 03:16:08.891"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:08.891" endtime="20221117 03:16:08.892"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:08.888" endtime="20221117 03:16:08.892"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/24 brd 10.7.7.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:08.893" level="INFO">@{if_info} = [ inet | 10.7.7.8/24 | brd | 10.7.7.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:08.892" endtime="20221117 03:16:08.893"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:08.894" level="INFO">${ip_n_prefix} = 10.7.7.8/24</msg>
<status status="PASS" starttime="20221117 03:16:08.894" endtime="20221117 03:16:08.894"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:08.895" endtime="20221117 03:16:08.895"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:08.892" endtime="20221117 03:16:08.895"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:08.896" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:08.896" endtime="20221117 03:16:08.896"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:08.897" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:16:08.897" endtime="20221117 03:16:08.897"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:08.898" endtime="20221117 03:16:08.899"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:08.895" endtime="20221117 03:16:08.899"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:08.888" endtime="20221117 03:16:08.899"></status>
</kw>
<msg timestamp="20221117 03:16:08.899" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.8/24', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:16:08.319" endtime="20221117 03:16:08.899"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${ip_data}</arg>
</arguments>
<msg timestamp="20221117 03:16:08.900" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.8/24', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:16:08.900" endtime="20221117 03:16:08.900"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:07.902" endtime="20221117 03:16:08.900"></status>
</kw>
<kw name="Add IP Address" library="bmc_network_utils">
<doc>Add IP Address To BMC.</doc>
<arguments>
<arg>${test_ipv4_addr}</arg>
<arg>${test_subnet_mask}</arg>
<arg>${test_gateway}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:16:08.903" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:16:08.902" endtime="20221117 03:16:08.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Address=${ip}</arg>
<arg>SubnetMask=${subnet_mask}</arg>
<arg>Gateway=${gateway}</arg>
</arguments>
<assign>
<var>${ip_data}</var>
</assign>
<msg timestamp="20221117 03:16:08.904" level="INFO">${ip_data} = {'Address': '10.7.7.7', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}</msg>
<status status="PASS" starttime="20221117 03:16:08.903" endtime="20221117 03:16:08.904"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:16:08.905" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:16:08.905" endtime="20221117 03:16:08.905"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>${network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:08.976" level="INFO">#(CST) 2022/11/17 03:16:08.975511 -    0.114482 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:08.991" level="INFO">#(CST) 2022/11/17 03:16:08.990952 -    0.015442 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:08.991" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:08.991" level="INFO">#(CST) 2022/11/17 03:16:08.991255 -    0.000302 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:08.992" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:08.992" level="INFO">#(CST) 2022/11/17 03:16:08.991650 -    0.000395 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:09.000" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:09.004" level="INFO">#(CST) 2022/11/17 03:16:09.003879 -    0.012230 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:09.004" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:09.034" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:09.034" level="INFO">#(CST) 2022/11/17 03:16:09.033732 -    0.029853 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:09.034" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:09.045" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:09.045" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:09.130" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:09.131" level="INFO">#(CST) 2022/11/17 03:16:09.130458 -    0.096726 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:09.138" level="INFO">#(CST) 2022/11/17 03:16:09.138233 -    0.007775 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:09.148" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:09.162" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:08.906" endtime="20221117 03:16:09.163"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:16:09.175" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:16:09.190" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.013970545027405024 seconds.</msg>
<msg timestamp="20221117 03:16:09.190" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:16:09.163" endtime="20221117 03:16:09.190"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:16:09.192" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMa...</msg>
<status status="PASS" starttime="20221117 03:16:09.191" endtime="20221117 03:16:09.192"></status>
</kw>
<msg timestamp="20221117 03:16:09.192" level="INFO">${network_configurations} = [{'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}, {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:16:08.906" endtime="20221117 03:16:09.192"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${network_configurations}</arg>
</arguments>
<assign>
<var>${num_entries}</var>
</assign>
<msg timestamp="20221117 03:16:09.193" level="INFO">Length is 2</msg>
<msg timestamp="20221117 03:16:09.193" level="INFO">${num_entries} = 2</msg>
<status status="PASS" starttime="20221117 03:16:09.192" endtime="20221117 03:16:09.193"></status>
</kw>
<kw name="${INDEX} IN RANGE [ 0 | ${num_entries} ]" type="for">
<kw name="${INDEX} = 0" type="foritem">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:09.194" endtime="20221117 03:16:09.194"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:09.193" endtime="20221117 03:16:09.194"></status>
</kw>
<kw name="${INDEX} = 1" type="foritem">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:09.195" endtime="20221117 03:16:09.195"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:09.194" endtime="20221117 03:16:09.195"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:09.193" endtime="20221117 03:16:09.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Set Variable</arg>
<arg>${HTTP_OK},${HTTP_NO_CONTENT}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${valid_status_codes}</arg>
</arguments>
<assign>
<var>${valid_status_codes}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${HTTP_OK},${HTTP_NO_CONTENT}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:09.197" endtime="20221117 03:16:09.197"></status>
</kw>
<msg timestamp="20221117 03:16:09.197" level="INFO">${valid_status_codes} = 200,204</msg>
<status status="PASS" starttime="20221117 03:16:09.196" endtime="20221117 03:16:09.197"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:09.198" endtime="20221117 03:16:09.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:16:09.199" level="INFO">${data} = {'IPv4StaticAddresses': [{}, {}, {'Address': '10.7.7.7', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}]}</msg>
<status status="PASS" starttime="20221117 03:16:09.199" endtime="20221117 03:16:09.199"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:09.263" level="INFO">#(CST) 2022/11/17 03:16:09.262653 -    0.124420 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:09.277" level="INFO">#(CST) 2022/11/17 03:16:09.276951 -    0.014298 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:09.277" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:09.277" level="INFO">#(CST) 2022/11/17 03:16:09.277257 -    0.000306 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:09.278" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:09.278" level="INFO">#(CST) 2022/11/17 03:16:09.277659 -    0.000402 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:09.287" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:09.291" level="INFO">#(CST) 2022/11/17 03:16:09.290539 -    0.012879 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:09.291" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:09.322" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:09.322" level="INFO">#(CST) 2022/11/17 03:16:09.322403 -    0.031864 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:09.323" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:09.334" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:09.334" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:09.419" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:09.419" level="INFO">#(CST) 2022/11/17 03:16:09.419077 -    0.096674 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:09.427" level="INFO">#(CST) 2022/11/17 03:16:09.426476 -    0.007400 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:09.436" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:09.452" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:09.200" endtime="20221117 03:16:09.452"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:16:09.453" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:16:09.452" endtime="20221117 03:16:09.453"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:16:09.466" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:16:09.498" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.030986026860773563 seconds.</msg>
<status status="PASS" starttime="20221117 03:16:09.454" endtime="20221117 03:16:09.498"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' != '${HTTP_OK},${HTTP_NO_CONTENT}'</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:09.499" endtime="20221117 03:16:09.499"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:16:27.501" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:16:09.500" endtime="20221117 03:16:27.501"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:16:27.509" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:16:27.509" endtime="20221117 03:16:27.509"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:16:27.517" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:16:30.535" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:16:30.535" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.349 ms
64 bytes from rain40bmc.aus.stglabs....</msg>
<status status="PASS" starttime="20221117 03:16:27.510" endtime="20221117 03:16:30.536"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:16:30.538" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.349 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.257 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.248 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.259 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.248/0.278/0.349/0.042 ms</msg>
<status status="PASS" starttime="20221117 03:16:30.537" endtime="20221117 03:16:30.539"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:30.539" endtime="20221117 03:16:30.540"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:27.507" endtime="20221117 03:16:30.541"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:27.507" endtime="20221117 03:16:30.541"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:27.502" endtime="20221117 03:16:30.541"></status>
</kw>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:30.658" level="INFO">#(CST) 2022/11/17 03:16:30.657485 -   21.231008 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:30.676" level="INFO">#(CST) 2022/11/17 03:16:30.675436 -    0.017951 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:30.676" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:30.676" level="INFO">#(CST) 2022/11/17 03:16:30.675858 -    0.000422 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:30.676" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:30.677" level="INFO">#(CST) 2022/11/17 03:16:30.676499 -    0.000641 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:30.687" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:30.692" level="INFO">#(CST) 2022/11/17 03:16:30.692093 -    0.015594 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:30.692" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:30.727" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:30.727" level="INFO">#(CST) 2022/11/17 03:16:30.727322 -    0.035228 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:30.727" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:30.741" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:30.741" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:30.825" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:30.826" level="INFO">#(CST) 2022/11/17 03:16:30.825439 -    0.098117 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:30.834" level="INFO">#(CST) 2022/11/17 03:16:30.833877 -    0.008438 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:30.845" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:30.861" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:30.544" endtime="20221117 03:16:30.861"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:16:30.862" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:16:30.861" endtime="20221117 03:16:30.862"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:16:30.937" level="INFO">#(CST) 2022/11/17 03:16:30.937369 -    0.103492 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:16:30.953" level="INFO">#(CST) 2022/11/17 03:16:30.953360 -    0.015991 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:16:30.954" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:30.954" level="INFO">#(CST) 2022/11/17 03:16:30.953669 -    0.000309 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:30.954" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:30.954" level="INFO">#(CST) 2022/11/17 03:16:30.954093 -    0.000424 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:30.964" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:30.968" level="INFO">#(CST) 2022/11/17 03:16:30.968291 -    0.014198 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:30.969" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:31.000" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:31.000" level="INFO">#(CST) 2022/11/17 03:16:30.999817 -    0.031526 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:31.000" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:31.012" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:31.012" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:16:31.096" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:31.097" level="INFO">#(CST) 2022/11/17 03:16:31.096505 -    0.096688 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:31.105" level="INFO">#(CST) 2022/11/17 03:16:31.104664 -    0.008159 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:31.115" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:31.129" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:16:31.129" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:16:31.129" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:16:30.863" endtime="20221117 03:16:31.129"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:16:31.130" level="INFO">4 out of 5 lines matched</msg>
<msg timestamp="20221117 03:16:31.130" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 10.7.7.8/24 brd 10.7.7.255 scope global eth0
    inet 9.41.164.249/24 brd ...</msg>
<status status="PASS" starttime="20221117 03:16:31.130" endtime="20221117 03:16:31.130"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:16:31.131" level="INFO">4 lines returned</msg>
<msg timestamp="20221117 03:16:31.132" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 10.7.7.8/24 brd 10.7.7.255 scope global eth0 |     inet 9.41.164.249...</msg>
<status status="PASS" starttime="20221117 03:16:31.131" endtime="20221117 03:16:31.132"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:16:31.133" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:16:31.132" endtime="20221117 03:16:31.133"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:31.134" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:31.134" endtime="20221117 03:16:31.134"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:31.135" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:16:31.135" endtime="20221117 03:16:31.136"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:31.136" endtime="20221117 03:16:31.137"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:31.133" endtime="20221117 03:16:31.137"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:31.138" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:31.137" endtime="20221117 03:16:31.138"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:31.139" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:16:31.138" endtime="20221117 03:16:31.139"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:31.139" endtime="20221117 03:16:31.140"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:31.137" endtime="20221117 03:16:31.140"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/24 brd 10.7.7.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:31.141" level="INFO">@{if_info} = [ inet | 10.7.7.8/24 | brd | 10.7.7.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:31.141" endtime="20221117 03:16:31.141"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:31.142" level="INFO">${ip_n_prefix} = 10.7.7.8/24</msg>
<status status="PASS" starttime="20221117 03:16:31.142" endtime="20221117 03:16:31.142"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:31.143" endtime="20221117 03:16:31.143"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:31.140" endtime="20221117 03:16:31.143"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:31.193" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:31.144" endtime="20221117 03:16:31.193"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:31.193" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:16:31.193" endtime="20221117 03:16:31.194"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:31.194" endtime="20221117 03:16:31.194"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:31.143" endtime="20221117 03:16:31.194"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:31.133" endtime="20221117 03:16:31.194"></status>
</kw>
<msg timestamp="20221117 03:16:31.195" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.7/16 | 10.7.7.8/24 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:16:30.543" endtime="20221117 03:16:31.195"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:31.195" endtime="20221117 03:16:31.196"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:30.542" endtime="20221117 03:16:31.196"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:31.258" level="INFO">#(CST) 2022/11/17 03:16:31.257821 -    0.153157 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:31.271" level="INFO">#(CST) 2022/11/17 03:16:31.271309 -    0.013488 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:31.272" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:31.272" level="INFO">#(CST) 2022/11/17 03:16:31.271583 -    0.000274 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:31.272" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:31.272" level="INFO">#(CST) 2022/11/17 03:16:31.272002 -    0.000419 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:31.281" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:31.284" level="INFO">#(CST) 2022/11/17 03:16:31.284215 -    0.012214 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:31.284" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:31.314" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:31.314" level="INFO">#(CST) 2022/11/17 03:16:31.313567 -    0.029351 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:31.314" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:31.325" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:31.326" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:31.409" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:31.410" level="INFO">#(CST) 2022/11/17 03:16:31.409542 -    0.095975 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:31.418" level="INFO">#(CST) 2022/11/17 03:16:31.417553 -    0.008011 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:31.428" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:31.443" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:31.198" endtime="20221117 03:16:31.444"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:16:31.457" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:16:31.471" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014081273693591356 seconds.</msg>
<msg timestamp="20221117 03:16:31.472" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:16:31.444" endtime="20221117 03:16:31.472"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:16:31.473" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask':...</msg>
<status status="PASS" starttime="20221117 03:16:31.472" endtime="20221117 03:16:31.473"></status>
</kw>
<msg timestamp="20221117 03:16:31.473" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask':...</msg>
<status status="PASS" starttime="20221117 03:16:31.197" endtime="20221117 03:16:31.473"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:31.543" level="INFO">#(CST) 2022/11/17 03:16:31.542782 -    0.125229 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:31.558" level="INFO">#(CST) 2022/11/17 03:16:31.558102 -    0.015320 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:31.558" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:31.558" level="INFO">#(CST) 2022/11/17 03:16:31.558396 -    0.000294 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:31.559" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:31.559" level="INFO">#(CST) 2022/11/17 03:16:31.558787 -    0.000391 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:31.568" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:31.573" level="INFO">#(CST) 2022/11/17 03:16:31.572455 -    0.013668 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:31.573" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:31.603" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:31.603" level="INFO">#(CST) 2022/11/17 03:16:31.602885 -    0.030429 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:31.603" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:31.615" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:31.615" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:31.699" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:31.699" level="INFO">#(CST) 2022/11/17 03:16:31.699227 -    0.096342 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:31.708" level="INFO">#(CST) 2022/11/17 03:16:31.707360 -    0.008134 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:31.718" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:31.733" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:31.474" endtime="20221117 03:16:31.734"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:16:31.735" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:16:31.734" endtime="20221117 03:16:31.735"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:16:31.811" level="INFO">#(CST) 2022/11/17 03:16:31.810472 -    0.103112 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:16:31.827" level="INFO">#(CST) 2022/11/17 03:16:31.826551 -    0.016078 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:16:31.827" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:31.827" level="INFO">#(CST) 2022/11/17 03:16:31.826871 -    0.000320 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:31.827" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:31.827" level="INFO">#(CST) 2022/11/17 03:16:31.827281 -    0.000410 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:31.837" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:31.841" level="INFO">#(CST) 2022/11/17 03:16:31.841409 -    0.014128 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:31.842" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:31.872" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:31.873" level="INFO">#(CST) 2022/11/17 03:16:31.872492 -    0.031083 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:31.873" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:31.885" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:31.885" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:16:31.979" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:31.979" level="INFO">#(CST) 2022/11/17 03:16:31.979132 -    0.106640 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:31.988" level="INFO">#(CST) 2022/11/17 03:16:31.987386 -    0.008255 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:31.998" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:32.011" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:16:32.012" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:16:32.012" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:16:31.735" endtime="20221117 03:16:32.012"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:16:32.013" level="INFO">4 out of 5 lines matched</msg>
<msg timestamp="20221117 03:16:32.013" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 10.7.7.8/24 brd 10.7.7.255 scope global eth0
    inet 9.41.164.249/24 brd ...</msg>
<status status="PASS" starttime="20221117 03:16:32.012" endtime="20221117 03:16:32.013"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:16:32.014" level="INFO">4 lines returned</msg>
<msg timestamp="20221117 03:16:32.014" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 10.7.7.8/24 brd 10.7.7.255 scope global eth0 |     inet 9.41.164.249...</msg>
<status status="PASS" starttime="20221117 03:16:32.014" endtime="20221117 03:16:32.014"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:16:32.015" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:16:32.015" endtime="20221117 03:16:32.015"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:32.017" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:32.016" endtime="20221117 03:16:32.017"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:32.018" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:16:32.017" endtime="20221117 03:16:32.018"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:32.018" endtime="20221117 03:16:32.019"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.016" endtime="20221117 03:16:32.019"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:32.020" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:32.020" endtime="20221117 03:16:32.020"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:32.021" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:16:32.021" endtime="20221117 03:16:32.021"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:32.022" endtime="20221117 03:16:32.022"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.019" endtime="20221117 03:16:32.022"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/24 brd 10.7.7.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:32.024" level="INFO">@{if_info} = [ inet | 10.7.7.8/24 | brd | 10.7.7.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:32.023" endtime="20221117 03:16:32.024"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:32.025" level="INFO">${ip_n_prefix} = 10.7.7.8/24</msg>
<status status="PASS" starttime="20221117 03:16:32.024" endtime="20221117 03:16:32.025"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:32.025" endtime="20221117 03:16:32.026"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.023" endtime="20221117 03:16:32.026"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:32.027" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:32.026" endtime="20221117 03:16:32.027"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:32.028" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:16:32.027" endtime="20221117 03:16:32.028"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:32.028" endtime="20221117 03:16:32.029"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.026" endtime="20221117 03:16:32.029"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.015" endtime="20221117 03:16:32.029"></status>
</kw>
<msg timestamp="20221117 03:16:32.029" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.7/16', '10.7.7.8/24', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:16:31.474" endtime="20221117 03:16:32.029"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:32.030" endtime="20221117 03:16:32.032"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.030" endtime="20221117 03:16:32.032"></status>
</kw>
<kw name="${network_configuration} = {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:32.032" endtime="20221117 03:16:32.033"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.032" endtime="20221117 03:16:32.033"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:32.034" endtime="20221117 03:16:32.035"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.033" endtime="20221117 03:16:32.035"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.030" endtime="20221117 03:16:32.035"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:31.196" endtime="20221117 03:16:32.035"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:08.901" endtime="20221117 03:16:32.035"></status>
</kw>
<kw name="Update IP Address" library="bmc_network_utils">
<doc>Update and verify IP address of BMC.</doc>
<arguments>
<arg>${test_ipv4_addr}</arg>
<arg>${test_ipv4_addr2}</arg>
<arg>${test_subnet_mask}</arg>
<arg>${test_gateway}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:16:32.038" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:16:32.037" endtime="20221117 03:16:32.038"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:16:32.039" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:16:32.038" endtime="20221117 03:16:32.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Address=${new_ip}</arg>
<arg>SubnetMask=${netmask}</arg>
<arg>Gateway=${gw_ip}</arg>
</arguments>
<assign>
<var>${ip_data}</var>
</assign>
<msg timestamp="20221117 03:16:32.040" level="INFO">${ip_data} = {'Address': '10.7.7.8', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}</msg>
<status status="PASS" starttime="20221117 03:16:32.039" endtime="20221117 03:16:32.040"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:32.113" level="INFO">#(CST) 2022/11/17 03:16:32.112634 -    0.125247 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:32.128" level="INFO">#(CST) 2022/11/17 03:16:32.127549 -    0.014915 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:32.128" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:32.128" level="INFO">#(CST) 2022/11/17 03:16:32.127928 -    0.000379 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:32.128" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:32.128" level="INFO">#(CST) 2022/11/17 03:16:32.128361 -    0.000433 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:32.138" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:32.141" level="INFO">#(CST) 2022/11/17 03:16:32.141394 -    0.013033 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:32.142" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:32.172" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:32.172" level="INFO">#(CST) 2022/11/17 03:16:32.172166 -    0.030772 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:32.172" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:32.184" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:32.184" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:32.268" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:32.269" level="INFO">#(CST) 2022/11/17 03:16:32.268443 -    0.096277 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:32.276" level="INFO">#(CST) 2022/11/17 03:16:32.276129 -    0.007686 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:32.286" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:32.302" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:32.041" endtime="20221117 03:16:32.302"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:16:32.316" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:16:32.330" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014021703973412514 seconds.</msg>
<msg timestamp="20221117 03:16:32.331" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:16:32.303" endtime="20221117 03:16:32.331"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:16:32.332" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask':...</msg>
<status status="PASS" starttime="20221117 03:16:32.331" endtime="20221117 03:16:32.332"></status>
</kw>
<msg timestamp="20221117 03:16:32.333" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask':...</msg>
<status status="PASS" starttime="20221117 03:16:32.040" endtime="20221117 03:16:32.333"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:32.335" endtime="20221117 03:16:32.335"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.334" endtime="20221117 03:16:32.335"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.333" endtime="20221117 03:16:32.336"></status>
</kw>
<kw name="${network_configuration} = {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:32.337" endtime="20221117 03:16:32.338"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.336" endtime="20221117 03:16:32.338"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.336" endtime="20221117 03:16:32.338"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:32.340" endtime="20221117 03:16:32.340"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.338" endtime="20221117 03:16:32.340"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.338" endtime="20221117 03:16:32.340"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.333" endtime="20221117 03:16:32.340"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<assign>
<var>${ip_found}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:32.341" endtime="20221117 03:16:32.342"></status>
</kw>
<msg timestamp="20221117 03:16:32.342" level="INFO">${ip_found} = True</msg>
<status status="PASS" starttime="20221117 03:16:32.341" endtime="20221117 03:16:32.342"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>${ip_found} == ${False}</arg>
<arg>${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:32.343" endtime="20221117 03:16:32.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:16:32.344" level="INFO">${data} = {'IPv4StaticAddresses': [{}, {'Address': '10.7.7.8', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}, {}]}</msg>
<status status="PASS" starttime="20221117 03:16:32.344" endtime="20221117 03:16:32.344"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:32.407" level="INFO">#(CST) 2022/11/17 03:16:32.407170 -    0.131041 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:32.422" level="INFO">#(CST) 2022/11/17 03:16:32.421596 -    0.014425 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:32.422" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:32.422" level="INFO">#(CST) 2022/11/17 03:16:32.421907 -    0.000312 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:32.422" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:32.422" level="INFO">#(CST) 2022/11/17 03:16:32.422307 -    0.000400 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:32.431" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:32.435" level="INFO">#(CST) 2022/11/17 03:16:32.435227 -    0.012919 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:32.435" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:32.466" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:32.466" level="INFO">#(CST) 2022/11/17 03:16:32.465767 -    0.030540 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:32.466" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:32.477" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:32.477" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:32.561" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:32.562" level="INFO">#(CST) 2022/11/17 03:16:32.561556 -    0.095789 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:32.569" level="INFO">#(CST) 2022/11/17 03:16:32.569184 -    0.007628 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:32.579" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:32.595" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:32.345" endtime="20221117 03:16:32.595"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:16:32.596" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:16:32.595" endtime="20221117 03:16:32.596"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=${valid_status_codes}</arg>
</arguments>
<msg timestamp="20221117 03:16:32.609" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:16:33.030" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.4207640248350799 seconds.</msg>
<status status="PASS" starttime="20221117 03:16:32.597" endtime="20221117 03:16:33.031"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:16:51.032" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:16:33.032" endtime="20221117 03:16:51.033"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:16:51.038" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:16:51.038" endtime="20221117 03:16:51.039"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:16:51.053" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:16:54.069" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:16:54.069" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.220 ms
64 bytes from rain40bmc.aus.stglabs....</msg>
<status status="PASS" starttime="20221117 03:16:51.039" endtime="20221117 03:16:54.069"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:16:54.072" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.220 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.260 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.358 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.320 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.220/0.289/0.358/0.055 ms</msg>
<status status="PASS" starttime="20221117 03:16:54.071" endtime="20221117 03:16:54.073"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:54.074" endtime="20221117 03:16:54.075"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:51.036" endtime="20221117 03:16:54.075"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:51.035" endtime="20221117 03:16:54.075"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:51.033" endtime="20221117 03:16:54.076"></status>
</kw>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${new_ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:54.166" level="INFO">#(CST) 2022/11/17 03:16:54.165472 -   21.596288 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:54.183" level="INFO">#(CST) 2022/11/17 03:16:54.182742 -    0.017270 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:54.183" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:54.183" level="INFO">#(CST) 2022/11/17 03:16:54.183175 -    0.000433 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:54.184" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:54.184" level="INFO">#(CST) 2022/11/17 03:16:54.183671 -    0.000496 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:54.194" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:54.199" level="INFO">#(CST) 2022/11/17 03:16:54.198822 -    0.015151 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:54.199" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:54.234" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:54.234" level="INFO">#(CST) 2022/11/17 03:16:54.233578 -    0.034757 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:54.234" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:54.247" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:54.247" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:54.332" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:54.333" level="INFO">#(CST) 2022/11/17 03:16:54.332417 -    0.098839 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:54.341" level="INFO">#(CST) 2022/11/17 03:16:54.340682 -    0.008265 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:54.351" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:54.367" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:54.079" endtime="20221117 03:16:54.367"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:16:54.369" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:16:54.368" endtime="20221117 03:16:54.369"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:16:54.445" level="INFO">#(CST) 2022/11/17 03:16:54.444950 -    0.104268 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:16:54.461" level="INFO">#(CST) 2022/11/17 03:16:54.461060 -    0.016110 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:16:54.461" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:54.461" level="INFO">#(CST) 2022/11/17 03:16:54.461392 -    0.000332 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:54.462" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:54.462" level="INFO">#(CST) 2022/11/17 03:16:54.461824 -    0.000432 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:54.472" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:54.476" level="INFO">#(CST) 2022/11/17 03:16:54.476113 -    0.014289 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:54.476" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:54.509" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:54.509" level="INFO">#(CST) 2022/11/17 03:16:54.509306 -    0.033193 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:54.509" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:54.522" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:54.522" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:16:54.606" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:54.606" level="INFO">#(CST) 2022/11/17 03:16:54.605826 -    0.096520 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:54.615" level="INFO">#(CST) 2022/11/17 03:16:54.614700 -    0.008873 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:54.626" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:54.640" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:16:54.640" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:16:54.640" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:16:54.369" endtime="20221117 03:16:54.640"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:16:54.641" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:16:54.641" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:16:54.641" endtime="20221117 03:16:54.642"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:16:54.642" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:16:54.643" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:54.642" endtime="20221117 03:16:54.643"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:16:54.644" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:16:54.643" endtime="20221117 03:16:54.644"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:54.645" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:54.645" endtime="20221117 03:16:54.645"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:54.647" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:16:54.646" endtime="20221117 03:16:54.647"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:54.647" endtime="20221117 03:16:54.648"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:54.644" endtime="20221117 03:16:54.648"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:54.649" level="INFO">@{if_info} = [ inet | 10.7.7.8/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:54.648" endtime="20221117 03:16:54.649"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:54.650" level="INFO">${ip_n_prefix} = 10.7.7.8/16</msg>
<status status="PASS" starttime="20221117 03:16:54.649" endtime="20221117 03:16:54.650"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:54.650" endtime="20221117 03:16:54.651"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:54.648" endtime="20221117 03:16:54.651"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:54.652" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:54.652" endtime="20221117 03:16:54.652"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:54.653" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:16:54.653" endtime="20221117 03:16:54.653"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:54.654" endtime="20221117 03:16:54.654"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:54.651" endtime="20221117 03:16:54.654"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:54.644" endtime="20221117 03:16:54.654"></status>
</kw>
<msg timestamp="20221117 03:16:54.655" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.8/16 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:16:54.077" endtime="20221117 03:16:54.655"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:54.655" endtime="20221117 03:16:54.656"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:54.076" endtime="20221117 03:16:54.656"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:54.732" level="INFO">#(CST) 2022/11/17 03:16:54.731426 -    0.116726 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:54.747" level="INFO">#(CST) 2022/11/17 03:16:54.747123 -    0.015698 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:54.747" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:54.748" level="INFO">#(CST) 2022/11/17 03:16:54.747437 -    0.000313 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:54.748" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:54.748" level="INFO">#(CST) 2022/11/17 03:16:54.747854 -    0.000417 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:54.757" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:54.762" level="INFO">#(CST) 2022/11/17 03:16:54.761620 -    0.013767 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:54.762" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:54.794" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:54.794" level="INFO">#(CST) 2022/11/17 03:16:54.793569 -    0.031949 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:54.794" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:54.806" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:54.806" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:54.892" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:54.892" level="INFO">#(CST) 2022/11/17 03:16:54.891705 -    0.098136 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:54.900" level="INFO">#(CST) 2022/11/17 03:16:54.900092 -    0.008387 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:54.911" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:54.926" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:54.658" endtime="20221117 03:16:54.926"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:16:54.939" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:16:54.956" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.01626835810020566 seconds.</msg>
<msg timestamp="20221117 03:16:54.957" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:16:54.927" endtime="20221117 03:16:54.957"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:16:54.958" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:16:54.957" endtime="20221117 03:16:54.959"></status>
</kw>
<msg timestamp="20221117 03:16:54.959" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:16:54.657" endtime="20221117 03:16:54.959"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:55.053" level="INFO">#(CST) 2022/11/17 03:16:55.053290 -    0.153198 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:55.072" level="INFO">#(CST) 2022/11/17 03:16:55.071630 -    0.018341 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:55.072" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:55.072" level="INFO">#(CST) 2022/11/17 03:16:55.072007 -    0.000376 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:55.072" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:55.073" level="INFO">#(CST) 2022/11/17 03:16:55.072485 -    0.000479 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:55.084" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:55.088" level="INFO">#(CST) 2022/11/17 03:16:55.088342 -    0.015857 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:55.089" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:55.125" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:55.125" level="INFO">#(CST) 2022/11/17 03:16:55.124954 -    0.036612 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:55.125" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:55.138" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:55.139" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:55.225" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:55.225" level="INFO">#(CST) 2022/11/17 03:16:55.225007 -    0.100053 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:55.234" level="INFO">#(CST) 2022/11/17 03:16:55.233354 -    0.008347 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:55.244" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:55.260" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:54.961" endtime="20221117 03:16:55.260"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:16:55.261" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:16:55.261" endtime="20221117 03:16:55.262"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:16:55.337" level="INFO">#(CST) 2022/11/17 03:16:55.337321 -    0.103968 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:16:55.353" level="INFO">#(CST) 2022/11/17 03:16:55.353220 -    0.015898 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:16:55.353" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:55.354" level="INFO">#(CST) 2022/11/17 03:16:55.353537 -    0.000317 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:55.354" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:55.354" level="INFO">#(CST) 2022/11/17 03:16:55.353976 -    0.000438 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:55.364" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:55.368" level="INFO">#(CST) 2022/11/17 03:16:55.368071 -    0.014096 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:55.368" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:55.401" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:55.401" level="INFO">#(CST) 2022/11/17 03:16:55.401385 -    0.033314 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:55.402" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:55.414" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:55.414" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:16:55.500" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:55.501" level="INFO">#(CST) 2022/11/17 03:16:55.500532 -    0.099146 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:55.509" level="INFO">#(CST) 2022/11/17 03:16:55.508748 -    0.008217 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:55.519" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:55.533" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:16:55.533" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:16:55.533" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:16:55.262" endtime="20221117 03:16:55.533"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:16:55.534" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:16:55.534" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:16:55.534" endtime="20221117 03:16:55.535"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:16:55.535" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:16:55.536" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:55.535" endtime="20221117 03:16:55.536"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:16:55.537" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:16:55.536" endtime="20221117 03:16:55.537"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:55.538" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:55.538" endtime="20221117 03:16:55.538"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:55.539" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:16:55.539" endtime="20221117 03:16:55.539"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:55.540" endtime="20221117 03:16:55.540"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.537" endtime="20221117 03:16:55.541"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:55.542" level="INFO">@{if_info} = [ inet | 10.7.7.8/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:55.541" endtime="20221117 03:16:55.542"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:55.543" level="INFO">${ip_n_prefix} = 10.7.7.8/16</msg>
<status status="PASS" starttime="20221117 03:16:55.542" endtime="20221117 03:16:55.543"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:55.543" endtime="20221117 03:16:55.544"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.541" endtime="20221117 03:16:55.544"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:55.545" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:55.545" endtime="20221117 03:16:55.545"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:55.546" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:16:55.546" endtime="20221117 03:16:55.546"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:55.547" endtime="20221117 03:16:55.547"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.544" endtime="20221117 03:16:55.547"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.537" endtime="20221117 03:16:55.547"></status>
</kw>
<msg timestamp="20221117 03:16:55.548" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.8/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:16:54.960" endtime="20221117 03:16:55.548"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:55.549" endtime="20221117 03:16:55.549"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.548" endtime="20221117 03:16:55.550"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:55.550" endtime="20221117 03:16:55.551"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.550" endtime="20221117 03:16:55.551"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.548" endtime="20221117 03:16:55.551"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:54.657" endtime="20221117 03:16:55.551"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:32.036" endtime="20221117 03:16:55.552"></status>
</kw>
<kw name="Update IP Address" library="bmc_network_utils">
<doc>Update and verify IP address of BMC.</doc>
<arguments>
<arg>${test_ipv4_addr}</arg>
<arg>${test_ipv4_addr2}</arg>
<arg>${test_subnet_mask}</arg>
<arg>${test_gateway}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:16:55.554" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:16:55.554" endtime="20221117 03:16:55.554"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:16:55.555" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:16:55.555" endtime="20221117 03:16:55.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Address=${new_ip}</arg>
<arg>SubnetMask=${netmask}</arg>
<arg>Gateway=${gw_ip}</arg>
</arguments>
<assign>
<var>${ip_data}</var>
</assign>
<msg timestamp="20221117 03:16:55.556" level="INFO">${ip_data} = {'Address': '10.7.7.8', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}</msg>
<status status="PASS" starttime="20221117 03:16:55.556" endtime="20221117 03:16:55.557"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:55.626" level="INFO">#(CST) 2022/11/17 03:16:55.626316 -    0.117567 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:55.641" level="INFO">#(CST) 2022/11/17 03:16:55.641360 -    0.015044 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:55.642" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:55.642" level="INFO">#(CST) 2022/11/17 03:16:55.641666 -    0.000306 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:55.642" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:55.642" level="INFO">#(CST) 2022/11/17 03:16:55.642073 -    0.000407 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:55.652" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:55.656" level="INFO">#(CST) 2022/11/17 03:16:55.655476 -    0.013404 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:55.656" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:55.688" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:55.688" level="INFO">#(CST) 2022/11/17 03:16:55.687769 -    0.032293 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:55.688" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:55.700" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:55.700" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:55.795" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:55.795" level="INFO">#(CST) 2022/11/17 03:16:55.794664 -    0.106895 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:55.803" level="INFO">#(CST) 2022/11/17 03:16:55.802705 -    0.008041 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:55.813" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:55.829" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:55.558" endtime="20221117 03:16:55.829"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:16:55.842" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:16:55.857" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014400141779333353 seconds.</msg>
<msg timestamp="20221117 03:16:55.858" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:16:55.829" endtime="20221117 03:16:55.858"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:16:55.860" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:16:55.859" endtime="20221117 03:16:55.860"></status>
</kw>
<msg timestamp="20221117 03:16:55.860" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:16:55.557" endtime="20221117 03:16:55.860"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:55.863" endtime="20221117 03:16:55.864"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.862" endtime="20221117 03:16:55.864"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.861" endtime="20221117 03:16:55.864"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:55.867" endtime="20221117 03:16:55.867"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.865" endtime="20221117 03:16:55.867"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.864" endtime="20221117 03:16:55.867"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.861" endtime="20221117 03:16:55.867"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<assign>
<var>${ip_found}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<msg timestamp="20221117 03:16:55.870" level="FAIL">10.7.7.7 does not exist on BMC</msg>
<status status="FAIL" starttime="20221117 03:16:55.869" endtime="20221117 03:16:55.870"></status>
</kw>
<msg timestamp="20221117 03:16:55.871" level="INFO">${ip_found} = False</msg>
<status status="PASS" starttime="20221117 03:16:55.868" endtime="20221117 03:16:55.871"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>${ip_found} == ${False}</arg>
<arg>${ip} does not exist on BMC</arg>
</arguments>
<msg timestamp="20221117 03:16:55.872" level="INFO">Execution passed with message:
10.7.7.7 does not exist on BMC</msg>
<status status="PASS" starttime="20221117 03:16:55.871" endtime="20221117 03:16:55.872"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.552" endtime="20221117 03:16:55.873"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete IP Address</arg>
<arg>${test_ipv4_addr}</arg>
<arg>AND</arg>
<arg>Test Teardown Execution</arg>
</arguments>
<kw name="Delete IP Address" library="bmc_network_utils">
<doc>Delete IP Address Of BMC.</doc>
<arguments>
<arg>${test_ipv4_addr}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:16:55.876" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:16:55.876" endtime="20221117 03:16:55.876"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:16:55.877" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:16:55.877" endtime="20221117 03:16:55.878"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:55.965" level="INFO">#(CST) 2022/11/17 03:16:55.964395 -    0.161690 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:55.981" level="INFO">#(CST) 2022/11/17 03:16:55.980729 -    0.016334 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:55.981" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:55.981" level="INFO">#(CST) 2022/11/17 03:16:55.981056 -    0.000327 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:55.981" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:55.982" level="INFO">#(CST) 2022/11/17 03:16:55.981477 -    0.000421 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:55.992" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:55.996" level="INFO">#(CST) 2022/11/17 03:16:55.996196 -    0.014719 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:55.996" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:56.029" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:56.029" level="INFO">#(CST) 2022/11/17 03:16:56.029372 -    0.033176 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:56.030" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:56.042" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:56.042" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:56.127" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:56.127" level="INFO">#(CST) 2022/11/17 03:16:56.127177 -    0.097805 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:56.136" level="INFO">#(CST) 2022/11/17 03:16:56.136038 -    0.008861 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:56.147" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:56.163" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:55.879" endtime="20221117 03:16:56.163"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:16:56.178" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:16:56.193" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.013832879718393087 seconds.</msg>
<msg timestamp="20221117 03:16:56.193" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:16:56.164" endtime="20221117 03:16:56.193"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:16:56.194" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:16:56.194" endtime="20221117 03:16:56.194"></status>
</kw>
<msg timestamp="20221117 03:16:56.195" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:16:55.878" endtime="20221117 03:16:56.195"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:56.197" endtime="20221117 03:16:56.197"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:56.196" endtime="20221117 03:16:56.197"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:56.195" endtime="20221117 03:16:56.198"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:56.199" endtime="20221117 03:16:56.200"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:56.198" endtime="20221117 03:16:56.200"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:56.198" endtime="20221117 03:16:56.200"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:56.195" endtime="20221117 03:16:56.200"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<assign>
<var>${ip_found}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<msg timestamp="20221117 03:16:56.202" level="FAIL">10.7.7.7 does not exist on BMC</msg>
<status status="FAIL" starttime="20221117 03:16:56.201" endtime="20221117 03:16:56.202"></status>
</kw>
<msg timestamp="20221117 03:16:56.202" level="INFO">${ip_found} = False</msg>
<status status="PASS" starttime="20221117 03:16:56.200" endtime="20221117 03:16:56.202"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>${ip_found} == ${False}</arg>
<arg>${ip} does not exist on BMC</arg>
</arguments>
<msg timestamp="20221117 03:16:56.203" level="INFO">Execution passed with message:
10.7.7.7 does not exist on BMC</msg>
<status status="PASS" starttime="20221117 03:16:56.203" endtime="20221117 03:16:56.204"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.874" endtime="20221117 03:16:56.204"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:55.874" endtime="20221117 03:16:56.204">10.7.7.7 does not exist on BMC</status>
</kw>
<doc>Verify modifying IP address multiple times.</doc>
<tags>
<tag>Network_Conf_Test</tag>
<tag>Verify_Modifying_IP_Address_Multiple_Times</tag>
</tags>
<status status="PASS" starttime="20221117 03:16:07.901" endtime="20221117 03:16:56.204" critical="yes">10.7.7.7 does not exist on BMC</status>
</test>
<test id="s1-t2" name="Configure And Verify Multiple Static IPv4 Addresses">
<kw name="Test Setup Execution" type="setup">
<doc>Test setup execution.</doc>
<kw name="Login" library="Redfish">
<doc>Assign BMC default values for username, password and auth arguments
and call parent class login method.</doc>
<msg timestamp="20221117 03:16:56.223" level="INFO">Attempt 1 of /redfish/v1/SessionService/Sessions</msg>
<msg timestamp="20221117 03:16:56.278" level="INFO">Response Time to /redfish/v1/SessionService/Sessions: 0.05434759194031358 seconds.</msg>
<msg timestamp="20221117 03:16:56.278" level="INFO">{'@odata.id': '/redfish/v1/SessionService/Sessions/i8IwOcswP2', '@odata.type': '#Session.v1_5_0.Session', 'ClientOriginIPAddress': '::ffff:9.3.84.152', 'Description': 'Manager User Session', 'Id': 'i8IwOcswP2', 'Name': 'User Session', 'Oem': {'OpenBMC': {'@odata.type': '#OemSession.v1_0_0.Session', 'ClientID': ''}}, 'UserName': 'service'}</msg>
<msg timestamp="20221117 03:16:56.278" level="INFO">Login returned code 201: {
  "@odata.id": "/redfish/v1/SessionService/Sessions/i8IwOcswP2",
  "@odata.type": "#Session.v1_5_0.Session",
  "ClientOriginIPAddress": "::ffff:9.3.84.152",
  "Description": "Manager User Session",
  "Id": "i8IwOcswP2",
  "Name": "User Session",
  "Oem": {
    "OpenBMC": {
      "@odata.type": "#OemSession.v1_0_0.Session",
      "ClientID": ""
    }
  },
  "UserName": "service"
}</msg>
<status status="PASS" starttime="20221117 03:16:56.207" endtime="20221117 03:16:56.279"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:56.370" level="INFO">#(CST) 2022/11/17 03:16:56.369769 -    0.233731 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:56.388" level="INFO">#(CST) 2022/11/17 03:16:56.387587 -    0.017818 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:56.388" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:56.388" level="INFO">#(CST) 2022/11/17 03:16:56.387975 -    0.000388 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:56.388" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:56.389" level="INFO">#(CST) 2022/11/17 03:16:56.388451 -    0.000477 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:56.399" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:56.404" level="INFO">#(CST) 2022/11/17 03:16:56.404042 -    0.015590 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:56.404" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:56.438" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:56.439" level="INFO">#(CST) 2022/11/17 03:16:56.438502 -    0.034460 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:56.439" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:56.450" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:56.450" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:56.534" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:56.535" level="INFO">#(CST) 2022/11/17 03:16:56.534354 -    0.095852 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:56.541" level="INFO">#(CST) 2022/11/17 03:16:56.541337 -    0.006983 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:56.551" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:56.565" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:56.281" endtime="20221117 03:16:56.565"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:16:56.578" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:16:56.592" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.013936420902609825 seconds.</msg>
<msg timestamp="20221117 03:16:56.592" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:16:56.566" endtime="20221117 03:16:56.592"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:16:56.593" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:16:56.593" endtime="20221117 03:16:56.593"></status>
</kw>
<msg timestamp="20221117 03:16:56.594" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:16:56.279" endtime="20221117 03:16:56.594"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{network_configurations}</arg>
</arguments>
<msg timestamp="20221117 03:16:56.595" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:16:56.594" endtime="20221117 03:16:56.595"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:56.664" level="INFO">#(CST) 2022/11/17 03:16:56.663522 -    0.122185 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:56.679" level="INFO">#(CST) 2022/11/17 03:16:56.678530 -    0.015008 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:56.679" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:56.679" level="INFO">#(CST) 2022/11/17 03:16:56.678845 -    0.000315 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:56.679" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:56.679" level="INFO">#(CST) 2022/11/17 03:16:56.679267 -    0.000422 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:56.689" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:56.693" level="INFO">#(CST) 2022/11/17 03:16:56.692651 -    0.013384 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:56.693" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:56.724" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:56.725" level="INFO">#(CST) 2022/11/17 03:16:56.724514 -    0.031863 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:56.725" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:56.737" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:56.737" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:56.821" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:56.821" level="INFO">#(CST) 2022/11/17 03:16:56.820872 -    0.096358 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:56.829" level="INFO">#(CST) 2022/11/17 03:16:56.828577 -    0.007705 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:56.839" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:56.854" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:56.596" endtime="20221117 03:16:56.854"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:16:56.855" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:16:56.855" endtime="20221117 03:16:56.855"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:16:56.929" level="INFO">#(CST) 2022/11/17 03:16:56.928808 -    0.100231 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:16:56.945" level="INFO">#(CST) 2022/11/17 03:16:56.944925 -    0.016117 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:16:56.945" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:56.945" level="INFO">#(CST) 2022/11/17 03:16:56.945255 -    0.000330 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:56.946" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:56.946" level="INFO">#(CST) 2022/11/17 03:16:56.945684 -    0.000429 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:56.956" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:56.960" level="INFO">#(CST) 2022/11/17 03:16:56.960036 -    0.014352 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:56.960" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:56.992" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:56.993" level="INFO">#(CST) 2022/11/17 03:16:56.992440 -    0.032403 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:56.993" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:57.004" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:57.004" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:16:57.089" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:57.089" level="INFO">#(CST) 2022/11/17 03:16:57.088770 -    0.096331 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:57.094" level="INFO">#(CST) 2022/11/17 03:16:57.093428 -    0.004658 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:57.099" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:57.107" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:16:57.108" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:16:57.108" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:16:56.856" endtime="20221117 03:16:57.108"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:16:57.108" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:16:57.109" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:16:57.108" endtime="20221117 03:16:57.109"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:16:57.109" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:16:57.109" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:57.109" endtime="20221117 03:16:57.109"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:16:57.110" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:16:57.110" endtime="20221117 03:16:57.110"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:57.111" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:57.111" endtime="20221117 03:16:57.111"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:57.112" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:16:57.111" endtime="20221117 03:16:57.112"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:57.112" endtime="20221117 03:16:57.112"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:57.110" endtime="20221117 03:16:57.112"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:57.113" level="INFO">@{if_info} = [ inet | 10.7.7.8/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:57.113" endtime="20221117 03:16:57.113"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:57.114" level="INFO">${ip_n_prefix} = 10.7.7.8/16</msg>
<status status="PASS" starttime="20221117 03:16:57.114" endtime="20221117 03:16:57.114"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:57.114" endtime="20221117 03:16:57.115"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:57.113" endtime="20221117 03:16:57.115"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:16:57.115" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:16:57.115" endtime="20221117 03:16:57.115"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:16:57.116" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:16:57.116" endtime="20221117 03:16:57.116"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:57.116" endtime="20221117 03:16:57.117"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:57.115" endtime="20221117 03:16:57.117"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:57.110" endtime="20221117 03:16:57.117"></status>
</kw>
<msg timestamp="20221117 03:16:57.117" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.8/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:16:56.595" endtime="20221117 03:16:57.117"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${ip_data}</arg>
</arguments>
<msg timestamp="20221117 03:16:57.118" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.8/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:16:57.117" endtime="20221117 03:16:57.118"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:56.206" endtime="20221117 03:16:57.118"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${test_ipv4_addr}</arg>
<arg>${test_ipv4_addr2}</arg>
</arguments>
<assign>
<var>${test_ipv4_addresses}</var>
</assign>
<msg timestamp="20221117 03:16:57.119" level="INFO">${test_ipv4_addresses} = ['10.7.7.7', '10.7.7.8']</msg>
<status status="PASS" starttime="20221117 03:16:57.118" endtime="20221117 03:16:57.119"></status>
</kw>
<kw name="Configure Multiple Static IPv4 Addresses">
<doc>Configure multiple static ipv4 address via Redfish and verify.</doc>
<arguments>
<arg>${test_ipv4_addresses}</arg>
<arg>${test_subnet_mask}</arg>
<arg>${test_gateway}</arg>
</arguments>
<kw name="${ip} IN [ @{ip_addreses} ]" type="for">
<kw name="${ip} = 10.7.7.7" type="foritem">
<kw name="Add IP Address" library="bmc_network_utils">
<doc>Add IP Address To BMC.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${subnet_mask}</arg>
<arg>${gateway}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:16:57.121" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:16:57.121" endtime="20221117 03:16:57.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Address=${ip}</arg>
<arg>SubnetMask=${subnet_mask}</arg>
<arg>Gateway=${gateway}</arg>
</arguments>
<assign>
<var>${ip_data}</var>
</assign>
<msg timestamp="20221117 03:16:57.122" level="INFO">${ip_data} = {'Address': '10.7.7.7', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}</msg>
<status status="PASS" starttime="20221117 03:16:57.121" endtime="20221117 03:16:57.122"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:16:57.122" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:16:57.122" endtime="20221117 03:16:57.122"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>${network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:57.179" level="INFO">#(CST) 2022/11/17 03:16:57.178548 -    0.085120 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:57.191" level="INFO">#(CST) 2022/11/17 03:16:57.191149 -    0.012601 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:57.191" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:57.192" level="INFO">#(CST) 2022/11/17 03:16:57.191453 -    0.000304 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:57.192" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:57.192" level="INFO">#(CST) 2022/11/17 03:16:57.191779 -    0.000326 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:57.200" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:57.204" level="INFO">#(CST) 2022/11/17 03:16:57.203586 -    0.011807 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:57.204" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:57.236" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:57.237" level="INFO">#(CST) 2022/11/17 03:16:57.236678 -    0.033092 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:57.237" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:57.249" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:57.249" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:57.334" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:57.334" level="INFO">#(CST) 2022/11/17 03:16:57.333736 -    0.097059 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:57.343" level="INFO">#(CST) 2022/11/17 03:16:57.342570 -    0.008834 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:57.354" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:57.370" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:57.124" endtime="20221117 03:16:57.370"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:16:57.386" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:16:57.401" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014339267276227474 seconds.</msg>
<msg timestamp="20221117 03:16:57.402" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:16:57.371" endtime="20221117 03:16:57.402"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:16:57.403" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:16:57.403" endtime="20221117 03:16:57.403"></status>
</kw>
<msg timestamp="20221117 03:16:57.404" level="INFO">${network_configurations} = [{'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}, {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask':...</msg>
<status status="PASS" starttime="20221117 03:16:57.123" endtime="20221117 03:16:57.404"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${network_configurations}</arg>
</arguments>
<assign>
<var>${num_entries}</var>
</assign>
<msg timestamp="20221117 03:16:57.405" level="INFO">Length is 2</msg>
<msg timestamp="20221117 03:16:57.405" level="INFO">${num_entries} = 2</msg>
<status status="PASS" starttime="20221117 03:16:57.404" endtime="20221117 03:16:57.405"></status>
</kw>
<kw name="${INDEX} IN RANGE [ 0 | ${num_entries} ]" type="for">
<kw name="${INDEX} = 0" type="foritem">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:57.406" endtime="20221117 03:16:57.406"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:57.406" endtime="20221117 03:16:57.407"></status>
</kw>
<kw name="${INDEX} = 1" type="foritem">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:57.407" endtime="20221117 03:16:57.408"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:57.407" endtime="20221117 03:16:57.408"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:57.405" endtime="20221117 03:16:57.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Set Variable</arg>
<arg>${HTTP_OK},${HTTP_NO_CONTENT}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${valid_status_codes}</arg>
</arguments>
<assign>
<var>${valid_status_codes}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${HTTP_OK},${HTTP_NO_CONTENT}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:57.409" endtime="20221117 03:16:57.410"></status>
</kw>
<msg timestamp="20221117 03:16:57.410" level="INFO">${valid_status_codes} = 200,204</msg>
<status status="PASS" starttime="20221117 03:16:57.408" endtime="20221117 03:16:57.410"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:57.410" endtime="20221117 03:16:57.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:16:57.412" level="INFO">${data} = {'IPv4StaticAddresses': [{}, {}, {'Address': '10.7.7.7', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}]}</msg>
<status status="PASS" starttime="20221117 03:16:57.411" endtime="20221117 03:16:57.412"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:16:57.481" level="INFO">#(CST) 2022/11/17 03:16:57.481273 -    0.138703 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:16:57.496" level="INFO">#(CST) 2022/11/17 03:16:57.496232 -    0.014959 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:16:57.496" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:16:57.497" level="INFO">#(CST) 2022/11/17 03:16:57.496558 -    0.000326 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:16:57.497" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:16:57.497" level="INFO">#(CST) 2022/11/17 03:16:57.496973 -    0.000415 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:16:57.506" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:16:57.510" level="INFO">#(CST) 2022/11/17 03:16:57.510244 -    0.013272 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:16:57.510" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:16:57.542" level="INFO">children:
</msg>
<msg timestamp="20221117 03:16:57.542" level="INFO">#(CST) 2022/11/17 03:16:57.541643 -    0.031399 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:16:57.542" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:16:57.554" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:16:57.554" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:16:57.638" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:16:57.638" level="INFO">#(CST) 2022/11/17 03:16:57.637980 -    0.096337 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:16:57.646" level="INFO">#(CST) 2022/11/17 03:16:57.646242 -    0.008263 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:16:57.657" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:16:57.672" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:16:57.413" endtime="20221117 03:16:57.672"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:16:57.674" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:16:57.673" endtime="20221117 03:16:57.674"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:16:57.688" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:16:57.723" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.03457079827785492 seconds.</msg>
<status status="PASS" starttime="20221117 03:16:57.674" endtime="20221117 03:16:57.723"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' != '${HTTP_OK},${HTTP_NO_CONTENT}'</arg>
</arguments>
<status status="PASS" starttime="20221117 03:16:57.723" endtime="20221117 03:16:57.724"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:17:15.726" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:16:57.725" endtime="20221117 03:17:15.726"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:17:15.732" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:17:15.731" endtime="20221117 03:17:15.732"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:17:15.740" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:17:18.837" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:17:18.837" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.431 ms
64 bytes from rain40bmc.aus.stglabs....</msg>
<status status="PASS" starttime="20221117 03:17:15.733" endtime="20221117 03:17:18.837"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:17:18.840" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.431 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.282 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.230 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.288 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.230/0.307/0.431/0.077 ms</msg>
<status status="PASS" starttime="20221117 03:17:18.839" endtime="20221117 03:17:18.841"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:18.842" endtime="20221117 03:17:18.843"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:15.730" endtime="20221117 03:17:18.844"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:15.729" endtime="20221117 03:17:18.844"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:15.727" endtime="20221117 03:17:18.844"></status>
</kw>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:17:18.951" level="INFO">#(CST) 2022/11/17 03:17:18.950790 -   21.304547 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:17:18.970" level="INFO">#(CST) 2022/11/17 03:17:18.970006 -    0.019216 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:17:18.970" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:18.971" level="INFO">#(CST) 2022/11/17 03:17:18.970433 -    0.000427 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:18.971" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:18.971" level="INFO">#(CST) 2022/11/17 03:17:18.970943 -    0.000510 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:18.983" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:18.989" level="INFO">#(CST) 2022/11/17 03:17:18.988569 -    0.017627 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:18.989" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:19.026" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:19.026" level="INFO">#(CST) 2022/11/17 03:17:19.025998 -    0.037428 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:19.026" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:19.041" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:19.041" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:17:19.186" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:19.187" level="INFO">#(CST) 2022/11/17 03:17:19.186386 -    0.160388 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:19.196" level="INFO">#(CST) 2022/11/17 03:17:19.195601 -    0.009216 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:19.207" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:19.223" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:17:18.848" endtime="20221117 03:17:19.224"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:17:19.225" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:17:19.224" endtime="20221117 03:17:19.225"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:17:19.306" level="INFO">#(CST) 2022/11/17 03:17:19.305841 -    0.110240 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:17:19.322" level="INFO">#(CST) 2022/11/17 03:17:19.322318 -    0.016477 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:17:19.323" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:19.323" level="INFO">#(CST) 2022/11/17 03:17:19.322615 -    0.000297 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:19.323" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:19.323" level="INFO">#(CST) 2022/11/17 03:17:19.323023 -    0.000407 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:19.333" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:19.338" level="INFO">#(CST) 2022/11/17 03:17:19.337621 -    0.014598 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:19.338" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:19.369" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:19.369" level="INFO">#(CST) 2022/11/17 03:17:19.369217 -    0.031596 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:19.369" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:19.382" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:19.382" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:17:19.476" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:19.477" level="INFO">#(CST) 2022/11/17 03:17:19.476620 -    0.107404 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:19.486" level="INFO">#(CST) 2022/11/17 03:17:19.485543 -    0.008922 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:19.497" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:19.510" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:17:19.511" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:17:19.511" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:17:19.226" endtime="20221117 03:17:19.511"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:17:19.512" level="INFO">4 out of 5 lines matched</msg>
<msg timestamp="20221117 03:17:19.512" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0
    inet 10.7.7.8/16 br...</msg>
<status status="PASS" starttime="20221117 03:17:19.511" endtime="20221117 03:17:19.512"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:17:19.513" level="INFO">4 lines returned</msg>
<msg timestamp="20221117 03:17:19.513" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 |     inet 10.7.7...</msg>
<status status="PASS" starttime="20221117 03:17:19.513" endtime="20221117 03:17:19.513"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:17:19.514" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:17:19.514" endtime="20221117 03:17:19.514"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:17:19.516" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:19.515" endtime="20221117 03:17:19.516"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:17:19.517" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:17:19.517" endtime="20221117 03:17:19.517"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:19.518" endtime="20221117 03:17:19.518"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:19.515" endtime="20221117 03:17:19.518"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:17:19.519" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:19.519" endtime="20221117 03:17:19.519"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:17:19.520" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:17:19.520" endtime="20221117 03:17:19.520"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:19.521" endtime="20221117 03:17:19.521"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:19.518" endtime="20221117 03:17:19.521"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:17:19.523" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:19.522" endtime="20221117 03:17:19.523"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:17:19.524" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:17:19.523" endtime="20221117 03:17:19.524"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:19.524" endtime="20221117 03:17:19.525"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:19.522" endtime="20221117 03:17:19.525"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/16 brd 10.7.255.255 scope global secondary eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:17:19.526" level="INFO">@{if_info} = [ inet | 10.7.7.8/16 | brd | 10.7.255.255 | scope | global | secondary | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:19.525" endtime="20221117 03:17:19.526"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:17:19.527" level="INFO">${ip_n_prefix} = 10.7.7.8/16</msg>
<status status="PASS" starttime="20221117 03:17:19.526" endtime="20221117 03:17:19.527"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:19.527" endtime="20221117 03:17:19.528"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:19.525" endtime="20221117 03:17:19.528"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:19.515" endtime="20221117 03:17:19.528"></status>
</kw>
<msg timestamp="20221117 03:17:19.528" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.7/16 | 9.41.164.249/24 | 10.7.7.8/16 ]</msg>
<status status="PASS" starttime="20221117 03:17:18.846" endtime="20221117 03:17:19.529"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:19.529" endtime="20221117 03:17:19.530"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:18.845" endtime="20221117 03:17:19.530"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:17:19.609" level="INFO">#(CST) 2022/11/17 03:17:19.608951 -    0.123408 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:17:19.625" level="INFO">#(CST) 2022/11/17 03:17:19.624735 -    0.015784 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:17:19.625" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:19.625" level="INFO">#(CST) 2022/11/17 03:17:19.625026 -    0.000291 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:19.625" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:19.625" level="INFO">#(CST) 2022/11/17 03:17:19.625404 -    0.000378 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:19.635" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:19.640" level="INFO">#(CST) 2022/11/17 03:17:19.639489 -    0.014085 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:19.640" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:19.670" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:19.670" level="INFO">#(CST) 2022/11/17 03:17:19.670325 -    0.030836 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:19.670" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:19.683" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:19.683" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:17:19.767" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:19.768" level="INFO">#(CST) 2022/11/17 03:17:19.767424 -    0.097099 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:19.777" level="INFO">#(CST) 2022/11/17 03:17:19.776575 -    0.009151 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:19.788" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:19.804" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:17:19.532" endtime="20221117 03:17:19.804"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:17:19.820" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:17:19.835" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014666783157736063 seconds.</msg>
<msg timestamp="20221117 03:17:19.836" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:17:19.805" endtime="20221117 03:17:19.836"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:17:19.838" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:17:19.837" endtime="20221117 03:17:19.838"></status>
</kw>
<msg timestamp="20221117 03:17:19.838" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:17:19.531" endtime="20221117 03:17:19.838"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:17:19.936" level="INFO">#(CST) 2022/11/17 03:17:19.935517 -    0.158942 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:17:19.954" level="INFO">#(CST) 2022/11/17 03:17:19.953646 -    0.018129 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:17:19.954" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:19.954" level="INFO">#(CST) 2022/11/17 03:17:19.954015 -    0.000368 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:19.954" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:19.955" level="INFO">#(CST) 2022/11/17 03:17:19.954444 -    0.000429 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:19.965" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:19.970" level="INFO">#(CST) 2022/11/17 03:17:19.970202 -    0.015759 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:19.970" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:20.004" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:20.005" level="INFO">#(CST) 2022/11/17 03:17:20.004461 -    0.034258 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:20.005" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:20.018" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:20.018" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:17:20.102" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:20.103" level="INFO">#(CST) 2022/11/17 03:17:20.102555 -    0.098094 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:20.111" level="INFO">#(CST) 2022/11/17 03:17:20.110494 -    0.007939 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:20.121" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:20.136" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:17:19.840" endtime="20221117 03:17:20.136"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:17:20.137" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:17:20.136" endtime="20221117 03:17:20.137"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:17:20.215" level="INFO">#(CST) 2022/11/17 03:17:20.214440 -    0.103946 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:17:20.230" level="INFO">#(CST) 2022/11/17 03:17:20.230388 -    0.015948 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:17:20.231" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:20.231" level="INFO">#(CST) 2022/11/17 03:17:20.230679 -    0.000291 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:20.231" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:20.231" level="INFO">#(CST) 2022/11/17 03:17:20.231082 -    0.000404 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:20.241" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:20.245" level="INFO">#(CST) 2022/11/17 03:17:20.245340 -    0.014257 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:20.246" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:20.277" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:20.277" level="INFO">#(CST) 2022/11/17 03:17:20.277129 -    0.031789 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:20.277" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:20.290" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:20.290" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:17:20.374" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:20.374" level="INFO">#(CST) 2022/11/17 03:17:20.374130 -    0.097001 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:20.381" level="INFO">#(CST) 2022/11/17 03:17:20.380784 -    0.006654 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:20.389" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:20.400" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:17:20.400" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:17:20.400" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:17:20.137" endtime="20221117 03:17:20.400"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:17:20.401" level="INFO">4 out of 5 lines matched</msg>
<msg timestamp="20221117 03:17:20.402" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0
    inet 10.7.7.8/16 br...</msg>
<status status="PASS" starttime="20221117 03:17:20.401" endtime="20221117 03:17:20.402"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:17:20.402" level="INFO">4 lines returned</msg>
<msg timestamp="20221117 03:17:20.403" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 |     inet 10.7.7...</msg>
<status status="PASS" starttime="20221117 03:17:20.402" endtime="20221117 03:17:20.403"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:17:20.403" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:17:20.403" endtime="20221117 03:17:20.403"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:17:20.405" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:20.404" endtime="20221117 03:17:20.405"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:17:20.406" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:17:20.405" endtime="20221117 03:17:20.406"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:20.406" endtime="20221117 03:17:20.407"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.404" endtime="20221117 03:17:20.407"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:17:20.408" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:20.407" endtime="20221117 03:17:20.408"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:17:20.408" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:17:20.408" endtime="20221117 03:17:20.408"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:20.409" endtime="20221117 03:17:20.409"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.407" endtime="20221117 03:17:20.409"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:17:20.410" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:20.410" endtime="20221117 03:17:20.410"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:17:20.411" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:17:20.411" endtime="20221117 03:17:20.411"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:20.412" endtime="20221117 03:17:20.412"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.409" endtime="20221117 03:17:20.412"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/16 brd 10.7.255.255 scope global secondary eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:17:20.413" level="INFO">@{if_info} = [ inet | 10.7.7.8/16 | brd | 10.7.255.255 | scope | global | secondary | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:20.413" endtime="20221117 03:17:20.413"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:17:20.414" level="INFO">${ip_n_prefix} = 10.7.7.8/16</msg>
<status status="PASS" starttime="20221117 03:17:20.413" endtime="20221117 03:17:20.414"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:20.414" endtime="20221117 03:17:20.415"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.412" endtime="20221117 03:17:20.415"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.404" endtime="20221117 03:17:20.415"></status>
</kw>
<msg timestamp="20221117 03:17:20.415" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.7/16', '9.41.164.249/24', '10.7.7.8/16']</msg>
<status status="PASS" starttime="20221117 03:17:19.839" endtime="20221117 03:17:20.415"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:20.416" endtime="20221117 03:17:20.418"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.416" endtime="20221117 03:17:20.418"></status>
</kw>
<kw name="${network_configuration} = {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:20.419" endtime="20221117 03:17:20.420"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.419" endtime="20221117 03:17:20.420"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:20.420" endtime="20221117 03:17:20.421"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.420" endtime="20221117 03:17:20.421"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.415" endtime="20221117 03:17:20.421"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:19.530" endtime="20221117 03:17:20.421"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:57.120" endtime="20221117 03:17:20.421"></status>
</kw>
<status status="PASS" starttime="20221117 03:16:57.120" endtime="20221117 03:17:20.421"></status>
</kw>
<kw name="${ip} = 10.7.7.8" type="foritem">
<kw name="Add IP Address" library="bmc_network_utils">
<doc>Add IP Address To BMC.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${subnet_mask}</arg>
<arg>${gateway}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:17:20.423" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:17:20.423" endtime="20221117 03:17:20.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Address=${ip}</arg>
<arg>SubnetMask=${subnet_mask}</arg>
<arg>Gateway=${gateway}</arg>
</arguments>
<assign>
<var>${ip_data}</var>
</assign>
<msg timestamp="20221117 03:17:20.424" level="INFO">${ip_data} = {'Address': '10.7.7.8', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}</msg>
<status status="PASS" starttime="20221117 03:17:20.424" endtime="20221117 03:17:20.424"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:17:20.425" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:17:20.425" endtime="20221117 03:17:20.425"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>${network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:17:20.489" level="INFO">#(CST) 2022/11/17 03:17:20.488444 -    0.107660 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:17:20.502" level="INFO">#(CST) 2022/11/17 03:17:20.501527 -    0.013083 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:17:20.502" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:20.502" level="INFO">#(CST) 2022/11/17 03:17:20.501788 -    0.000261 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:20.502" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:20.502" level="INFO">#(CST) 2022/11/17 03:17:20.502142 -    0.000354 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:20.510" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:20.514" level="INFO">#(CST) 2022/11/17 03:17:20.514133 -    0.011991 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:20.514" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:20.544" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:20.544" level="INFO">#(CST) 2022/11/17 03:17:20.544042 -    0.029909 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:20.544" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:20.556" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:20.556" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:17:20.640" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:20.640" level="INFO">#(CST) 2022/11/17 03:17:20.640132 -    0.096091 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:20.647" level="INFO">#(CST) 2022/11/17 03:17:20.646588 -    0.006456 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:20.655" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:20.664" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:17:20.426" endtime="20221117 03:17:20.664"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:17:20.674" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:17:20.689" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014102288987487555 seconds.</msg>
<msg timestamp="20221117 03:17:20.689" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:17:20.665" endtime="20221117 03:17:20.689"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:17:20.690" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:17:20.689" endtime="20221117 03:17:20.690"></status>
</kw>
<msg timestamp="20221117 03:17:20.690" level="INFO">${network_configurations} = [{'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}, {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '25...</msg>
<status status="PASS" starttime="20221117 03:17:20.425" endtime="20221117 03:17:20.690"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${network_configurations}</arg>
</arguments>
<assign>
<var>${num_entries}</var>
</assign>
<msg timestamp="20221117 03:17:20.691" level="INFO">Length is 3</msg>
<msg timestamp="20221117 03:17:20.691" level="INFO">${num_entries} = 3</msg>
<status status="PASS" starttime="20221117 03:17:20.691" endtime="20221117 03:17:20.691"></status>
</kw>
<kw name="${INDEX} IN RANGE [ 0 | ${num_entries} ]" type="for">
<kw name="${INDEX} = 0" type="foritem">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:20.692" endtime="20221117 03:17:20.692"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.691" endtime="20221117 03:17:20.692"></status>
</kw>
<kw name="${INDEX} = 1" type="foritem">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:20.692" endtime="20221117 03:17:20.693"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.692" endtime="20221117 03:17:20.693"></status>
</kw>
<kw name="${INDEX} = 2" type="foritem">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:20.693" endtime="20221117 03:17:20.693"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.693" endtime="20221117 03:17:20.693"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.691" endtime="20221117 03:17:20.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Set Variable</arg>
<arg>${HTTP_OK},${HTTP_NO_CONTENT}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${valid_status_codes}</arg>
</arguments>
<assign>
<var>${valid_status_codes}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${HTTP_OK},${HTTP_NO_CONTENT}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:20.695" endtime="20221117 03:17:20.695"></status>
</kw>
<msg timestamp="20221117 03:17:20.695" level="INFO">${valid_status_codes} = 200,204</msg>
<status status="PASS" starttime="20221117 03:17:20.694" endtime="20221117 03:17:20.695"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip_data}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:20.695" endtime="20221117 03:17:20.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:17:20.696" level="INFO">${data} = {'IPv4StaticAddresses': [{}, {}, {}, {'Address': '10.7.7.8', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}]}</msg>
<status status="PASS" starttime="20221117 03:17:20.696" endtime="20221117 03:17:20.696"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:17:20.749" level="INFO">#(CST) 2022/11/17 03:17:20.749226 -    0.102638 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:17:20.762" level="INFO">#(CST) 2022/11/17 03:17:20.761574 -    0.012347 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:17:20.762" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:20.762" level="INFO">#(CST) 2022/11/17 03:17:20.761838 -    0.000264 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:20.762" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:20.762" level="INFO">#(CST) 2022/11/17 03:17:20.762170 -    0.000333 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:20.770" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:20.774" level="INFO">#(CST) 2022/11/17 03:17:20.773883 -    0.011713 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:20.774" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:20.805" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:20.805" level="INFO">#(CST) 2022/11/17 03:17:20.804593 -    0.030710 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:20.805" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:20.817" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:20.817" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:17:20.911" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:20.911" level="INFO">#(CST) 2022/11/17 03:17:20.910878 -    0.106285 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:20.917" level="INFO">#(CST) 2022/11/17 03:17:20.916828 -    0.005950 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:20.924" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:20.935" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:17:20.697" endtime="20221117 03:17:20.935"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:17:20.936" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:17:20.936" endtime="20221117 03:17:20.936"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:17:20.947" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:17:20.964" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.01716656517237425 seconds.</msg>
<msg timestamp="20221117 03:17:20.970" level="FAIL">ValueError: The HTTP status code was not valid:
status:                                           500
valid_status_codes:
  [0]:                                            200
  [1]:                                            204
</msg>
<status status="FAIL" starttime="20221117 03:17:20.937" endtime="20221117 03:17:20.971"></status>
</kw>
<status status="FAIL" starttime="20221117 03:17:20.422" endtime="20221117 03:17:20.971"></status>
</kw>
<status status="FAIL" starttime="20221117 03:17:20.421" endtime="20221117 03:17:20.971"></status>
</kw>
<status status="FAIL" starttime="20221117 03:16:57.119" endtime="20221117 03:17:20.971"></status>
</kw>
<status status="FAIL" starttime="20221117 03:16:57.119" endtime="20221117 03:17:20.971"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Multiple Static IPv4 Addresses</arg>
<arg>${test_ipv4_addresses}</arg>
<arg>AND</arg>
<arg>Test Teardown Execution</arg>
</arguments>
<kw name="Delete Multiple Static IPv4 Addresses">
<doc>Delete multiple static ipv4 address via Redfish.</doc>
<arguments>
<arg>${test_ipv4_addresses}</arg>
</arguments>
<kw name="${ip} IN [ @{ip_addreses} ]" type="for">
<kw name="${ip} = 10.7.7.7" type="foritem">
<kw name="Delete IP Address" library="bmc_network_utils">
<doc>Delete IP Address Of BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:17:20.974" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:17:20.974" endtime="20221117 03:17:20.974"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:17:20.974" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:17:20.974" endtime="20221117 03:17:20.974"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:17:21.031" level="INFO">#(CST) 2022/11/17 03:17:21.031380 -    0.114552 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:17:21.045" level="INFO">#(CST) 2022/11/17 03:17:21.045096 -    0.013717 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:17:21.045" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:21.045" level="INFO">#(CST) 2022/11/17 03:17:21.045362 -    0.000266 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:21.046" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:21.046" level="INFO">#(CST) 2022/11/17 03:17:21.045706 -    0.000344 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:21.054" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:21.058" level="INFO">#(CST) 2022/11/17 03:17:21.058395 -    0.012689 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:21.059" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:21.089" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:21.089" level="INFO">#(CST) 2022/11/17 03:17:21.089202 -    0.030807 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:21.089" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:21.102" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:21.102" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:17:21.186" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:21.186" level="INFO">#(CST) 2022/11/17 03:17:21.186060 -    0.096859 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:21.196" level="INFO">#(CST) 2022/11/17 03:17:21.195977 -    0.009917 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:21.208" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:21.225" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:17:20.975" endtime="20221117 03:17:21.225"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:17:21.240" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:17:21.255" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014354894869029522 seconds.</msg>
<msg timestamp="20221117 03:17:21.255" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:17:21.226" endtime="20221117 03:17:21.256"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:17:21.257" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:17:21.256" endtime="20221117 03:17:21.257"></status>
</kw>
<msg timestamp="20221117 03:17:21.257" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:17:20.975" endtime="20221117 03:17:21.257"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:21.259" endtime="20221117 03:17:21.260"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:21.258" endtime="20221117 03:17:21.260"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:21.258" endtime="20221117 03:17:21.260"></status>
</kw>
<kw name="${network_configuration} = {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:21.261" endtime="20221117 03:17:21.262"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:21.260" endtime="20221117 03:17:21.262"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:21.260" endtime="20221117 03:17:21.262"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:21.264" endtime="20221117 03:17:21.264"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:21.263" endtime="20221117 03:17:21.264"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:21.262" endtime="20221117 03:17:21.264"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:21.257" endtime="20221117 03:17:21.264"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<assign>
<var>${ip_found}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:21.265" endtime="20221117 03:17:21.266"></status>
</kw>
<msg timestamp="20221117 03:17:21.266" level="INFO">${ip_found} = True</msg>
<status status="PASS" starttime="20221117 03:17:21.265" endtime="20221117 03:17:21.266"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>${ip_found} == ${False}</arg>
<arg>${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:21.267" endtime="20221117 03:17:21.267"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:17:21.268" level="INFO">${data} = {'IPv4StaticAddresses': [{}, None, {}]}</msg>
<status status="PASS" starttime="20221117 03:17:21.267" endtime="20221117 03:17:21.268"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:17:21.344" level="INFO">#(CST) 2022/11/17 03:17:21.344052 -    0.148075 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:17:21.360" level="INFO">#(CST) 2022/11/17 03:17:21.360258 -    0.016206 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:17:21.360" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:21.361" level="INFO">#(CST) 2022/11/17 03:17:21.360535 -    0.000276 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:21.361" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:21.361" level="INFO">#(CST) 2022/11/17 03:17:21.360909 -    0.000374 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:21.370" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:21.374" level="INFO">#(CST) 2022/11/17 03:17:21.374110 -    0.013201 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:21.374" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:21.402" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:21.402" level="INFO">#(CST) 2022/11/17 03:17:21.402083 -    0.027973 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:21.402" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:21.414" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:21.414" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:17:21.498" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:21.498" level="INFO">#(CST) 2022/11/17 03:17:21.497813 -    0.095731 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:21.502" level="INFO">#(CST) 2022/11/17 03:17:21.501579 -    0.003765 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:21.507" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:21.514" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:17:21.268" endtime="20221117 03:17:21.514"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:17:21.515" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:17:21.515" endtime="20221117 03:17:21.515"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:17:21.523" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:17:21.554" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.030619893223047256 seconds.</msg>
<status status="PASS" starttime="20221117 03:17:21.515" endtime="20221117 03:17:21.554"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:17:39.555" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:17:21.555" endtime="20221117 03:17:39.556"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:17:39.561" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:17:39.561" endtime="20221117 03:17:39.561"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:17:39.569" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:17:42.588" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:17:42.588" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.271 ms
64 bytes from rain40bmc.aus.stglabs....</msg>
<status status="PASS" starttime="20221117 03:17:39.562" endtime="20221117 03:17:42.589"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:17:42.592" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.271 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.277 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.430 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.565 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.271/0.385/0.565/0.123 ms</msg>
<status status="PASS" starttime="20221117 03:17:42.590" endtime="20221117 03:17:42.592"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:42.592" endtime="20221117 03:17:42.593"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:39.559" endtime="20221117 03:17:42.594"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:39.558" endtime="20221117 03:17:42.594"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:39.556" endtime="20221117 03:17:42.594"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify IP On BMC</arg>
<arg>${ip}</arg>
</arguments>
<assign>
<var>${delete_status}</var>
</assign>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:17:42.715" level="INFO">#(CST) 2022/11/17 03:17:42.714722 -   21.213144 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:17:42.734" level="INFO">#(CST) 2022/11/17 03:17:42.734244 -    0.019522 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:17:42.735" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:42.735" level="INFO">#(CST) 2022/11/17 03:17:42.734694 -    0.000450 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:42.735" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:42.735" level="INFO">#(CST) 2022/11/17 03:17:42.735172 -    0.000478 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:42.747" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:42.753" level="INFO">#(CST) 2022/11/17 03:17:42.752448 -    0.017276 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:42.753" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:42.787" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:42.787" level="INFO">#(CST) 2022/11/17 03:17:42.786885 -    0.034437 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:42.787" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:42.802" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:42.802" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:17:42.886" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:42.887" level="INFO">#(CST) 2022/11/17 03:17:42.886553 -    0.099668 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:42.898" level="INFO">#(CST) 2022/11/17 03:17:42.897441 -    0.010887 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:42.910" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:42.928" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:17:42.599" endtime="20221117 03:17:42.928"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:17:42.929" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:17:42.929" endtime="20221117 03:17:42.930"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:17:43.023" level="INFO">#(CST) 2022/11/17 03:17:43.022787 -    0.125347 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:17:43.040" level="INFO">#(CST) 2022/11/17 03:17:43.040180 -    0.017392 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:17:43.040" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:43.041" level="INFO">#(CST) 2022/11/17 03:17:43.040468 -    0.000288 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:43.041" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:43.041" level="INFO">#(CST) 2022/11/17 03:17:43.040854 -    0.000387 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:43.051" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:43.056" level="INFO">#(CST) 2022/11/17 03:17:43.056365 -    0.015510 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:43.057" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:43.087" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:43.087" level="INFO">#(CST) 2022/11/17 03:17:43.086829 -    0.030464 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:43.087" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:43.101" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:43.101" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:17:43.184" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:43.185" level="INFO">#(CST) 2022/11/17 03:17:43.184603 -    0.097774 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:43.192" level="INFO">#(CST) 2022/11/17 03:17:43.192183 -    0.007580 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:43.202" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:43.213" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:17:43.213" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:17:43.213" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:17:42.930" endtime="20221117 03:17:43.213"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:17:43.214" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:17:43.214" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:17:43.214" endtime="20221117 03:17:43.214"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:17:43.215" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:17:43.215" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:43.215" endtime="20221117 03:17:43.215"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:17:43.216" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:17:43.216" endtime="20221117 03:17:43.216"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:17:43.217" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:43.217" endtime="20221117 03:17:43.217"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:17:43.218" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:17:43.218" endtime="20221117 03:17:43.218"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:43.218" endtime="20221117 03:17:43.219"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:43.216" endtime="20221117 03:17:43.219"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:17:43.220" level="INFO">@{if_info} = [ inet | 10.7.7.8/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:43.220" endtime="20221117 03:17:43.220"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:17:43.221" level="INFO">${ip_n_prefix} = 10.7.7.8/16</msg>
<status status="PASS" starttime="20221117 03:17:43.221" endtime="20221117 03:17:43.221"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:43.221" endtime="20221117 03:17:43.222"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:43.219" endtime="20221117 03:17:43.222"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:17:43.223" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:43.222" endtime="20221117 03:17:43.223"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:17:43.223" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:17:43.223" endtime="20221117 03:17:43.223"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:43.224" endtime="20221117 03:17:43.224"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:43.222" endtime="20221117 03:17:43.224"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:43.216" endtime="20221117 03:17:43.224"></status>
</kw>
<msg timestamp="20221117 03:17:43.225" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.8/16 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:17:42.597" endtime="20221117 03:17:43.225"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<msg timestamp="20221117 03:17:43.226" level="FAIL">IP address does not exist.</msg>
<status status="FAIL" starttime="20221117 03:17:43.225" endtime="20221117 03:17:43.226"></status>
</kw>
<status status="FAIL" starttime="20221117 03:17:42.596" endtime="20221117 03:17:43.226"></status>
</kw>
<msg timestamp="20221117 03:17:43.226" level="INFO">${delete_status} = False</msg>
<status status="PASS" starttime="20221117 03:17:42.595" endtime="20221117 03:17:43.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${False}'</arg>
<arg>ELSE</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${True}'</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>'${delete_status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:43.227" endtime="20221117 03:17:43.228"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:43.227" endtime="20221117 03:17:43.228"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:17:43.298" level="INFO">#(CST) 2022/11/17 03:17:43.297774 -    0.105591 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:17:43.312" level="INFO">#(CST) 2022/11/17 03:17:43.311610 -    0.013836 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:17:43.312" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:43.312" level="INFO">#(CST) 2022/11/17 03:17:43.311903 -    0.000294 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:43.312" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:43.312" level="INFO">#(CST) 2022/11/17 03:17:43.312229 -    0.000325 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:43.321" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:43.325" level="INFO">#(CST) 2022/11/17 03:17:43.325219 -    0.012991 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:43.325" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:43.355" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:43.355" level="INFO">#(CST) 2022/11/17 03:17:43.354951 -    0.029732 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:43.355" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:43.368" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:43.368" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:17:43.452" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:43.453" level="INFO">#(CST) 2022/11/17 03:17:43.452477 -    0.097526 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:43.463" level="INFO">#(CST) 2022/11/17 03:17:43.462513 -    0.010036 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:43.475" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:43.492" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:17:43.230" endtime="20221117 03:17:43.492"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:17:43.508" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:17:43.524" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.01507280021905899 seconds.</msg>
<msg timestamp="20221117 03:17:43.524" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:17:43.492" endtime="20221117 03:17:43.524"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:17:43.526" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:17:43.525" endtime="20221117 03:17:43.526"></status>
</kw>
<msg timestamp="20221117 03:17:43.526" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:17:43.229" endtime="20221117 03:17:43.527"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:17:43.627" level="INFO">#(CST) 2022/11/17 03:17:43.626803 -    0.164291 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:17:43.645" level="INFO">#(CST) 2022/11/17 03:17:43.645054 -    0.018250 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:17:43.645" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:43.645" level="INFO">#(CST) 2022/11/17 03:17:43.645383 -    0.000329 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:43.646" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:43.646" level="INFO">#(CST) 2022/11/17 03:17:43.645779 -    0.000396 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:43.657" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:43.662" level="INFO">#(CST) 2022/11/17 03:17:43.662215 -    0.016435 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:43.662" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:43.694" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:43.694" level="INFO">#(CST) 2022/11/17 03:17:43.693993 -    0.031778 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:43.694" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:43.707" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:43.708" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:17:43.791" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:43.792" level="INFO">#(CST) 2022/11/17 03:17:43.791530 -    0.097537 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:43.801" level="INFO">#(CST) 2022/11/17 03:17:43.801310 -    0.009781 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:43.813" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:43.830" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:17:43.528" endtime="20221117 03:17:43.830"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:17:43.831" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:17:43.830" endtime="20221117 03:17:43.831"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:17:43.918" level="INFO">#(CST) 2022/11/17 03:17:43.918084 -    0.116774 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:17:43.935" level="INFO">#(CST) 2022/11/17 03:17:43.935294 -    0.017210 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:17:43.936" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:43.936" level="INFO">#(CST) 2022/11/17 03:17:43.935590 -    0.000295 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:43.936" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:43.936" level="INFO">#(CST) 2022/11/17 03:17:43.935995 -    0.000405 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:43.947" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:43.952" level="INFO">#(CST) 2022/11/17 03:17:43.951789 -    0.015794 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:43.952" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:43.982" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:43.982" level="INFO">#(CST) 2022/11/17 03:17:43.981944 -    0.030154 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:43.982" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:43.995" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:43.995" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:17:44.080" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:44.080" level="INFO">#(CST) 2022/11/17 03:17:44.079900 -    0.097956 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:44.090" level="INFO">#(CST) 2022/11/17 03:17:44.089709 -    0.009809 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:44.102" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:44.116" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:17:44.116" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:17:44.117" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:17:43.832" endtime="20221117 03:17:44.117"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:17:44.118" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:17:44.118" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:17:44.117" endtime="20221117 03:17:44.118"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:17:44.119" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:17:44.119" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:44.118" endtime="20221117 03:17:44.119"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:17:44.120" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:17:44.120" endtime="20221117 03:17:44.120"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:17:44.122" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:44.121" endtime="20221117 03:17:44.122"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:17:44.123" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:17:44.122" endtime="20221117 03:17:44.123"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:44.123" endtime="20221117 03:17:44.124"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:44.120" endtime="20221117 03:17:44.124"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:17:44.125" level="INFO">@{if_info} = [ inet | 10.7.7.8/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:44.124" endtime="20221117 03:17:44.125"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:17:44.126" level="INFO">${ip_n_prefix} = 10.7.7.8/16</msg>
<status status="PASS" starttime="20221117 03:17:44.126" endtime="20221117 03:17:44.126"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:44.127" endtime="20221117 03:17:44.127"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:44.124" endtime="20221117 03:17:44.127"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:17:44.128" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:17:44.128" endtime="20221117 03:17:44.128"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:17:44.129" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:17:44.129" endtime="20221117 03:17:44.129"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:44.130" endtime="20221117 03:17:44.130"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:44.127" endtime="20221117 03:17:44.130"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:44.120" endtime="20221117 03:17:44.130"></status>
</kw>
<msg timestamp="20221117 03:17:44.131" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.8/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:17:43.527" endtime="20221117 03:17:44.131"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:44.132" endtime="20221117 03:17:44.132"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:44.131" endtime="20221117 03:17:44.133"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:44.133" endtime="20221117 03:17:44.134"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:44.133" endtime="20221117 03:17:44.134"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:44.131" endtime="20221117 03:17:44.134"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:43.228" endtime="20221117 03:17:44.134"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.973" endtime="20221117 03:17:44.134"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.973" endtime="20221117 03:17:44.135"></status>
</kw>
<kw name="${ip} = 10.7.7.8" type="foritem">
<kw name="Delete IP Address" library="bmc_network_utils">
<doc>Delete IP Address Of BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:17:44.137" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:17:44.136" endtime="20221117 03:17:44.137"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:17:44.137" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:17:44.137" endtime="20221117 03:17:44.138"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:17:44.219" level="INFO">#(CST) 2022/11/17 03:17:44.219340 -    0.129631 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:17:44.236" level="INFO">#(CST) 2022/11/17 03:17:44.235499 -    0.016159 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:17:44.236" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:44.236" level="INFO">#(CST) 2022/11/17 03:17:44.235781 -    0.000282 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:44.236" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:44.236" level="INFO">#(CST) 2022/11/17 03:17:44.236279 -    0.000498 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:44.246" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:44.251" level="INFO">#(CST) 2022/11/17 03:17:44.250793 -    0.014514 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:44.251" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:44.281" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:44.281" level="INFO">#(CST) 2022/11/17 03:17:44.280855 -    0.030062 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:44.281" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:44.294" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:44.294" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:17:44.378" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:44.378" level="INFO">#(CST) 2022/11/17 03:17:44.378125 -    0.097270 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:44.388" level="INFO">#(CST) 2022/11/17 03:17:44.387605 -    0.009481 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:44.399" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:44.416" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:17:44.139" endtime="20221117 03:17:44.416"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:17:44.432" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:17:44.446" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.013823586981743574 seconds.</msg>
<msg timestamp="20221117 03:17:44.446" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:17:44.416" endtime="20221117 03:17:44.446"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:17:44.448" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:17:44.447" endtime="20221117 03:17:44.448"></status>
</kw>
<msg timestamp="20221117 03:17:44.449" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask...</msg>
<status status="PASS" starttime="20221117 03:17:44.138" endtime="20221117 03:17:44.449"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:44.451" endtime="20221117 03:17:44.452"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:44.450" endtime="20221117 03:17:44.452"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:44.449" endtime="20221117 03:17:44.452"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:44.455" endtime="20221117 03:17:44.456"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:44.453" endtime="20221117 03:17:44.456"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:44.452" endtime="20221117 03:17:44.456"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:44.449" endtime="20221117 03:17:44.456"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<assign>
<var>${ip_found}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:44.457" endtime="20221117 03:17:44.458"></status>
</kw>
<msg timestamp="20221117 03:17:44.458" level="INFO">${ip_found} = True</msg>
<status status="PASS" starttime="20221117 03:17:44.457" endtime="20221117 03:17:44.458"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>${ip_found} == ${False}</arg>
<arg>${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:17:44.459" endtime="20221117 03:17:44.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:17:44.461" level="INFO">${data} = {'IPv4StaticAddresses': [None, {}]}</msg>
<status status="PASS" starttime="20221117 03:17:44.460" endtime="20221117 03:17:44.461"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:17:44.551" level="INFO">#(CST) 2022/11/17 03:17:44.551178 -    0.163572 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:17:44.569" level="INFO">#(CST) 2022/11/17 03:17:44.568666 -    0.017488 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:17:44.569" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:17:44.569" level="INFO">#(CST) 2022/11/17 03:17:44.569000 -    0.000334 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:17:44.569" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:17:44.569" level="INFO">#(CST) 2022/11/17 03:17:44.569418 -    0.000418 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:17:44.580" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:17:44.585" level="INFO">#(CST) 2022/11/17 03:17:44.584900 -    0.015482 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:17:44.585" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:17:44.617" level="INFO">children:
</msg>
<msg timestamp="20221117 03:17:44.618" level="INFO">#(CST) 2022/11/17 03:17:44.617457 -    0.032557 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:17:44.618" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:17:44.631" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:17:44.631" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:17:44.715" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:17:44.715" level="INFO">#(CST) 2022/11/17 03:17:44.715161 -    0.097704 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:17:44.725" level="INFO">#(CST) 2022/11/17 03:17:44.724522 -    0.009361 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:17:44.736" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:17:44.753" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:17:44.462" endtime="20221117 03:17:44.753"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:17:44.754" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:17:44.753" endtime="20221117 03:17:44.754"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:17:44.768" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:17:44.801" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.032261116430163383 seconds.</msg>
<status status="PASS" starttime="20221117 03:17:44.754" endtime="20221117 03:17:44.801"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:18:02.803" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:17:44.802" endtime="20221117 03:18:02.803"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:18:02.808" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:18:02.808" endtime="20221117 03:18:02.809"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:18:02.814" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:18:05.829" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:18:05.829" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.545 ms
64 bytes from rain40bmc.aus.stglabs....</msg>
<status status="PASS" starttime="20221117 03:18:02.809" endtime="20221117 03:18:05.829"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:18:05.832" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.545 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.325 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.293 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.869 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.293/0.508/0.869/0.229 ms</msg>
<status status="PASS" starttime="20221117 03:18:05.831" endtime="20221117 03:18:05.832"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:05.833" endtime="20221117 03:18:05.834"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:02.807" endtime="20221117 03:18:05.834"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:02.806" endtime="20221117 03:18:05.835"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:02.804" endtime="20221117 03:18:05.835"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify IP On BMC</arg>
<arg>${ip}</arg>
</arguments>
<assign>
<var>${delete_status}</var>
</assign>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:05.950" level="INFO">#(CST) 2022/11/17 03:18:05.950129 -   21.225606 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:05.969" level="INFO">#(CST) 2022/11/17 03:18:05.969159 -    0.019030 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:05.969" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:05.970" level="INFO">#(CST) 2022/11/17 03:18:05.969529 -    0.000370 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:05.970" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:05.970" level="INFO">#(CST) 2022/11/17 03:18:05.969996 -    0.000467 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:05.981" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:05.987" level="INFO">#(CST) 2022/11/17 03:18:05.986762 -    0.016767 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:05.987" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:06.021" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:06.021" level="INFO">#(CST) 2022/11/17 03:18:06.020667 -    0.033904 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:06.021" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:06.036" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:06.036" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:06.120" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:06.121" level="INFO">#(CST) 2022/11/17 03:18:06.120357 -    0.099690 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:06.131" level="INFO">#(CST) 2022/11/17 03:18:06.131261 -    0.010904 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:06.144" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:06.162" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:05.839" endtime="20221117 03:18:06.162"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:18:06.164" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:18:06.163" endtime="20221117 03:18:06.164"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:18:06.260" level="INFO">#(CST) 2022/11/17 03:18:06.260201 -    0.128941 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:18:06.278" level="INFO">#(CST) 2022/11/17 03:18:06.277499 -    0.017298 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:18:06.278" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:06.278" level="INFO">#(CST) 2022/11/17 03:18:06.277858 -    0.000359 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:06.278" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:06.278" level="INFO">#(CST) 2022/11/17 03:18:06.278275 -    0.000417 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:06.289" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:06.294" level="INFO">#(CST) 2022/11/17 03:18:06.293475 -    0.015201 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:06.294" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:06.323" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:06.323" level="INFO">#(CST) 2022/11/17 03:18:06.323293 -    0.029818 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:06.323" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:06.337" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:06.337" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:18:06.422" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:06.422" level="INFO">#(CST) 2022/11/17 03:18:06.421994 -    0.098701 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:06.433" level="INFO">#(CST) 2022/11/17 03:18:06.432643 -    0.010649 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:06.445" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:06.461" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:18:06.461" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:18:06.461" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:18:06.164" endtime="20221117 03:18:06.461"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:18:06.463" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:18:06.463" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:18:06.462" endtime="20221117 03:18:06.463"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:18:06.464" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:18:06.464" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:06.464" endtime="20221117 03:18:06.464"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:18:06.465" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:18:06.465" endtime="20221117 03:18:06.465"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:06.467" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:06.466" endtime="20221117 03:18:06.467"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:06.468" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:18:06.467" endtime="20221117 03:18:06.468"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:06.469" endtime="20221117 03:18:06.469"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:06.466" endtime="20221117 03:18:06.469"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:06.470" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:06.470" endtime="20221117 03:18:06.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:06.471" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:18:06.471" endtime="20221117 03:18:06.471"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:06.472" endtime="20221117 03:18:06.472"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:06.469" endtime="20221117 03:18:06.472"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:06.466" endtime="20221117 03:18:06.472"></status>
</kw>
<msg timestamp="20221117 03:18:06.473" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:18:05.838" endtime="20221117 03:18:06.473"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<msg timestamp="20221117 03:18:06.475" level="FAIL">IP address does not exist.</msg>
<status status="FAIL" starttime="20221117 03:18:06.473" endtime="20221117 03:18:06.475"></status>
</kw>
<status status="FAIL" starttime="20221117 03:18:05.836" endtime="20221117 03:18:06.475"></status>
</kw>
<msg timestamp="20221117 03:18:06.475" level="INFO">${delete_status} = False</msg>
<status status="PASS" starttime="20221117 03:18:05.836" endtime="20221117 03:18:06.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${False}'</arg>
<arg>ELSE</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${True}'</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>'${delete_status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:06.477" endtime="20221117 03:18:06.478"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:06.476" endtime="20221117 03:18:06.478"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:06.563" level="INFO">#(CST) 2022/11/17 03:18:06.562858 -    0.130215 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:06.579" level="INFO">#(CST) 2022/11/17 03:18:06.579370 -    0.016512 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:06.580" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:06.580" level="INFO">#(CST) 2022/11/17 03:18:06.579656 -    0.000285 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:06.580" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:06.580" level="INFO">#(CST) 2022/11/17 03:18:06.580036 -    0.000380 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:06.590" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:06.595" level="INFO">#(CST) 2022/11/17 03:18:06.594646 -    0.014610 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:06.595" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:06.625" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:06.625" level="INFO">#(CST) 2022/11/17 03:18:06.625062 -    0.030416 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:06.625" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:06.638" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:06.638" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:06.723" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:06.724" level="INFO">#(CST) 2022/11/17 03:18:06.723469 -    0.098407 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:06.734" level="INFO">#(CST) 2022/11/17 03:18:06.733441 -    0.009972 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:06.745" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:06.762" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:06.480" endtime="20221117 03:18:06.762"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:18:06.778" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:18:06.793" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.01392744667828083 seconds.</msg>
<msg timestamp="20221117 03:18:06.794" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:18:06.763" endtime="20221117 03:18:06.794"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:18:06.795" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:18:06.794" endtime="20221117 03:18:06.795"></status>
</kw>
<msg timestamp="20221117 03:18:06.796" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:18:06.479" endtime="20221117 03:18:06.796"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:06.902" level="INFO">#(CST) 2022/11/17 03:18:06.901552 -    0.168111 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:06.921" level="INFO">#(CST) 2022/11/17 03:18:06.920605 -    0.019054 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:06.921" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:06.921" level="INFO">#(CST) 2022/11/17 03:18:06.920943 -    0.000338 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:06.921" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:06.921" level="INFO">#(CST) 2022/11/17 03:18:06.921366 -    0.000423 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:06.933" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:06.939" level="INFO">#(CST) 2022/11/17 03:18:06.938463 -    0.017097 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:06.939" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:06.972" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:06.972" level="INFO">#(CST) 2022/11/17 03:18:06.972047 -    0.033584 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:06.972" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:06.986" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:06.986" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:07.070" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:07.070" level="INFO">#(CST) 2022/11/17 03:18:07.069950 -    0.097903 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:07.076" level="INFO">#(CST) 2022/11/17 03:18:07.076016 -    0.006066 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:07.084" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:07.095" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:06.798" endtime="20221117 03:18:07.095"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:18:07.096" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:18:07.096" endtime="20221117 03:18:07.096"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:18:07.162" level="INFO">#(CST) 2022/11/17 03:18:07.161990 -    0.085974 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:18:07.176" level="INFO">#(CST) 2022/11/17 03:18:07.176014 -    0.014024 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:18:07.176" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:07.176" level="INFO">#(CST) 2022/11/17 03:18:07.176255 -    0.000241 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:07.177" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:07.177" level="INFO">#(CST) 2022/11/17 03:18:07.176577 -    0.000322 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:07.185" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:07.190" level="INFO">#(CST) 2022/11/17 03:18:07.189626 -    0.013049 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:07.190" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:07.218" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:07.218" level="INFO">#(CST) 2022/11/17 03:18:07.218242 -    0.028615 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:07.218" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:07.231" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:07.231" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:18:07.315" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:07.316" level="INFO">#(CST) 2022/11/17 03:18:07.315375 -    0.097134 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:07.325" level="INFO">#(CST) 2022/11/17 03:18:07.324968 -    0.009593 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:07.337" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:07.351" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:18:07.351" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:18:07.352" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:18:07.097" endtime="20221117 03:18:07.352"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:18:07.353" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:18:07.353" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:18:07.352" endtime="20221117 03:18:07.353"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:18:07.354" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:18:07.354" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:07.353" endtime="20221117 03:18:07.354"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:18:07.355" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:18:07.355" endtime="20221117 03:18:07.355"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:07.356" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:07.356" endtime="20221117 03:18:07.357"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:07.358" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:18:07.357" endtime="20221117 03:18:07.358"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:07.358" endtime="20221117 03:18:07.359"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:07.355" endtime="20221117 03:18:07.359"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:07.360" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:07.359" endtime="20221117 03:18:07.360"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:07.361" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:18:07.360" endtime="20221117 03:18:07.361"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:07.361" endtime="20221117 03:18:07.362"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:07.359" endtime="20221117 03:18:07.362"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:07.355" endtime="20221117 03:18:07.362"></status>
</kw>
<msg timestamp="20221117 03:18:07.362" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:18:06.796" endtime="20221117 03:18:07.362"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:07.363" endtime="20221117 03:18:07.364"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:07.363" endtime="20221117 03:18:07.364"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:07.362" endtime="20221117 03:18:07.364"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:06.478" endtime="20221117 03:18:07.364"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:44.135" endtime="20221117 03:18:07.365"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:44.135" endtime="20221117 03:18:07.365"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.973" endtime="20221117 03:18:07.365"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:07.446" level="INFO">#(CST) 2022/11/17 03:18:07.445862 -    0.120894 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:07.462" level="INFO">#(CST) 2022/11/17 03:18:07.462082 -    0.016220 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:07.462" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:07.462" level="INFO">#(CST) 2022/11/17 03:18:07.462355 -    0.000273 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:07.463" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:07.463" level="INFO">#(CST) 2022/11/17 03:18:07.462725 -    0.000370 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:07.473" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:07.477" level="INFO">#(CST) 2022/11/17 03:18:07.477011 -    0.014286 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:07.477" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:07.508" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:07.508" level="INFO">#(CST) 2022/11/17 03:18:07.507574 -    0.030563 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:07.508" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:07.521" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:07.521" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:07.605" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:07.605" level="INFO">#(CST) 2022/11/17 03:18:07.604714 -    0.097140 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:07.614" level="INFO">#(CST) 2022/11/17 03:18:07.614070 -    0.009356 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:07.626" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:07.642" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:07.367" endtime="20221117 03:18:07.642"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:18:07.658" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:18:07.672" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.013167004100978374 seconds.</msg>
<msg timestamp="20221117 03:18:07.672" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:18:07.643" endtime="20221117 03:18:07.672"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:18:07.674" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:18:07.673" endtime="20221117 03:18:07.674"></status>
</kw>
<msg timestamp="20221117 03:18:07.674" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:18:07.366" endtime="20221117 03:18:07.674"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:07.753" level="INFO">#(CST) 2022/11/17 03:18:07.752638 -    0.138567 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:07.766" level="INFO">#(CST) 2022/11/17 03:18:07.766121 -    0.013484 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:07.766" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:07.766" level="INFO">#(CST) 2022/11/17 03:18:07.766375 -    0.000254 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:07.767" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:07.767" level="INFO">#(CST) 2022/11/17 03:18:07.766712 -    0.000337 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:07.775" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:07.779" level="INFO">#(CST) 2022/11/17 03:18:07.779336 -    0.012624 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:07.780" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:07.808" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:07.808" level="INFO">#(CST) 2022/11/17 03:18:07.808101 -    0.028765 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:07.808" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:07.821" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:07.821" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:07.905" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:07.905" level="INFO">#(CST) 2022/11/17 03:18:07.905028 -    0.096927 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:07.914" level="INFO">#(CST) 2022/11/17 03:18:07.914254 -    0.009226 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:07.926" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:07.942" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:07.675" endtime="20221117 03:18:07.942"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:18:07.944" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:18:07.943" endtime="20221117 03:18:07.944"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:18:08.027" level="INFO">#(CST) 2022/11/17 03:18:08.026758 -    0.112504 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:18:08.043" level="INFO">#(CST) 2022/11/17 03:18:08.043185 -    0.016427 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:18:08.043" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:08.044" level="INFO">#(CST) 2022/11/17 03:18:08.043474 -    0.000289 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:08.044" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:08.044" level="INFO">#(CST) 2022/11/17 03:18:08.043879 -    0.000405 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:08.054" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:08.059" level="INFO">#(CST) 2022/11/17 03:18:08.058729 -    0.014850 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:08.059" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:08.089" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:08.089" level="INFO">#(CST) 2022/11/17 03:18:08.089413 -    0.030684 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:08.090" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:08.102" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:08.103" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:18:08.199" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:08.199" level="INFO">#(CST) 2022/11/17 03:18:08.199136 -    0.109723 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:08.208" level="INFO">#(CST) 2022/11/17 03:18:08.208302 -    0.009167 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:08.221" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:08.234" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:18:08.234" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:18:08.235" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:18:07.944" endtime="20221117 03:18:08.235"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:18:08.236" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:18:08.236" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:18:08.235" endtime="20221117 03:18:08.236"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:18:08.237" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:18:08.237" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:08.236" endtime="20221117 03:18:08.237"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:18:08.238" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:18:08.238" endtime="20221117 03:18:08.238"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:08.239" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:08.239" endtime="20221117 03:18:08.240"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:08.240" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:18:08.240" endtime="20221117 03:18:08.241"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:08.241" endtime="20221117 03:18:08.242"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:08.238" endtime="20221117 03:18:08.242"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:08.243" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:08.242" endtime="20221117 03:18:08.243"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:08.244" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:18:08.243" endtime="20221117 03:18:08.244"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:08.244" endtime="20221117 03:18:08.245"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:08.242" endtime="20221117 03:18:08.245"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:08.238" endtime="20221117 03:18:08.245"></status>
</kw>
<msg timestamp="20221117 03:18:08.245" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:18:07.674" endtime="20221117 03:18:08.245"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:08.246" endtime="20221117 03:18:08.247"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:08.246" endtime="20221117 03:18:08.247"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:08.245" endtime="20221117 03:18:08.247"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:07.365" endtime="20221117 03:18:08.247"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.972" endtime="20221117 03:18:08.247"></status>
</kw>
<kw name="Test Teardown Execution">
<doc>Test teardown execution.</doc>
<kw name="Logout" library="Redfish">
<doc>Logout of session. YOU MUST CALL THIS WHEN YOU ARE DONE TO FREE</doc>
<msg timestamp="20221117 03:18:08.262" level="INFO">Attempt 1 of /redfish/v1/SessionService/Sessions/i8IwOcswP2</msg>
<msg timestamp="20221117 03:18:08.271" level="INFO">Response Time to /redfish/v1/SessionService/Sessions/i8IwOcswP2: 0.00905252993106842 seconds.</msg>
<msg timestamp="20221117 03:18:08.272" level="INFO">User logged out: {
  "@Message.ExtendedInfo": [
    {
      "@odata.type": "#Message.v1_1_1.Message",
      "Message": "Successfully Completed Request",
      "MessageArgs": [],
      "MessageId": "Base.1.8.1.Success",
      "MessageSeverity": "OK",
      "Resolution": "None"
    }
  ]
}</msg>
<status status="PASS" starttime="20221117 03:18:08.248" endtime="20221117 03:18:08.272"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:08.248" endtime="20221117 03:18:08.272"></status>
</kw>
<status status="PASS" starttime="20221117 03:17:20.972" endtime="20221117 03:18:08.272"></status>
</kw>
<doc>Configure multiple static ipv4 address via Redfish and verify.</doc>
<tags>
<tag>Configure_And_Verify_Multiple_Static_IPv4_Addresses</tag>
<tag>Network_Conf_Test</tag>
</tags>
<status status="FAIL" starttime="20221117 03:16:56.205" endtime="20221117 03:18:08.272" critical="yes">ValueError: The HTTP status code was not valid:
status:                                           500
valid_status_codes:
  [0]:                                            200
  [1]:                                            204
</status>
</test>
<test id="s1-t3" name="Configure And Verify Multiple IPv4 Addresses">
<kw name="Test Setup Execution" type="setup">
<doc>Test setup execution.</doc>
<kw name="Login" library="Redfish">
<doc>Assign BMC default values for username, password and auth arguments
and call parent class login method.</doc>
<msg timestamp="20221117 03:18:08.295" level="INFO">Attempt 1 of /redfish/v1/SessionService/Sessions</msg>
<msg timestamp="20221117 03:18:08.341" level="INFO">Response Time to /redfish/v1/SessionService/Sessions: 0.04551523597911 seconds.</msg>
<msg timestamp="20221117 03:18:08.341" level="INFO">{'@odata.id': '/redfish/v1/SessionService/Sessions/Uo95FIH8Uc', '@odata.type': '#Session.v1_5_0.Session', 'ClientOriginIPAddress': '::ffff:9.3.84.152', 'Description': 'Manager User Session', 'Id': 'Uo95FIH8Uc', 'Name': 'User Session', 'Oem': {'OpenBMC': {'@odata.type': '#OemSession.v1_0_0.Session', 'ClientID': ''}}, 'UserName': 'service'}</msg>
<msg timestamp="20221117 03:18:08.341" level="INFO">Login returned code 201: {
  "@odata.id": "/redfish/v1/SessionService/Sessions/Uo95FIH8Uc",
  "@odata.type": "#Session.v1_5_0.Session",
  "ClientOriginIPAddress": "::ffff:9.3.84.152",
  "Description": "Manager User Session",
  "Id": "Uo95FIH8Uc",
  "Name": "User Session",
  "Oem": {
    "OpenBMC": {
      "@odata.type": "#OemSession.v1_0_0.Session",
      "ClientID": ""
    }
  },
  "UserName": "service"
}</msg>
<status status="PASS" starttime="20221117 03:18:08.275" endtime="20221117 03:18:08.342"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:08.435" level="INFO">#(CST) 2022/11/17 03:18:08.434731 -    0.226429 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:08.453" level="INFO">#(CST) 2022/11/17 03:18:08.453110 -    0.018379 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:08.453" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:08.454" level="INFO">#(CST) 2022/11/17 03:18:08.453480 -    0.000370 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:08.454" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:08.454" level="INFO">#(CST) 2022/11/17 03:18:08.453961 -    0.000481 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:08.465" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:08.470" level="INFO">#(CST) 2022/11/17 03:18:08.469959 -    0.015998 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:08.470" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:08.505" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:08.505" level="INFO">#(CST) 2022/11/17 03:18:08.505423 -    0.035463 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:08.506" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:08.519" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:08.519" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:08.603" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:08.603" level="INFO">#(CST) 2022/11/17 03:18:08.603302 -    0.097879 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:08.612" level="INFO">#(CST) 2022/11/17 03:18:08.611439 -    0.008138 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:08.622" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:08.638" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:08.343" endtime="20221117 03:18:08.638"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:18:08.652" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:18:08.666" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014135235920548439 seconds.</msg>
<msg timestamp="20221117 03:18:08.667" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:18:08.638" endtime="20221117 03:18:08.667"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:18:08.668" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:18:08.667" endtime="20221117 03:18:08.668"></status>
</kw>
<msg timestamp="20221117 03:18:08.668" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:18:08.342" endtime="20221117 03:18:08.668"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>@{network_configurations}</arg>
</arguments>
<msg timestamp="20221117 03:18:08.669" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:18:08.669" endtime="20221117 03:18:08.670"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:08.740" level="INFO">#(CST) 2022/11/17 03:18:08.739919 -    0.128480 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:08.755" level="INFO">#(CST) 2022/11/17 03:18:08.755059 -    0.015139 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:08.755" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:08.755" level="INFO">#(CST) 2022/11/17 03:18:08.755349 -    0.000291 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:08.756" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:08.756" level="INFO">#(CST) 2022/11/17 03:18:08.755745 -    0.000396 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:08.765" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:08.769" level="INFO">#(CST) 2022/11/17 03:18:08.769193 -    0.013448 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:08.769" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:08.799" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:08.799" level="INFO">#(CST) 2022/11/17 03:18:08.799325 -    0.030133 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:08.799" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:08.811" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:08.811" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:08.998" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:08.998" level="INFO">#(CST) 2022/11/17 03:18:08.998156 -    0.198831 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:09.006" level="INFO">#(CST) 2022/11/17 03:18:09.006273 -    0.008117 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:09.017" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:09.033" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:08.671" endtime="20221117 03:18:09.033"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:18:09.034" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:18:09.033" endtime="20221117 03:18:09.034"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:18:09.109" level="INFO">#(CST) 2022/11/17 03:18:09.108975 -    0.102701 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:18:09.125" level="INFO">#(CST) 2022/11/17 03:18:09.125077 -    0.016103 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:18:09.125" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:09.125" level="INFO">#(CST) 2022/11/17 03:18:09.125383 -    0.000306 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:09.126" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:09.126" level="INFO">#(CST) 2022/11/17 03:18:09.125808 -    0.000425 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:09.136" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:09.140" level="INFO">#(CST) 2022/11/17 03:18:09.139868 -    0.014060 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:09.140" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:09.172" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:09.172" level="INFO">#(CST) 2022/11/17 03:18:09.171761 -    0.031893 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:09.172" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:09.184" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:09.184" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:18:09.299" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:09.299" level="INFO">#(CST) 2022/11/17 03:18:09.298887 -    0.127126 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:09.307" level="INFO">#(CST) 2022/11/17 03:18:09.306562 -    0.007676 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:09.317" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:09.330" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:18:09.330" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:18:09.330" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:18:09.035" endtime="20221117 03:18:09.330"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:18:09.331" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:18:09.332" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:18:09.331" endtime="20221117 03:18:09.332"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:18:09.333" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:18:09.333" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:09.332" endtime="20221117 03:18:09.333"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:18:09.334" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:18:09.333" endtime="20221117 03:18:09.334"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:09.335" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:09.335" endtime="20221117 03:18:09.335"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:09.336" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:18:09.336" endtime="20221117 03:18:09.336"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:09.337" endtime="20221117 03:18:09.337"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:09.334" endtime="20221117 03:18:09.337"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:09.339" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:09.338" endtime="20221117 03:18:09.339"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:09.340" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:18:09.339" endtime="20221117 03:18:09.340"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:09.340" endtime="20221117 03:18:09.341"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:09.338" endtime="20221117 03:18:09.341"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:09.334" endtime="20221117 03:18:09.341"></status>
</kw>
<msg timestamp="20221117 03:18:09.341" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:18:08.670" endtime="20221117 03:18:09.341"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${ip_data}</arg>
</arguments>
<msg timestamp="20221117 03:18:09.342" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:18:09.342" endtime="20221117 03:18:09.342"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:08.274" endtime="20221117 03:18:09.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Address=${test_ipv4_addr}</arg>
<arg>SubnetMask=255.255.0.0</arg>
<arg>Gateway=${test_gateway}</arg>
</arguments>
<assign>
<var>${ip1}</var>
</assign>
<msg timestamp="20221117 03:18:09.344" level="INFO">${ip1} = {'Address': '10.7.7.7', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}</msg>
<status status="PASS" starttime="20221117 03:18:09.343" endtime="20221117 03:18:09.344"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Address=${test_ipv4_addr2}</arg>
<arg>SubnetMask=255.255.252.0</arg>
<arg>Gateway=${test_gateway}</arg>
</arguments>
<assign>
<var>${ip2}</var>
</assign>
<msg timestamp="20221117 03:18:09.346" level="INFO">${ip2} = {'Address': '10.7.7.8', 'SubnetMask': '255.255.252.0', 'Gateway': '9.41.164.1'}</msg>
<status status="PASS" starttime="20221117 03:18:09.345" endtime="20221117 03:18:09.346"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:18:09.347" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:18:09.346" endtime="20221117 03:18:09.347"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:18:09.348" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:18:09.347" endtime="20221117 03:18:09.348"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>${network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:09.417" level="INFO">#(CST) 2022/11/17 03:18:09.417013 -    0.110451 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:09.432" level="INFO">#(CST) 2022/11/17 03:18:09.432119 -    0.015106 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:09.432" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:09.433" level="INFO">#(CST) 2022/11/17 03:18:09.432426 -    0.000307 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:09.433" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:09.433" level="INFO">#(CST) 2022/11/17 03:18:09.432848 -    0.000422 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:09.442" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:09.446" level="INFO">#(CST) 2022/11/17 03:18:09.446180 -    0.013331 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:09.446" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:09.478" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:09.478" level="INFO">#(CST) 2022/11/17 03:18:09.478004 -    0.031824 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:09.478" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:09.490" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:09.490" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:09.574" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:09.574" level="INFO">#(CST) 2022/11/17 03:18:09.574176 -    0.096172 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:09.582" level="INFO">#(CST) 2022/11/17 03:18:09.582050 -    0.007874 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:09.592" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:09.608" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:09.349" endtime="20221117 03:18:09.608"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:18:09.621" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:18:09.635" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.013348123989999294 seconds.</msg>
<msg timestamp="20221117 03:18:09.635" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:18:09.608" endtime="20221117 03:18:09.635"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:18:09.636" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:18:09.636" endtime="20221117 03:18:09.636"></status>
</kw>
<msg timestamp="20221117 03:18:09.637" level="INFO">${network_configurations} = [{'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}]</msg>
<status status="PASS" starttime="20221117 03:18:09.348" endtime="20221117 03:18:09.637"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${network_configurations}</arg>
</arguments>
<assign>
<var>${num_entries}</var>
</assign>
<msg timestamp="20221117 03:18:09.638" level="INFO">Length is 1</msg>
<msg timestamp="20221117 03:18:09.638" level="INFO">${num_entries} = 1</msg>
<status status="PASS" starttime="20221117 03:18:09.638" endtime="20221117 03:18:09.638"></status>
</kw>
<kw name="${INDEX} IN RANGE [ 0 | ${num_entries} ]" type="for">
<kw name="${INDEX} = 0" type="foritem">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:09.639" endtime="20221117 03:18:09.640"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:09.639" endtime="20221117 03:18:09.640"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:09.638" endtime="20221117 03:18:09.640"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${ip1}</arg>
<arg>${ip2}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:09.640" endtime="20221117 03:18:09.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20221117 03:18:09.642" level="INFO">${payload} = {'IPv4StaticAddresses': [{}, {'Address': '10.7.7.7', 'SubnetMask': '255.255.0.0', 'Gateway': '9.41.164.1'}, {'Address': '10.7.7.8', 'SubnetMask': '255.255.252.0', 'Gateway': '9.41.164.1'}]}</msg>
<status status="PASS" starttime="20221117 03:18:09.642" endtime="20221117 03:18:09.642"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:09.708" level="INFO">#(CST) 2022/11/17 03:18:09.707605 -    0.125555 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:09.722" level="INFO">#(CST) 2022/11/17 03:18:09.722412 -    0.014807 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:09.723" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:09.723" level="INFO">#(CST) 2022/11/17 03:18:09.722739 -    0.000327 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:09.723" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:09.723" level="INFO">#(CST) 2022/11/17 03:18:09.723159 -    0.000420 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:09.733" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:09.736" level="INFO">#(CST) 2022/11/17 03:18:09.736320 -    0.013162 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:09.737" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:09.767" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:09.768" level="INFO">#(CST) 2022/11/17 03:18:09.767540 -    0.031219 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:09.768" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:09.779" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:09.779" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:09.863" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:09.864" level="INFO">#(CST) 2022/11/17 03:18:09.863490 -    0.095950 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:09.871" level="INFO">#(CST) 2022/11/17 03:18:09.870633 -    0.007143 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:09.880" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:09.895" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:09.643" endtime="20221117 03:18:09.895"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:18:09.897" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:18:09.896" endtime="20221117 03:18:09.897"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{payload}</arg>
<arg>valid_status_codes=[${HTTP_OK}, ${HTTP_NO_CONTENT}]</arg>
</arguments>
<msg timestamp="20221117 03:18:09.909" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:18:10.312" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.40187657345086336 seconds.</msg>
<status status="PASS" starttime="20221117 03:18:09.897" endtime="20221117 03:18:10.312"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:18:28.314" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:18:10.313" endtime="20221117 03:18:28.314"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:18:28.319" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:18:28.319" endtime="20221117 03:18:28.320"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:18:28.327" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:18:31.342" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:18:31.342" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.241 ms
64 bytes from rain40bmc.aus.stglabs....</msg>
<status status="PASS" starttime="20221117 03:18:28.320" endtime="20221117 03:18:31.342"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:18:31.345" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.241 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.273 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.269 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.233 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.233/0.254/0.273/0.017 ms</msg>
<status status="PASS" starttime="20221117 03:18:31.344" endtime="20221117 03:18:31.346"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:31.347" endtime="20221117 03:18:31.348"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:28.318" endtime="20221117 03:18:31.348"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:28.316" endtime="20221117 03:18:31.348"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:28.315" endtime="20221117 03:18:31.348"></status>
</kw>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${test_ipv4_addr}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:31.448" level="INFO">#(CST) 2022/11/17 03:18:31.447506 -   21.576873 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:31.466" level="INFO">#(CST) 2022/11/17 03:18:31.466155 -    0.018650 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:31.466" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:31.467" level="INFO">#(CST) 2022/11/17 03:18:31.466599 -    0.000443 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:31.467" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:31.467" level="INFO">#(CST) 2022/11/17 03:18:31.467167 -    0.000569 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:31.479" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:31.484" level="INFO">#(CST) 2022/11/17 03:18:31.484089 -    0.016922 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:31.484" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:31.522" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:31.522" level="INFO">#(CST) 2022/11/17 03:18:31.522145 -    0.038056 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:31.522" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:31.536" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:31.536" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:31.621" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:31.621" level="INFO">#(CST) 2022/11/17 03:18:31.620921 -    0.098776 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:31.629" level="INFO">#(CST) 2022/11/17 03:18:31.628633 -    0.007712 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:31.639" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:31.654" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:31.352" endtime="20221117 03:18:31.654"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:18:31.655" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:18:31.655" endtime="20221117 03:18:31.655"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:18:31.724" level="INFO">#(CST) 2022/11/17 03:18:31.724010 -    0.095377 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:18:31.739" level="INFO">#(CST) 2022/11/17 03:18:31.739238 -    0.015228 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:18:31.739" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:31.740" level="INFO">#(CST) 2022/11/17 03:18:31.739532 -    0.000294 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:31.740" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:31.740" level="INFO">#(CST) 2022/11/17 03:18:31.739943 -    0.000411 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:31.749" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:31.753" level="INFO">#(CST) 2022/11/17 03:18:31.753308 -    0.013366 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:31.754" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:31.784" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:31.784" level="INFO">#(CST) 2022/11/17 03:18:31.784151 -    0.030843 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:31.784" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:31.796" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:31.796" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:18:31.880" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:31.880" level="INFO">#(CST) 2022/11/17 03:18:31.880232 -    0.096081 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:31.888" level="INFO">#(CST) 2022/11/17 03:18:31.888046 -    0.007815 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:31.898" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:31.911" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:18:31.912" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:18:31.912" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:18:31.656" endtime="20221117 03:18:31.912"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:18:31.913" level="INFO">4 out of 5 lines matched</msg>
<msg timestamp="20221117 03:18:31.913" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0
    inet 9.41.164.249/24 brd ...</msg>
<status status="PASS" starttime="20221117 03:18:31.912" endtime="20221117 03:18:31.913"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:18:31.914" level="INFO">4 lines returned</msg>
<msg timestamp="20221117 03:18:31.914" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0 |     inet 9.41.164.249...</msg>
<status status="PASS" starttime="20221117 03:18:31.914" endtime="20221117 03:18:31.914"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:18:31.915" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:18:31.915" endtime="20221117 03:18:31.915"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:31.917" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:31.916" endtime="20221117 03:18:31.917"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:31.918" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:18:31.917" endtime="20221117 03:18:31.918"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:31.919" endtime="20221117 03:18:31.919"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:31.916" endtime="20221117 03:18:31.919"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:31.920" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:31.920" endtime="20221117 03:18:31.920"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:31.921" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:18:31.921" endtime="20221117 03:18:31.922"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:31.922" endtime="20221117 03:18:31.923"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:31.919" endtime="20221117 03:18:31.923"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:31.924" level="INFO">@{if_info} = [ inet | 10.7.7.8/22 | brd | 10.7.7.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:31.923" endtime="20221117 03:18:31.924"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:31.925" level="INFO">${ip_n_prefix} = 10.7.7.8/22</msg>
<status status="PASS" starttime="20221117 03:18:31.925" endtime="20221117 03:18:31.925"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:31.926" endtime="20221117 03:18:31.926"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:31.923" endtime="20221117 03:18:31.926"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:31.927" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:31.927" endtime="20221117 03:18:31.928"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:31.928" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:18:31.928" endtime="20221117 03:18:31.929"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:31.929" endtime="20221117 03:18:31.930"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:31.926" endtime="20221117 03:18:31.930"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:31.915" endtime="20221117 03:18:31.930"></status>
</kw>
<msg timestamp="20221117 03:18:31.930" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.7/16 | 10.7.7.8/22 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:18:31.351" endtime="20221117 03:18:31.930"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:31.931" endtime="20221117 03:18:31.931"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:31.349" endtime="20221117 03:18:31.932"></status>
</kw>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${test_ipv4_addr2}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:32.002" level="INFO">#(CST) 2022/11/17 03:18:32.002407 -    0.114361 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:32.018" level="INFO">#(CST) 2022/11/17 03:18:32.017716 -    0.015309 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:32.018" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:32.018" level="INFO">#(CST) 2022/11/17 03:18:32.018017 -    0.000300 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:32.018" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:32.018" level="INFO">#(CST) 2022/11/17 03:18:32.018414 -    0.000397 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:32.028" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:32.032" level="INFO">#(CST) 2022/11/17 03:18:32.031918 -    0.013504 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:32.032" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:32.062" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:32.062" level="INFO">#(CST) 2022/11/17 03:18:32.062299 -    0.030381 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:32.062" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:32.074" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:32.075" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:32.158" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:32.159" level="INFO">#(CST) 2022/11/17 03:18:32.158508 -    0.096210 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:32.167" level="INFO">#(CST) 2022/11/17 03:18:32.166519 -    0.008011 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:32.177" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:32.193" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:31.934" endtime="20221117 03:18:32.193"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:18:32.194" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:18:32.193" endtime="20221117 03:18:32.194"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:18:32.267" level="INFO">#(CST) 2022/11/17 03:18:32.266880 -    0.100360 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:18:32.283" level="INFO">#(CST) 2022/11/17 03:18:32.282969 -    0.016089 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:18:32.283" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:32.283" level="INFO">#(CST) 2022/11/17 03:18:32.283295 -    0.000327 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:32.284" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:32.284" level="INFO">#(CST) 2022/11/17 03:18:32.283725 -    0.000430 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:32.294" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:32.298" level="INFO">#(CST) 2022/11/17 03:18:32.297753 -    0.014028 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:32.298" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:32.331" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:32.331" level="INFO">#(CST) 2022/11/17 03:18:32.330734 -    0.032981 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:32.331" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:32.343" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:32.343" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:18:32.427" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:32.427" level="INFO">#(CST) 2022/11/17 03:18:32.427285 -    0.096551 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:32.435" level="INFO">#(CST) 2022/11/17 03:18:32.434814 -    0.007529 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:32.445" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:32.458" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    ...</msg>
<msg timestamp="20221117 03:18:32.458" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:18:32.458" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:18:32.195" endtime="20221117 03:18:32.458"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:18:32.459" level="INFO">4 out of 5 lines matched</msg>
<msg timestamp="20221117 03:18:32.459" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0
    inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0
    inet 9.41.164.249/24 brd ...</msg>
<status status="PASS" starttime="20221117 03:18:32.459" endtime="20221117 03:18:32.459"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:18:32.460" level="INFO">4 lines returned</msg>
<msg timestamp="20221117 03:18:32.460" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0 |     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0 |     inet 9.41.164.249...</msg>
<status status="PASS" starttime="20221117 03:18:32.460" endtime="20221117 03:18:32.460"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:18:32.461" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:18:32.461" endtime="20221117 03:18:32.461"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:32.463" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:32.462" endtime="20221117 03:18:32.463"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:32.464" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:18:32.463" endtime="20221117 03:18:32.464"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:32.464" endtime="20221117 03:18:32.465"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:32.462" endtime="20221117 03:18:32.465"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.7/16 brd 10.7.255.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:32.466" level="INFO">@{if_info} = [ inet | 10.7.7.7/16 | brd | 10.7.255.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:32.465" endtime="20221117 03:18:32.466"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:32.467" level="INFO">${ip_n_prefix} = 10.7.7.7/16</msg>
<status status="PASS" starttime="20221117 03:18:32.466" endtime="20221117 03:18:32.467"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:32.467" endtime="20221117 03:18:32.468"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:32.465" endtime="20221117 03:18:32.468"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:32.469" level="INFO">@{if_info} = [ inet | 10.7.7.8/22 | brd | 10.7.7.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:32.469" endtime="20221117 03:18:32.469"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:32.470" level="INFO">${ip_n_prefix} = 10.7.7.8/22</msg>
<status status="PASS" starttime="20221117 03:18:32.470" endtime="20221117 03:18:32.470"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:32.471" endtime="20221117 03:18:32.471"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:32.468" endtime="20221117 03:18:32.471"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:32.472" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:32.472" endtime="20221117 03:18:32.472"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:32.473" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:18:32.473" endtime="20221117 03:18:32.473"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:32.474" endtime="20221117 03:18:32.476"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:32.471" endtime="20221117 03:18:32.476"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:32.461" endtime="20221117 03:18:32.476"></status>
</kw>
<msg timestamp="20221117 03:18:32.476" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.7/16 | 10.7.7.8/22 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:18:31.933" endtime="20221117 03:18:32.476"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:32.477" endtime="20221117 03:18:32.477"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:31.932" endtime="20221117 03:18:32.478"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete IP Address</arg>
<arg>${test_ipv4_addr}</arg>
<arg>AND</arg>
<arg>Delete IP Address</arg>
<arg>${test_ipv4_addr2}</arg>
<arg>AND</arg>
<arg>Test Teardown Execution</arg>
</arguments>
<kw name="Delete IP Address" library="bmc_network_utils">
<doc>Delete IP Address Of BMC.</doc>
<arguments>
<arg>${test_ipv4_addr}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:18:32.481" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:18:32.480" endtime="20221117 03:18:32.481"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:18:32.481" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:18:32.481" endtime="20221117 03:18:32.481"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:32.558" level="INFO">#(CST) 2022/11/17 03:18:32.558009 -    0.123195 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:32.574" level="INFO">#(CST) 2022/11/17 03:18:32.573772 -    0.015763 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:32.574" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:32.574" level="INFO">#(CST) 2022/11/17 03:18:32.574081 -    0.000310 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:32.574" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:32.575" level="INFO">#(CST) 2022/11/17 03:18:32.574477 -    0.000395 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:32.584" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:32.589" level="INFO">#(CST) 2022/11/17 03:18:32.588546 -    0.014069 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:32.589" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:32.620" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:32.620" level="INFO">#(CST) 2022/11/17 03:18:32.619867 -    0.031322 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:32.620" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:32.633" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:32.633" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:32.716" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:32.717" level="INFO">#(CST) 2022/11/17 03:18:32.716518 -    0.096650 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:32.725" level="INFO">#(CST) 2022/11/17 03:18:32.725143 -    0.008625 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:32.736" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:32.752" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:32.483" endtime="20221117 03:18:32.752"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:18:32.767" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:18:32.783" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014507075771689415 seconds.</msg>
<msg timestamp="20221117 03:18:32.783" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:18:32.753" endtime="20221117 03:18:32.783"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:18:32.785" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:18:32.784" endtime="20221117 03:18:32.785"></status>
</kw>
<msg timestamp="20221117 03:18:32.785" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'} | {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '...</msg>
<status status="PASS" starttime="20221117 03:18:32.482" endtime="20221117 03:18:32.786"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.7', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.0.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:32.788" endtime="20221117 03:18:32.789"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:32.787" endtime="20221117 03:18:32.789"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:32.786" endtime="20221117 03:18:32.789"></status>
</kw>
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.252.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:32.791" endtime="20221117 03:18:32.792"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:32.790" endtime="20221117 03:18:32.792"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:32.789" endtime="20221117 03:18:32.792"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:32.795" endtime="20221117 03:18:32.795"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:32.793" endtime="20221117 03:18:32.795"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:32.792" endtime="20221117 03:18:32.795"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:32.786" endtime="20221117 03:18:32.795"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<assign>
<var>${ip_found}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:32.797" endtime="20221117 03:18:32.798"></status>
</kw>
<msg timestamp="20221117 03:18:32.798" level="INFO">${ip_found} = True</msg>
<status status="PASS" starttime="20221117 03:18:32.796" endtime="20221117 03:18:32.798"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>${ip_found} == ${False}</arg>
<arg>${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:32.799" endtime="20221117 03:18:32.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:18:32.800" level="INFO">${data} = {'IPv4StaticAddresses': [None, {}, {}]}</msg>
<status status="PASS" starttime="20221117 03:18:32.800" endtime="20221117 03:18:32.801"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:32.887" level="INFO">#(CST) 2022/11/17 03:18:32.886872 -    0.161729 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:32.905" level="INFO">#(CST) 2022/11/17 03:18:32.904591 -    0.017719 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:32.905" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:32.905" level="INFO">#(CST) 2022/11/17 03:18:32.904940 -    0.000349 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:32.905" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:32.905" level="INFO">#(CST) 2022/11/17 03:18:32.905389 -    0.000449 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:32.916" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:32.921" level="INFO">#(CST) 2022/11/17 03:18:32.921036 -    0.015646 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:32.921" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:32.955" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:32.955" level="INFO">#(CST) 2022/11/17 03:18:32.954875 -    0.033839 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:32.955" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:32.968" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:32.968" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:33.063" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:33.063" level="INFO">#(CST) 2022/11/17 03:18:33.062761 -    0.107886 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:33.071" level="INFO">#(CST) 2022/11/17 03:18:33.070828 -    0.008067 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:33.081" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:33.096" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:32.801" endtime="20221117 03:18:33.096"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:18:33.097" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:18:33.096" endtime="20221117 03:18:33.097"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:18:33.110" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:18:33.139" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.028631201945245266 seconds.</msg>
<status status="PASS" starttime="20221117 03:18:33.098" endtime="20221117 03:18:33.140"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:18:51.141" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:18:33.140" endtime="20221117 03:18:51.141"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:18:51.147" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:18:51.147" endtime="20221117 03:18:51.148"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:18:51.155" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:18:54.175" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:18:54.175" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=2.23 ms
64 bytes from rain40bmc.aus.stglabs.i...</msg>
<status status="PASS" starttime="20221117 03:18:51.148" endtime="20221117 03:18:54.175"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:18:54.178" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=2.23 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.232 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.228 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.213 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.213/0.727/2.236/0.871 ms</msg>
<status status="PASS" starttime="20221117 03:18:54.177" endtime="20221117 03:18:54.178"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:54.179" endtime="20221117 03:18:54.180"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:51.145" endtime="20221117 03:18:54.180"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:51.144" endtime="20221117 03:18:54.180"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:51.142" endtime="20221117 03:18:54.181"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify IP On BMC</arg>
<arg>${ip}</arg>
</arguments>
<assign>
<var>${delete_status}</var>
</assign>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:54.291" level="INFO">#(CST) 2022/11/17 03:18:54.290969 -   21.220141 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:54.310" level="INFO">#(CST) 2022/11/17 03:18:54.310043 -    0.019074 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:54.310" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:54.311" level="INFO">#(CST) 2022/11/17 03:18:54.310432 -    0.000389 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:54.311" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:54.311" level="INFO">#(CST) 2022/11/17 03:18:54.310898 -    0.000465 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:54.322" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:54.328" level="INFO">#(CST) 2022/11/17 03:18:54.327503 -    0.016606 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:54.328" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:54.362" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:54.362" level="INFO">#(CST) 2022/11/17 03:18:54.361630 -    0.034127 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:54.362" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:54.376" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:54.376" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:54.460" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:54.460" level="INFO">#(CST) 2022/11/17 03:18:54.460074 -    0.098444 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:54.470" level="INFO">#(CST) 2022/11/17 03:18:54.469783 -    0.009709 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:54.482" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:54.498" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:54.185" endtime="20221117 03:18:54.498"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:18:54.500" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:18:54.499" endtime="20221117 03:18:54.500"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:18:54.586" level="INFO">#(CST) 2022/11/17 03:18:54.586380 -    0.116596 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:18:54.604" level="INFO">#(CST) 2022/11/17 03:18:54.603618 -    0.017239 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:18:54.604" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:54.604" level="INFO">#(CST) 2022/11/17 03:18:54.603910 -    0.000292 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:54.604" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:54.604" level="INFO">#(CST) 2022/11/17 03:18:54.604292 -    0.000381 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:54.615" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:54.620" level="INFO">#(CST) 2022/11/17 03:18:54.619439 -    0.015147 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:54.620" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:54.650" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:54.651" level="INFO">#(CST) 2022/11/17 03:18:54.650497 -    0.031058 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:54.651" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:54.664" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:54.664" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:18:54.748" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:54.748" level="INFO">#(CST) 2022/11/17 03:18:54.747965 -    0.097468 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:54.758" level="INFO">#(CST) 2022/11/17 03:18:54.757646 -    0.009681 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:54.770" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:54.784" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0
    in...</msg>
<msg timestamp="20221117 03:18:54.784" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:18:54.784" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:18:54.500" endtime="20221117 03:18:54.784"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:18:54.785" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:18:54.785" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:18:54.785" endtime="20221117 03:18:54.785"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:18:54.786" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:18:54.787" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:54.786" endtime="20221117 03:18:54.787"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:18:54.788" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:18:54.787" endtime="20221117 03:18:54.788"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:54.789" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:54.789" endtime="20221117 03:18:54.789"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:54.790" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:18:54.790" endtime="20221117 03:18:54.790"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:54.791" endtime="20221117 03:18:54.791"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:54.788" endtime="20221117 03:18:54.791"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:54.793" level="INFO">@{if_info} = [ inet | 10.7.7.8/22 | brd | 10.7.7.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:54.792" endtime="20221117 03:18:54.793"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:54.794" level="INFO">${ip_n_prefix} = 10.7.7.8/22</msg>
<status status="PASS" starttime="20221117 03:18:54.793" endtime="20221117 03:18:54.794"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:54.794" endtime="20221117 03:18:54.795"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:54.792" endtime="20221117 03:18:54.795"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:54.796" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:54.795" endtime="20221117 03:18:54.796"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:54.797" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:18:54.796" endtime="20221117 03:18:54.797"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:54.797" endtime="20221117 03:18:54.798"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:54.795" endtime="20221117 03:18:54.798"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:54.788" endtime="20221117 03:18:54.798"></status>
</kw>
<msg timestamp="20221117 03:18:54.798" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 10.7.7.8/22 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:18:54.184" endtime="20221117 03:18:54.799"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<msg timestamp="20221117 03:18:54.800" level="FAIL">IP address does not exist.</msg>
<status status="FAIL" starttime="20221117 03:18:54.799" endtime="20221117 03:18:54.801"></status>
</kw>
<status status="FAIL" starttime="20221117 03:18:54.182" endtime="20221117 03:18:54.801"></status>
</kw>
<msg timestamp="20221117 03:18:54.801" level="INFO">${delete_status} = False</msg>
<status status="PASS" starttime="20221117 03:18:54.181" endtime="20221117 03:18:54.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${False}'</arg>
<arg>ELSE</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${True}'</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>'${delete_status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:54.803" endtime="20221117 03:18:54.803"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:54.802" endtime="20221117 03:18:54.803"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:54.884" level="INFO">#(CST) 2022/11/17 03:18:54.883593 -    0.125947 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:54.900" level="INFO">#(CST) 2022/11/17 03:18:54.899529 -    0.015937 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:54.900" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:54.900" level="INFO">#(CST) 2022/11/17 03:18:54.899824 -    0.000294 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:54.900" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:54.900" level="INFO">#(CST) 2022/11/17 03:18:54.900205 -    0.000381 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:54.910" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:54.915" level="INFO">#(CST) 2022/11/17 03:18:54.914543 -    0.014338 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:54.915" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:54.944" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:54.945" level="INFO">#(CST) 2022/11/17 03:18:54.944542 -    0.029999 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:54.945" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:54.957" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:54.957" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:55.051" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:55.052" level="INFO">#(CST) 2022/11/17 03:18:55.051547 -    0.107004 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:55.061" level="INFO">#(CST) 2022/11/17 03:18:55.060874 -    0.009327 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:55.073" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:55.089" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:54.805" endtime="20221117 03:18:55.089"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:18:55.105" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:18:55.119" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.014265242032706738 seconds.</msg>
<msg timestamp="20221117 03:18:55.120" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:18:55.090" endtime="20221117 03:18:55.120"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:18:55.122" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.252.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMa...</msg>
<status status="PASS" starttime="20221117 03:18:55.121" endtime="20221117 03:18:55.122"></status>
</kw>
<msg timestamp="20221117 03:18:55.122" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.252.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMa...</msg>
<status status="PASS" starttime="20221117 03:18:54.804" endtime="20221117 03:18:55.123"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:55.222" level="INFO">#(CST) 2022/11/17 03:18:55.221863 -    0.160989 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:55.241" level="INFO">#(CST) 2022/11/17 03:18:55.240510 -    0.018647 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:55.241" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:55.241" level="INFO">#(CST) 2022/11/17 03:18:55.240856 -    0.000345 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:55.241" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:55.241" level="INFO">#(CST) 2022/11/17 03:18:55.241308 -    0.000452 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:55.253" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:55.258" level="INFO">#(CST) 2022/11/17 03:18:55.257820 -    0.016512 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:55.258" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:55.291" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:55.292" level="INFO">#(CST) 2022/11/17 03:18:55.291502 -    0.033682 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:55.292" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:55.304" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:55.304" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:55.388" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:55.388" level="INFO">#(CST) 2022/11/17 03:18:55.388327 -    0.096825 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:55.398" level="INFO">#(CST) 2022/11/17 03:18:55.397673 -    0.009346 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:55.409" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:55.426" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:55.124" endtime="20221117 03:18:55.426"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:18:55.427" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:18:55.427" endtime="20221117 03:18:55.427"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:18:55.509" level="INFO">#(CST) 2022/11/17 03:18:55.508970 -    0.111296 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:18:55.525" level="INFO">#(CST) 2022/11/17 03:18:55.525307 -    0.016337 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:18:55.526" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:55.526" level="INFO">#(CST) 2022/11/17 03:18:55.525603 -    0.000296 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:55.526" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:55.526" level="INFO">#(CST) 2022/11/17 03:18:55.526008 -    0.000406 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:55.536" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:55.541" level="INFO">#(CST) 2022/11/17 03:18:55.540958 -    0.014950 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:55.541" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:55.571" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:55.571" level="INFO">#(CST) 2022/11/17 03:18:55.571052 -    0.030094 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:55.571" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:55.584" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:55.584" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:18:55.667" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:55.667" level="INFO">#(CST) 2022/11/17 03:18:55.667289 -    0.096238 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:55.676" level="INFO">#(CST) 2022/11/17 03:18:55.676298 -    0.009008 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:55.688" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:55.702" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0
    in...</msg>
<msg timestamp="20221117 03:18:55.702" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:18:55.702" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:18:55.428" endtime="20221117 03:18:55.702"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:18:55.703" level="INFO">3 out of 4 lines matched</msg>
<msg timestamp="20221117 03:18:55.703" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:18:55.702" endtime="20221117 03:18:55.703"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:18:55.704" level="INFO">3 lines returned</msg>
<msg timestamp="20221117 03:18:55.704" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:55.704" endtime="20221117 03:18:55.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:18:55.705" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:18:55.705" endtime="20221117 03:18:55.705"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:55.707" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:55.706" endtime="20221117 03:18:55.707"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:55.708" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:18:55.707" endtime="20221117 03:18:55.708"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:55.708" endtime="20221117 03:18:55.709"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:55.706" endtime="20221117 03:18:55.709"></status>
</kw>
<kw name="${ip_component} =     inet 10.7.7.8/22 brd 10.7.7.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:55.710" level="INFO">@{if_info} = [ inet | 10.7.7.8/22 | brd | 10.7.7.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:55.710" endtime="20221117 03:18:55.710"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:55.711" level="INFO">${ip_n_prefix} = 10.7.7.8/22</msg>
<status status="PASS" starttime="20221117 03:18:55.711" endtime="20221117 03:18:55.711"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:55.712" endtime="20221117 03:18:55.712"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:55.709" endtime="20221117 03:18:55.712"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:18:55.714" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:18:55.713" endtime="20221117 03:18:55.714"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:18:55.715" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:18:55.714" endtime="20221117 03:18:55.715"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:55.715" endtime="20221117 03:18:55.716"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:55.712" endtime="20221117 03:18:55.716"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:55.706" endtime="20221117 03:18:55.716"></status>
</kw>
<msg timestamp="20221117 03:18:55.716" level="INFO">${ip_data} = ['169.254.6.76/16', '10.7.7.8/22', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:18:55.123" endtime="20221117 03:18:55.716"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.252.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:55.717" endtime="20221117 03:18:55.718"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:55.717" endtime="20221117 03:18:55.718"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:55.719" endtime="20221117 03:18:55.720"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:55.718" endtime="20221117 03:18:55.720"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:55.717" endtime="20221117 03:18:55.720"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:54.804" endtime="20221117 03:18:55.720"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:32.479" endtime="20221117 03:18:55.720"></status>
</kw>
<kw name="Delete IP Address" library="bmc_network_utils">
<doc>Delete IP Address Of BMC.</doc>
<arguments>
<arg>${test_ipv4_addr2}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20221117 03:18:55.722" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" starttime="20221117 03:18:55.722" endtime="20221117 03:18:55.722"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${patch_list}</var>
</assign>
<msg timestamp="20221117 03:18:55.723" level="INFO">${patch_list} = []</msg>
<status status="PASS" starttime="20221117 03:18:55.723" endtime="20221117 03:18:55.723"></status>
</kw>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:55.798" level="INFO">#(CST) 2022/11/17 03:18:55.798365 -    0.122067 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:55.814" level="INFO">#(CST) 2022/11/17 03:18:55.813954 -    0.015590 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:55.814" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:55.814" level="INFO">#(CST) 2022/11/17 03:18:55.814237 -    0.000282 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:55.815" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:55.815" level="INFO">#(CST) 2022/11/17 03:18:55.814618 -    0.000381 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:55.824" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:55.829" level="INFO">#(CST) 2022/11/17 03:18:55.828570 -    0.013952 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:55.829" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:55.859" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:55.859" level="INFO">#(CST) 2022/11/17 03:18:55.859140 -    0.030570 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:55.859" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:55.872" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:55.872" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:55.956" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:55.956" level="INFO">#(CST) 2022/11/17 03:18:55.955917 -    0.096777 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:55.965" level="INFO">#(CST) 2022/11/17 03:18:55.964626 -    0.008709 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:55.976" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:55.991" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:55.724" endtime="20221117 03:18:55.992"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:18:56.006" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:18:56.020" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.013987116049975157 seconds.</msg>
<msg timestamp="20221117 03:18:56.021" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:18:55.992" endtime="20221117 03:18:56.021"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:18:56.022" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.252.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMa...</msg>
<status status="PASS" starttime="20221117 03:18:56.021" endtime="20221117 03:18:56.022"></status>
</kw>
<msg timestamp="20221117 03:18:56.022" level="INFO">@{network_configurations} = [ {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.252.0'} | {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMa...</msg>
<status status="PASS" starttime="20221117 03:18:55.723" endtime="20221117 03:18:56.022"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '10.7.7.8', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.252.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:56.024" endtime="20221117 03:18:56.025"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:56.023" endtime="20221117 03:18:56.025"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:56.023" endtime="20221117 03:18:56.025"></status>
</kw>
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${network_configuration['Address']}' == '${ip}'</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>ELSE</arg>
<arg>Append To List</arg>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${empty_dict}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:56.026" endtime="20221117 03:18:56.027"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:56.025" endtime="20221117 03:18:56.027"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:56.025" endtime="20221117 03:18:56.027"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:56.022" endtime="20221117 03:18:56.027"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<assign>
<var>${ip_found}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${patch_list}</arg>
<arg>${null}</arg>
<arg>msg=${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:56.028" endtime="20221117 03:18:56.029"></status>
</kw>
<msg timestamp="20221117 03:18:56.029" level="INFO">${ip_found} = True</msg>
<status status="PASS" starttime="20221117 03:18:56.027" endtime="20221117 03:18:56.029"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>${ip_found} == ${False}</arg>
<arg>${ip} does not exist on BMC</arg>
</arguments>
<status status="PASS" starttime="20221117 03:18:56.029" endtime="20221117 03:18:56.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>IPv4StaticAddresses=${patch_list}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20221117 03:18:56.031" level="INFO">${data} = {'IPv4StaticAddresses': [None, {}]}</msg>
<status status="PASS" starttime="20221117 03:18:56.030" endtime="20221117 03:18:56.031"></status>
</kw>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:18:56.102" level="INFO">#(CST) 2022/11/17 03:18:56.101560 -    0.136934 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:18:56.117" level="INFO">#(CST) 2022/11/17 03:18:56.116712 -    0.015152 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:18:56.117" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:18:56.117" level="INFO">#(CST) 2022/11/17 03:18:56.117005 -    0.000293 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:18:56.117" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:18:56.117" level="INFO">#(CST) 2022/11/17 03:18:56.117417 -    0.000412 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:18:56.127" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:18:56.131" level="INFO">#(CST) 2022/11/17 03:18:56.130998 -    0.013581 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:18:56.131" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:18:56.161" level="INFO">children:
</msg>
<msg timestamp="20221117 03:18:56.162" level="INFO">#(CST) 2022/11/17 03:18:56.161548 -    0.030550 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:18:56.162" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:18:56.174" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:18:56.174" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:18:56.258" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:18:56.258" level="INFO">#(CST) 2022/11/17 03:18:56.257669 -    0.096122 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:18:56.266" level="INFO">#(CST) 2022/11/17 03:18:56.265962 -    0.008292 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:18:56.277" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:18:56.292" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:18:56.031" endtime="20221117 03:18:56.292"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:18:56.294" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:18:56.293" endtime="20221117 03:18:56.294"></status>
</kw>
<kw name="Patch" library="Redfish">
<doc>Perform a PUT request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${ethernet_interface}</arg>
<arg>body=&amp;{data}</arg>
<arg>valid_status_codes=[${valid_status_codes}]</arg>
</arguments>
<msg timestamp="20221117 03:18:56.307" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:18:56.340" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.032374836038798094 seconds.</msg>
<status status="PASS" starttime="20221117 03:18:56.294" endtime="20221117 03:18:56.341"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${NETWORK_TIMEOUT}s</arg>
</arguments>
<msg timestamp="20221117 03:19:14.342" level="INFO">Slept 18 seconds</msg>
<status status="PASS" starttime="20221117 03:18:56.341" endtime="20221117 03:19:14.342"></status>
</kw>
<kw name="Wait For Host To Ping" library="common_utils">
<doc>Wait for the given host to ping.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>${NETWORK_TIMEOUT}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="common_utils">
<doc>Ping the given host.</doc>
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20221117 03:19:14.348" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20221117 03:19:14.348" endtime="20221117 03:19:14.348"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20221117 03:19:14.356" level="INFO">Running command 'ping -c 4 rain40bmc 2&gt;&amp;1'.</msg>
<msg timestamp="20221117 03:19:17.371" level="INFO">${RC} = 0</msg>
<msg timestamp="20221117 03:19:17.371" level="INFO">${output} = PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.234 ms
64 bytes from rain40bmc.aus.stglabs....</msg>
<status status="PASS" starttime="20221117 03:19:14.349" endtime="20221117 03:19:17.371"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20221117 03:19:17.374" level="INFO">RC: 0
Output:
PING rain40bmc.aus.stglabs.ibm.com (9.41.164.249) 56(84) bytes of data.
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=1 ttl=63 time=0.234 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=2 ttl=63 time=0.277 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=3 ttl=63 time=0.281 ms
64 bytes from rain40bmc.aus.stglabs.ibm.com (9.41.164.249): icmp_seq=4 ttl=63 time=0.232 ms

--- rain40bmc.aus.stglabs.ibm.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.232/0.256/0.281/0.023 ms</msg>
<status status="PASS" starttime="20221117 03:19:17.373" endtime="20221117 03:19:17.374"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:19:17.375" endtime="20221117 03:19:17.376"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:14.346" endtime="20221117 03:19:17.376"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:14.345" endtime="20221117 03:19:17.376"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:14.343" endtime="20221117 03:19:17.376"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify IP On BMC</arg>
<arg>${ip}</arg>
</arguments>
<assign>
<var>${delete_status}</var>
</assign>
<kw name="Verify IP On BMC" library="bmc_network_utils">
<doc>Verify IP on BMC.</doc>
<arguments>
<arg>${ip}</arg>
</arguments>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:19:17.477" level="INFO">#(CST) 2022/11/17 03:19:17.476429 -   21.210467 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:19:17.493" level="INFO">#(CST) 2022/11/17 03:19:17.492909 -    0.016480 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:19:17.493" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:19:17.493" level="INFO">#(CST) 2022/11/17 03:19:17.493357 -    0.000448 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:19:17.494" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:19:17.494" level="INFO">#(CST) 2022/11/17 03:19:17.493780 -    0.000422 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:19:17.504" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:19:17.509" level="INFO">#(CST) 2022/11/17 03:19:17.508471 -    0.014691 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:19:17.509" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:19:17.540" level="INFO">children:
</msg>
<msg timestamp="20221117 03:19:17.540" level="INFO">#(CST) 2022/11/17 03:19:17.539989 -    0.031518 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:19:17.540" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:19:17.553" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:19:17.554" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:19:17.637" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:19:17.638" level="INFO">#(CST) 2022/11/17 03:19:17.637578 -    0.097589 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:19:17.643" level="INFO">#(CST) 2022/11/17 03:19:17.642781 -    0.005203 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:19:17.649" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:19:17.658" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:19:17.380" endtime="20221117 03:19:17.658"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:19:17.659" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:19:17.659" endtime="20221117 03:19:17.659"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:19:17.717" level="INFO">#(CST) 2022/11/17 03:19:17.716446 -    0.073666 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:19:17.730" level="INFO">#(CST) 2022/11/17 03:19:17.729966 -    0.013519 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:19:17.730" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:19:17.730" level="INFO">#(CST) 2022/11/17 03:19:17.730217 -    0.000252 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:19:17.730" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:19:17.731" level="INFO">#(CST) 2022/11/17 03:19:17.730546 -    0.000329 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:19:17.739" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:19:17.743" level="INFO">#(CST) 2022/11/17 03:19:17.743371 -    0.012825 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:19:17.744" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:19:17.773" level="INFO">children:
</msg>
<msg timestamp="20221117 03:19:17.773" level="INFO">#(CST) 2022/11/17 03:19:17.773093 -    0.029722 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:19:17.773" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:19:17.786" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:19:17.786" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:19:17.871" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:19:17.871" level="INFO">#(CST) 2022/11/17 03:19:17.870976 -    0.097883 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:19:17.879" level="INFO">#(CST) 2022/11/17 03:19:17.878813 -    0.007837 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:19:17.888" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:19:17.901" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:19:17.901" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:19:17.901" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:19:17.660" endtime="20221117 03:19:17.901"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:19:17.902" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:19:17.902" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:19:17.902" endtime="20221117 03:19:17.902"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:19:17.903" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:19:17.903" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:19:17.903" endtime="20221117 03:19:17.903"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:19:17.904" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:19:17.904" endtime="20221117 03:19:17.904"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:19:17.905" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:19:17.905" endtime="20221117 03:19:17.905"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:19:17.906" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:19:17.906" endtime="20221117 03:19:17.906"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:19:17.907" endtime="20221117 03:19:17.907"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:17.904" endtime="20221117 03:19:17.907"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:19:17.908" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:19:17.908" endtime="20221117 03:19:17.908"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:19:17.909" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:19:17.908" endtime="20221117 03:19:17.909"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:19:17.909" endtime="20221117 03:19:17.910"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:17.907" endtime="20221117 03:19:17.910"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:17.904" endtime="20221117 03:19:17.910"></status>
</kw>
<msg timestamp="20221117 03:19:17.910" level="INFO">@{ip_data} = [ 169.254.6.76/16 | 9.41.164.249/24 ]</msg>
<status status="PASS" starttime="20221117 03:19:17.379" endtime="20221117 03:19:17.910"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<msg timestamp="20221117 03:19:17.911" level="FAIL">IP address does not exist.</msg>
<status status="FAIL" starttime="20221117 03:19:17.911" endtime="20221117 03:19:17.911"></status>
</kw>
<status status="FAIL" starttime="20221117 03:19:17.378" endtime="20221117 03:19:17.912"></status>
</kw>
<msg timestamp="20221117 03:19:17.912" level="INFO">${delete_status} = False</msg>
<status status="PASS" starttime="20221117 03:19:17.377" endtime="20221117 03:19:17.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${valid_status_codes}' == '${HTTP_OK}'</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${False}'</arg>
<arg>ELSE</arg>
<arg>Should Be True</arg>
<arg>'${delete_status}' == '${True}'</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>'${delete_status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20221117 03:19:17.914" endtime="20221117 03:19:17.914"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:17.912" endtime="20221117 03:19:17.914"></status>
</kw>
<kw name="Validate Network Config On BMC" library="bmc_network_utils">
<doc>Check that network info obtained via redfish matches info
obtained via CLI.</doc>
<kw name="Get Network Configuration" library="bmc_network_utils">
<doc>Get network configuration.</doc>
<assign>
<var>@{network_configurations}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:19:17.987" level="INFO">#(CST) 2022/11/17 03:19:17.987308 -    0.108495 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:19:18.003" level="INFO">#(CST) 2022/11/17 03:19:18.002653 -    0.015345 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:19:18.003" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:19:18.003" level="INFO">#(CST) 2022/11/17 03:19:18.002960 -    0.000307 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:19:18.003" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:19:18.003" level="INFO">#(CST) 2022/11/17 03:19:18.003329 -    0.000368 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:19:18.013" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:19:18.017" level="INFO">#(CST) 2022/11/17 03:19:18.016998 -    0.013669 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:19:18.017" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:19:18.048" level="INFO">children:
</msg>
<msg timestamp="20221117 03:19:18.048" level="INFO">#(CST) 2022/11/17 03:19:18.048184 -    0.031186 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:19:18.048" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:19:18.061" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:19:18.061" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:19:18.145" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:19:18.145" level="INFO">#(CST) 2022/11/17 03:19:18.145037 -    0.096853 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:19:18.154" level="INFO">#(CST) 2022/11/17 03:19:18.154157 -    0.009120 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:19:18.166" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:19:18.182" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:19:17.916" endtime="20221117 03:19:18.182"></status>
</kw>
<kw name="Get" library="Redfish">
<doc>Perform a GET request</doc>
<arguments>
<arg>${REDFISH_NW_ETH_IFACE}${active_channel_config['${network_active_channel}']['name']}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20221117 03:19:18.198" level="INFO">Attempt 1 of /redfish/v1/Managers/bmc/EthernetInterfaces/eth0</msg>
<msg timestamp="20221117 03:19:18.212" level="INFO">Response Time to /redfish/v1/Managers/bmc/EthernetInterfaces/eth0: 0.01403183676302433 seconds.</msg>
<msg timestamp="20221117 03:19:18.213" level="INFO">${resp} = 200
Strict-Transport-Security max-age=31536000; includeSubdomains; preload
X-Frame-Options DENY
Pragma no-cache
Cache-Control no-Store,no-Cache
X-XSS-Protection 1; mode=block
X-Content-Type-Options no...</msg>
<status status="PASS" starttime="20221117 03:19:18.183" endtime="20221117 03:19:18.213"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${resp.dict}</arg>
<arg>IPv4StaticAddresses</arg>
</arguments>
<assign>
<var>@{network_configurations}</var>
</assign>
<msg timestamp="20221117 03:19:18.215" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:19:18.214" endtime="20221117 03:19:18.215"></status>
</kw>
<msg timestamp="20221117 03:19:18.215" level="INFO">@{network_configurations} = [ {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'} ]</msg>
<status status="PASS" starttime="20221117 03:19:17.915" endtime="20221117 03:19:18.215"></status>
</kw>
<kw name="Get BMC IP Info" library="bmc_network_utils">
<doc>Get system IP address and prefix length.</doc>
<assign>
<var>${ip_data}</var>
</assign>
<kw name="Get Active Channel Config" library="bmc_network_utils">
<doc>Channel configs which medium_type are 'other-lan' or 'lan-802.3' returned by
 this function.</doc>
<assign>
<var>${active_channel_config}</var>
</assign>
<msg timestamp="20221117 03:19:18.317" level="INFO">#(CST) 2022/11/17 03:19:18.316389 -    0.162232 - Executing: execute_ssh_command(cmd_buf = 'sudo -i cat /usr/share/ipmi-providers/channel_config.json', open_con...
</msg>
<msg timestamp="20221117 03:19:18.333" level="INFO">#(CST) 2022/11/17 03:19:18.333004 -    0.016616 - Issuing: sudo -i cat /usr/share/ipmi-providers/channel_config.json
</msg>
<msg timestamp="20221117 03:19:18.333" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:19:18.333" level="INFO">#(CST) 2022/11/17 03:19:18.333323 -    0.000319 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:19:18.334" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:19:18.334" level="INFO">#(CST) 2022/11/17 03:19:18.333735 -    0.000412 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:19:18.344" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:19:18.349" level="INFO">#(CST) 2022/11/17 03:19:18.348742 -    0.015007 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:19:18.349" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:19:18.381" level="INFO">children:
</msg>
<msg timestamp="20221117 03:19:18.381" level="INFO">#(CST) 2022/11/17 03:19:18.381309 -    0.032567 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:19:18.381" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:19:18.394" level="INFO">args:
  [0]:                                            sudo -i cat /usr/share/ipmi-providers/channel_config.json
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:19:18.394" level="INFO">Executing command 'sudo -i cat /usr/share/ipmi-providers/channel_config.json'.</msg>
<msg timestamp="20221117 03:19:18.478" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:19:18.478" level="INFO">#(CST) 2022/11/17 03:19:18.478332 -    0.097023 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:19:18.487" level="INFO">#(CST) 2022/11/17 03:19:18.486873 -    0.008541 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:19:18.498" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:19:18.513" level="INFO">${active_channel_config} = OrderedDict([('1', {'name': 'eth0', 'is_valid': True, 'active_sessions': 0, 'channel_info': {'medium_type': 'lan-802.3', 'protocol_type': 'ipmb-1.0', 'session_supported': 'multi-session', 'is_ipmi': T...</msg>
<status status="PASS" starttime="20221117 03:19:18.217" endtime="20221117 03:19:18.513"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${active_channel_config['${CHANNEL_NUMBER}']['name']}</arg>
</arguments>
<assign>
<var>${ethernet_interface}</var>
</assign>
<msg timestamp="20221117 03:19:18.514" level="INFO">${ethernet_interface} = eth0</msg>
<status status="PASS" starttime="20221117 03:19:18.514" endtime="20221117 03:19:18.515"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr and the return code.</doc>
<arguments>
<arg>/sbin/ip addr | grep ${ethernet_interface}</arg>
</arguments>
<assign>
<var>${cmd_output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20221117 03:19:18.593" level="INFO">#(CST) 2022/11/17 03:19:18.592597 -    0.105725 - Executing: execute_ssh_command(cmd_buf = 'sudo -i /sbin/ip addr | grep eth0', open_connection_args = {'host': ...
</msg>
<msg timestamp="20221117 03:19:18.609" level="INFO">#(CST) 2022/11/17 03:19:18.608546 -    0.015949 - Issuing: sudo -i /sbin/ip addr | grep eth0
</msg>
<msg timestamp="20221117 03:19:18.609" level="INFO">index=1
host=rain40bmc
alias=bmc_connection
port=22
timeout=25 seconds
newline=

prompt=# 
term_type=vt100
width=80
height=24
path_separator=/
encoding=UTF-8
escape_ansi=False</msg>
<msg timestamp="20221117 03:19:18.609" level="INFO">#(CST) 2022/11/17 03:19:18.608860 -    0.000314 - Found the following existing connection:
</msg>
<msg timestamp="20221117 03:19:18.609" level="INFO">connection:
  index:                                          1
  host:                                           rain40bmc
  alias:                                          bmc_connection
  port:                                           22
  timeout:                                        25.0
  newline:                                        

  prompt:                                         # 
  term_type:                                      vt100
  width:                                          80
  height:                                         24
  path_separator:                                 /
  encoding:                                       UTF-8

</msg>
<msg timestamp="20221117 03:19:18.609" level="INFO">#(CST) 2022/11/17 03:19:18.609256 -    0.000396 - Switching to existing connection: "bmc_connection".
</msg>
<msg timestamp="20221117 03:19:18.619" level="INFO">exec_cmd_attempt_num:                             1
</msg>
<msg timestamp="20221117 03:19:18.624" level="INFO">#(CST) 2022/11/17 03:19:18.623675 -    0.014419 - Executing: func_timer_class.run(self = &lt;self&gt;, func = &lt;bound method SSHLibrary.execute_command of &lt;SSHLibrary....
</msg>
<msg timestamp="20221117 03:19:18.624" level="INFO">time_out:                                         None
</msg>
<msg timestamp="20221117 03:19:18.656" level="INFO">children:
</msg>
<msg timestamp="20221117 03:19:18.656" level="INFO">#(CST) 2022/11/17 03:19:18.655867 -    0.032192 - Calling the user's function.
</msg>
<msg timestamp="20221117 03:19:18.656" level="INFO">func_name:                                        execute_command
</msg>
<msg timestamp="20221117 03:19:18.669" level="INFO">args:
  [0]:                                            sudo -i /sbin/ip addr | grep eth0
kwargs:
  [return_stdout]:                                True
  [return_stderr]:                                True
  [return_rc]:                                    True
</msg>
<msg timestamp="20221117 03:19:18.669" level="INFO">Executing command 'sudo -i /sbin/ip addr | grep eth0'.</msg>
<msg timestamp="20221117 03:19:18.753" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20221117 03:19:18.753" level="INFO">#(CST) 2022/11/17 03:19:18.752791 -    0.096924 - Returned from the user's function.
</msg>
<msg timestamp="20221117 03:19:18.762" level="INFO">#(CST) 2022/11/17 03:19:18.761885 -    0.009094 - Executing: func_timer_class.cleanup(self = &lt;self&gt;)
</msg>
<msg timestamp="20221117 03:19:18.774" level="INFO">self.__child_pid:                                 0
</msg>
<msg timestamp="20221117 03:19:18.788" level="INFO">${cmd_output} = 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000
    inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<msg timestamp="20221117 03:19:18.788" level="INFO">${stderr} = </msg>
<msg timestamp="20221117 03:19:18.788" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20221117 03:19:18.515" endtime="20221117 03:19:18.788"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${cmd_output}</arg>
<arg>inet</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20221117 03:19:18.789" level="INFO">2 out of 3 lines matched</msg>
<msg timestamp="20221117 03:19:18.790" level="INFO">${lines} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0
    inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0</msg>
<status status="PASS" starttime="20221117 03:19:18.789" endtime="20221117 03:19:18.790"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${lines}</arg>
</arguments>
<assign>
<var>@{ip_components}</var>
</assign>
<msg timestamp="20221117 03:19:18.791" level="INFO">2 lines returned</msg>
<msg timestamp="20221117 03:19:18.791" level="INFO">@{ip_components} = [     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0 |     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0 ]</msg>
<status status="PASS" starttime="20221117 03:19:18.790" endtime="20221117 03:19:18.791"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{ip_data}</var>
</assign>
<msg timestamp="20221117 03:19:18.792" level="INFO">@{ip_data} = [ ]</msg>
<status status="PASS" starttime="20221117 03:19:18.791" endtime="20221117 03:19:18.792"></status>
</kw>
<kw name="${ip_component} IN [ @{ip_components} ]" type="for">
<kw name="${ip_component} =     inet 169.254.6.76/16 brd 169.254.255.255 scope link eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:19:18.793" level="INFO">@{if_info} = [ inet | 169.254.6.76/16 | brd | 169.254.255.255 | scope | link | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:19:18.793" endtime="20221117 03:19:18.793"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:19:18.794" level="INFO">${ip_n_prefix} = 169.254.6.76/16</msg>
<status status="PASS" starttime="20221117 03:19:18.794" endtime="20221117 03:19:18.794"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:19:18.795" endtime="20221117 03:19:18.795"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:18.792" endtime="20221117 03:19:18.796"></status>
</kw>
<kw name="${ip_component} =     inet 9.41.164.249/24 brd 9.41.164.255 scope global eth0" type="foritem">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ip_component}</arg>
</arguments>
<assign>
<var>@{if_info}</var>
</assign>
<msg timestamp="20221117 03:19:18.797" level="INFO">@{if_info} = [ inet | 9.41.164.249/24 | brd | 9.41.164.255 | scope | global | eth0 ]</msg>
<status status="PASS" starttime="20221117 03:19:18.796" endtime="20221117 03:19:18.797"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${if_info}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${ip_n_prefix}</var>
</assign>
<msg timestamp="20221117 03:19:18.798" level="INFO">${ip_n_prefix} = 9.41.164.249/24</msg>
<status status="PASS" starttime="20221117 03:19:18.797" endtime="20221117 03:19:18.798"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${ip_n_prefix}</arg>
</arguments>
<status status="PASS" starttime="20221117 03:19:18.798" endtime="20221117 03:19:18.799"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:18.796" endtime="20221117 03:19:18.799"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:18.792" endtime="20221117 03:19:18.799"></status>
</kw>
<msg timestamp="20221117 03:19:18.800" level="INFO">${ip_data} = ['169.254.6.76/16', '9.41.164.249/24']</msg>
<status status="PASS" starttime="20221117 03:19:18.216" endtime="20221117 03:19:18.800"></status>
</kw>
<kw name="${network_configuration} IN [ @{network_configurations} ]" type="for">
<kw name="${network_configuration} = {'Address': '9.41.164.249', 'AddressOrigin': 'Static', 'Gateway': '9.41.164.1', 'SubnetMask': '255.255.255.0'}" type="foritem">
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${ip_data}</arg>
<arg>${network_configuration['Address']}/*</arg>
<arg>msg=IP address does not exist.</arg>
</arguments>
<status status="PASS" starttime="20221117 03:19:18.801" endtime="20221117 03:19:18.801"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:18.800" endtime="20221117 03:19:18.801"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:18.800" endtime="20221117 03:19:18.802"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:17.915" endtime="20221117 03:19:18.802"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:55.720" endtime="20221117 03:19:18.802"></status>
</kw>
<kw name="Test Teardown Execution">
<doc>Test teardown execution.</doc>
<kw name="Logout" library="Redfish">
<doc>Logout of session. YOU MUST CALL THIS WHEN YOU ARE DONE TO FREE</doc>
<msg timestamp="20221117 03:19:18.818" level="INFO">Attempt 1 of /redfish/v1/SessionService/Sessions/Uo95FIH8Uc</msg>
<msg timestamp="20221117 03:19:18.827" level="INFO">Response Time to /redfish/v1/SessionService/Sessions/Uo95FIH8Uc: 0.008347378112375736 seconds.</msg>
<msg timestamp="20221117 03:19:18.827" level="INFO">User logged out: {
  "@Message.ExtendedInfo": [
    {
      "@odata.type": "#Message.v1_1_1.Message",
      "Message": "Successfully Completed Request",
      "MessageArgs": [],
      "MessageId": "Base.1.8.1.Success",
      "MessageSeverity": "OK",
      "Resolution": "None"
    }
  ]
}</msg>
<status status="PASS" starttime="20221117 03:19:18.803" endtime="20221117 03:19:18.827"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:18.802" endtime="20221117 03:19:18.827"></status>
</kw>
<status status="PASS" starttime="20221117 03:18:32.478" endtime="20221117 03:19:18.828"></status>
</kw>
<doc>Configure multiple IPv4 addresses and verify.</doc>
<tags>
<tag>Configure_And_Verify_Multiple_IPv4_Addresses</tag>
<tag>Network_Conf_Test</tag>
</tags>
<status status="PASS" starttime="20221117 03:18:08.273" endtime="20221117 03:19:18.828" critical="yes"></status>
</test>
<kw name="Suite Teardown Execution" type="teardown">
<doc>Do suite teardown execution.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${DHCPEnabled}==True</arg>
<arg>Enable IPv4 DHCP Settings</arg>
</arguments>
<status status="PASS" starttime="20221117 03:19:18.830" endtime="20221117 03:19:18.831"></status>
</kw>
<status status="PASS" starttime="20221117 03:19:18.829" endtime="20221117 03:19:18.831"></status>
</kw>
<doc>Network interface configuration and verification
tests.</doc>
<status status="FAIL" starttime="20221117 03:16:03.997" endtime="20221117 03:19:18.831"></status>
</suite>
<statistics>
<total>
<stat pass="2" fail="1">Critical Tests</stat>
<stat pass="2" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">Configure_And_Verify_Multiple_IPv4_Addresses</stat>
<stat pass="0" fail="1">Configure_And_Verify_Multiple_Static_IPv4_Addresses</stat>
<stat pass="2" fail="1">Network_Conf_Test</stat>
<stat pass="1" fail="0">Verify_Modifying_IP_Address_Multiple_Times</stat>
</tag>
<suite>
<stat pass="2" fail="1" id="s1" name="Test Bmc Network Conf">Test Bmc Network Conf</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
